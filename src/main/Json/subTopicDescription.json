[
  {
    "sub_topic_id": 1,
    "sub_topic": "Getting started with .NET Framework",
    "title": "Remarks",
    "description": "The .NET Framework is a set of libraries and a runtime, originally designed by Microsoft. All .NET programs compile to a bytecode called Microsoft Intermediate Language (MSIL). The MSIL is run by the Common Language Runtime (CLR). Below you can find several examples of 'Hello World' in various languages that support the .NET Framework. 'Hello World' is a program that displays 'Hello World' on the display device. It's used for illustrating the basic syntax for constructing a working program. It can also be used as a sanity test to make sure that a language's compiler, development environment, and runtime environment are all working correctly."
  },
  {
    "sub_topic_id": 2,
    "sub_topic": ".NET Core",
    "title": "Remarks",
    "description": "By itself, .NET Core includes a single application model -- console apps -- which is useful for tools, local services and text-based games. Additional application models have been built on top of .NET Core to extend its functionality, such as: ASP.NET Core Windows 10 Universal Windows Platform (UWP) Xamarin.Forms Also, .NET Core implements the .NET Standard Library, and therefore supports .NET Standard Libraries. The .NET Standard Library is an API spec that describes the consistent set of .NET APIs that developers can expect in each .NET implementation. .NET implementations need to implement this spec in order to be considered .NET Standard Library compliant and to support libraries that target the .NET Standard Library."
  },
  {
    "sub_topic_id": 3,
    "sub_topic": "Acronym Glossary",
    "title": "Remarks",
    "description": "CLR: Common Language Runtime, IL: Intermediate Language, EE: Execution Engine, JIT: Just-in-time compiler, GC: Garbage Collector, OOM: Out of memory, STA: Single-threaded apartment, MTA: Multi-threaded apartment"
  },
  {
    "sub_topic_id": 4,
    "sub_topic": "ADO.NET",
    "title": "Remarks",
    "description": "A note on parameterizing SQLs with Parameters.AddWithValue: AddWithValue is never a good starting point. That method relies on inferring the type of the data from what is passed in. With this, you might end up in a situation where the conversion prevents your query from using an index. Note that some SQL Server data types, such as char/varchar (without preceding 'n') or date do not have a corresponding .NET data type. In those cases, Add with the correct data type should be used instead. Related Example"
  },
  {
    "sub_topic_id": 5,
    "sub_topic": "CLR",
    "title": "Remarks",
    "description": "The Common Language Runtime (CLR) is a virtual machine environment and part of the .NET Framework. It contains: A portable bytecode language called Common Intermediate Language (abbreviated CIL, or IL) A Just-In-Time compiler that generates machine code A tracing garbage collector that provides automatic memory management Support for lightweight sub-processes called AppDomains Security mechanisms through the concepts of verifiable code and trust levels Code that runs in the CLR is referred to as managed code to distinguish it from code running outside the CLR (usually native code) which is referred to as unmanaged code. There are various mechanisms that facilitate interoperability between managed and unmanaged code."
  },
  {
    "sub_topic_id": 6,
    "sub_topic": "Code Contracts",
    "title": "Remarks",
    "description": "Code contracts allow for compile or runtime analysis of pre/post conditions of methods and invariant conditions for objects. These conditions may be used to ensure callers and return value match valid states for application processing. Other uses for Code Contracts include documentation generation."
  },
  {
    "sub_topic_id": 7,
    "sub_topic": "Collections",
    "title": "Remarks",
    "description": "Array, List, Queue, SortedList, Stack"
  },
  {
    "sub_topic_id": 8,
    "sub_topic": "Custom Types",
    "title": "Remarks",
    "description": "Typically a struct is used only when performance is very important. Since value types live on the stack, they can be accessed much quicker than classes. However, the stack has much less room than the heap, so structs should be kept small (Microsoft recommends structs take up no more than 16 bytes). A class is the most-used type (of these three) in C#, and is generally what you should go with first. An enum is used whenever you can have a clearly defined, distinct list of items that only need to be defined once (at compile time). Enums are helpful to programmers as a lightweight reference to some value: instead of defining a list of constant variables to compare to, you can use an enum, and get Intellisense support to make sure you don't accidentally use a wrong value."
  },
  {
    "sub_topic_id": 9,
    "sub_topic": "DateTime parsing",
    "title": "Remarks",
    "description": "Input string can be in any format that matches the format string. Any characters that are not format specifiers are treated as literals. Single-character format strings must be one of the standard formats. TryParse accepts a string as input, attempts to parse it into a DateTime, and returns a Boolean result indicating success or failure. If the call succeeds, the variable passed as the out parameter is populated with the parsed result. If the parse fails, the variable passed as the out parameter is set to the default value, DateTime.MinValue. This method attempts to parse the input string based on the system regional settings and known formats such as ISO 8601 and other common formats. TryParseExact method behaves as a combination of TryParse and ParseExact: It allows custom format(s) to be specified, and returns a Boolean result indicating success or failure rather than throwing an exception if the parse fails."
  },
  {
    "sub_topic_id": 10,
    "sub_topic": "Dependency Injection",
    "title": "Remarks",
    "description": "Using dependency injection, the Greeter class relinquishes those responsibilities in favor of a single responsibility, writing a greeting provided to it. The Dependency Inversion Principle suggests that classes should depend on abstractions (like interfaces) rather than on other concrete classes. Direct dependencies (coupling) between classes can make maintenance progressively difficult. Depending on abstractions can reduce that coupling. Dependency injection helps us to achieve that dependency inversion because it leads to writing classes that depend on abstractions. The Greeter class 'knows' nothing at all of the implementation details of IGreetingProvider and IGreetingWriter. It only knows that the injected dependencies implement those interfaces. That means that changes to the concrete classes that implement IGreetingProvider and IGreetingWriter will not affect Greeter. Neither will replacing them with entirely different implementations. Only changes to the interfaces will. Greeter is decoupled. ControlFreakGreeter is impossible to properly unit test. We want to test one small unit of code, but instead our test would include connecting to SQL and executing a stored procedure. It would also include testing the console output. Because ControlFreakGreeter does so much it's impossible to test in isolation from other classes. Greeter is easy to unit test because we can inject mocked implementations of its dependencies that are easier to execute and verify than calling a stored procedure or reading the output of the console. It doesn't require a connection string in app.config. The concrete implementations of IGreetingProvider and IGreetingWriter might become more complex. They, in turn might have their own dependencies which are injected into them. (For example, we'd inject the SQL connection string into SqlGreetingProvider.) But that complexity is 'hidden' from other classes which only depend on the interfaces. That makes it easier to modify one class without a 'ripple effect' that requires us to make corresponding changes to other classes."
  },
  {
    "sub_topic_id": 11,
    "sub_topic": "Dictionaries",
    "title": "Remarks",
    "description": "Dictionary shines when it comes to instantly returning of existing keys from cache, mostly lock free, and contending on a granular level. But what if the object creation is really expensive, outweighing the cost of context switching, and some cache misses occur? If the same key is requested from multiple threads, one of the objects resulting from colliding operations will be eventually added to the collection, and the others will be thrown away, wasting the CPU resource to create the object and memory resource to store the object temporarily. Other resources could be wasted as well. This is really bad."
  },
  {
    "sub_topic_id": 12,
    "sub_topic": "Encryption / Cryptography",
    "title": "Remarks",
    "description": ".NET Framework provides implementation of many cryptographic algorithms. They include basically symmetric algorithms, asymmetric algorithms and hashes."
  },
  {
    "sub_topic_id": 13,
    "sub_topic": "Exceptions",
    "title": "Remarks",
    "description": "Code can and should throw exceptions in exceptional circumstances. Examples of this include: Attempting to read past the end of a stream Not having necessary permissions to access a file. Attempting to perform an invalid operation, such as dividing by zero. A timeout occurring when downloading a file from the internet. The caller can handle these exceptions by 'catching' them, and should only do so when: It can actually resolve the exceptional circumstance or recover appropriately, or; It can provide additional context to the exception that would be useful if the exception needs to be re-thrown (re-thrown exceptions are caught by exception handlers further up the call stack). It should be noted that choosing not to catch an exception is perfectly valid if the intention is for it to be handled at a higher level."
  },
  {
    "sub_topic_id": 14,
    "sub_topic": "Expression Trees",
    "title": "Remarks",
    "description": "Expression trees are data structures used to represent code expressions in the .NET Framework. They can be generated by code and traversed programmatically to translate the code to another language or execute it. The most popular generator of Expression Trees is the C# compiler itself. The C# compiler can generate expression trees if a lambda expression is assigned to a variable of type Expression<Func<...>>. Usually this happens in the context of LINQ. The most popular consumer is Entity Framework's LINQ provider. It consumes the expression trees given to Entity Framework and generates equivalent SQL code which is then executed against the database."
  },
  {
    "sub_topic_id": 15,
    "sub_topic": "File Input/Output",
    "title": "Remarks",
    "description": "Returns true if the file exists, false otherwise. Can also be used in a ternary operator."
  },
  {
    "sub_topic_id": 16,
    "sub_topic": "ForEach",
    "title": "Remarks",
    "description": "You might argue that the intention of the .NET framework is that queries do not have any side effects and the ForEach method is by definition causing a side effect. You might find your code more maintainable and easier to test if you use a plain foreach instead."
  },
  {
    "sub_topic_id": 17,
    "sub_topic": "Garbage Collection",
    "title": "Remarks",
    "description": "The Garbage Collector is aimed to lower the program cost in terms of allocated memory, but doing so has a cost in terms of processing time. In order to achieve a good overall compromise, there are a number of optimizations that should be taken into consideration while programming with the Garbage Collector in mind: If the Collect() method is to be explicitly invoked (which should not often be the case anyway), consider using the 'optimized' mode which finalizes dead object only when memory is actually needed. Instead of invoking the Collect() method, consider using the AddMemoryPressure() and RemoveMemoryPressure() methods, which trigger a memory collection only if actually needed. A memory collection is not guaranteed to finalize all dead objects; instead, the Garbage Collector manages 3 'generations', an object sometimes 'surviving' from a generation into the next one. Several threading models may apply, depending on various factors including setup fine tuning, resulting in different degrees of interference between the Garbage Collector thread and the other application thread(s)."
  },
  {
    "sub_topic_id": 18,
    "sub_topic": "Globalization in ASP.NET MVC using Smart internationalization for ASP.NET",
    "title": "Remarks",
    "description": "The benefit of this approach is that you don't have to clutter controllers and other classes with code to look up values from .resx files. You simply surround text in [[[triple brackets.]]] (The delimiter is configurable.) An HttpModule looks for a translation in your .po file to replace the delimited text. If a translation is found, the HttpModule substitutes the translation. If no translation is found, it removes the triple brackets and renders the page with the original untranslated text. .po files are a standard format for supplying translations for applications, so there are a number of applications available for editing them. It's easy to send a .po file to a non-technical user so that they can add translations."
  },
  {
    "sub_topic_id": 19,
    "sub_topic": "HTTP clients",
    "title": "Remarks",
    "description": "The currently relevant HTTP/1.1 RFCs are: 7230: Message Syntax and Routing. 7231: Semantics and Content. 7232: Conditional Requests. 7233: Range Requests. 7234: Caching. 7235: Authenticaion. 7239: Forwarded HTTP Extension. 7240: Prefer Header for HTTP. There's also the following informational RFCs: 7236: Authentication Scheme Registrations. 7237: Method Registrations. And the experimental RFC: 7238: The Hypertext Transfer Protocol Status Code 308 (Permanent Redirect). Related protocols: 4918: HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV). 4791: Calendaring Extensions to WebDAV (CalDAV)"
  },
  {
    "sub_topic_id": 20,
    "sub_topic": "HTTP servers",
    "title": "Remarks",
    "description": "For simplicity, filenames are assumed to be all ASCII (for the filename part in the Content-Disposition header) and file access errors are not handled. 1 - Create an empty folder, it will contain the files created in the next steps. 2 - Create a file named project.json with the following content (adjust the port number and rootDirectory. 3 - Create a file named Startup.cs. 4 - Open a command prompt, navigate to the folder and execute. 5 - Start the server with: dnx web. Files can now be requested at http://localhost:60000/path/to/file.ext."
  },
  {
    "sub_topic_id": 21,
    "sub_topic": "JIT compiler",
    "title": "Remarks",
    "description": "Why use JIT compilation? Better compatibility: each CLR language needs only one compiler to IL, and this IL can run on any platform on which it can be converted into machine code. Speed: JIT compilation attempts to combine the speed of running ahead-of-time compiled code, and the flexibility of interpretation (can analyze code that will be executed for potential optimizations before compiling). Wikipedia Page for more information on JIT compilation in general: https://en.wikipedia.org/wiki/Just-in-time_compilation"
  },
  {
    "sub_topic_id": 22,
    "sub_topic": "JSON in .NET with Newtonsoft.Json",
    "title": "Remarks",
    "description": "The NuGet package Newtonsoft.Json has become the defacto standard for using and manipulating JSON formatted text and objects in .NET. It is a robust tool that is fast, and easy to use."
  },
  {
    "sub_topic_id": 23,
    "sub_topic": "JSON Serialization",
    "title": "Remarks",
    "description": "The JavaScriptSerializer class was introducted in .NET 3.5 and is used internally by .NET's asynchronous communication layer for AJAX-enabled applications. It can be used to work with JSON in managed code. Despite the existence of the JavaScriptSerializer class, Microsoft recommends using the open source Json.NET library for serialization and deserialization. Json.NET offers better performance and a friendlier interface for mapping JSON to custom classes (a custom JavaScriptConverter object would be needed to accomplish the same with JavaScriptSerializer)."
  },
  {
    "sub_topic_id": 24,
    "sub_topic": "LINQ",
    "title": "Remarks",
    "description": "The LINQ built-in methods are extension methods for the IEnumerable<T> interface that live in the System.Linq.Enumerable class in the System.Core assembly. They are available in .NET Framework 3.5 and later. LINQ allows for simple modification, transformation, and combination of various IEnumerables using a query-like or functional syntax. While the standard LINQ methods can work on any IEnumerable<T>, including the simple arrays and List<T>s, they can also be used on database objects, where the set of LINQ expressions can be transformed in many cases to SQL if the data object supports it. See LINQ to SQL. For the methods that compare objects (such as Contains and Except), IEquatable<T>.Equals is used if the type T of the collection implements that interface. Otherwise, the standard Equals and GetHashCode of the type (possibly overriden from the default Object implementations) are used. There are also overloads for these methods that allow to specify a custom IEqualityComparer<T>. For the ...OrDefault methods, default(T) is used to generate default values."
  },
  {
    "sub_topic_id": 25,
    "sub_topic": "Managed Extensibility Framework",
    "title": "Remarks",
    "description": "One of MEF's big advantages over other technologies that support the inversion-of-control pattern is that it supports resolving dependencies that are not known at design-time, without needing much (if any) configuration."
  },
  {
    "sub_topic_id": 26,
    "sub_topic": "Memory management",
    "title": "Remarks",
    "description": "Performance-critical applications in managed .NET applications can be severely impacted by the GC. When the GC runs, all other threads are suspended until it completes. For this reason, it is recommended to carefully evaluate the GC processes and determine how to minimize when it runs."
  },
  {
    "sub_topic_id": 27,
    "sub_topic": "Networking",
    "title": "Remarks",
    "description": "The currently relevant HTTP/1.1 RFCs are: 7230: Message Syntax and Routing. 7231: Semantics and Content. 7232: Conditional Requests. 7233: Range Requests. 7234: Caching. 7235: Authenticaion. 7239: Forwarded HTTP Extension. 7240: Prefer Header for HTTP. There's also the following informational RFCs: 7236: Authentication Scheme Registrations. 7237: Method Registrations. And the experimental RFC: 7238: The Hypertext Transfer Protocol Status Code 308 (Permanent Redirect). Related protocols: 4918: HTTP Extensions for Web Distributed Authoring and Versioning (WebDAV). 4791: Calendaring Extensions to WebDAV (CalDAV)"
  },
  {
    "sub_topic_id": 28,
    "sub_topic": "NuGet packaging system",
    "title": "Remarks",
    "description": "NuGet is the package manager for the Microsoft development platform including .NET. The NuGet client tools provide the ability to produce and consume packages. The NuGet Gallery is the central package repository used by all package authors and consumers."
  },
  {
    "sub_topic_id": 29,
    "sub_topic": "Parallel processing using .Net framework",
    "title": "Remarks",
    "description": "Parallel extensions have been introduced along with the Task Parallel Library to achieve data Parallelism. Data parallelism refers to scenarios in which the same operation is performed concurrently (that is, in parallel) on elements in a source collection or array. The .NET provides new constructs to achieve data parallelism by using Parallel.For and Parallel.Foreach constructs."
  },
  {
    "sub_topic_id": 30,
    "sub_topic": "Platform Invoke",
    "title": "Remarks",
    "description": "[DllImport('Example.dll')] static extern void SetText(string inString); [DllImport('Example.dll')] static extern void GetText(StringBuilder outString); [MarshalAs(UnmanagedType.ByValTStr, SizeConst = 32)] string text; [MarshalAs(UnmanagedType.ByValArray, SizeConst = 128)] byte[] byteArr; [StructLayout(LayoutKind.Sequential)] public struct PERSON {...} [StructLayout(LayoutKind.Explicit)] public struct MarshaledUnion { [FieldOffset(0)]... }"
  },
  {
    "sub_topic_id": 31,
    "sub_topic": "Process and Thread affinity setting",
    "title": "Remarks",
    "description": "The processor affinity of a thread is the set of processors it has a relationship to. In other words, those it can be scheduled to run on. Processor affinity represents each processor as a bit. Bit 0 represents processor one, bit 1 represents processor two, and so on."
  },
  {
    "sub_topic_id": 32,
    "sub_topic": "Reading and writing Zip files",
    "title": "Remarks",
    "description": "The ZipFile class lives in the System.IO.Compression namespace. It can be used to read from, and write to Zip files. The contents of the stream could not be interpreted as a zip archive. mode is Update and an entry is missing from the archive or is corrupt and cannot be read. mode is Update and an entry is too large to fit into memory."
  },
  {
    "sub_topic_id": 33,
    "sub_topic": "ReadOnlyCollections",
    "title": "Remarks",
    "description": "A ReadOnlyCollection provides a read-only view to an existing collection (the 'source collection'). Items are not directly added to or removed from a ReadOnlyCollection. Instead, they are added and removed from the source collection and the ReadOnlyCollection will reflect these changes to the source. The number and order of elements inside a ReadOnlyCollection cannot be modified, but the properties of the elements can be and the methods can be called, assuming they are in scope. Use a ReadOnlyCollection when you want to allow external code to view your collection without being able to modify it, but still be able to modify the collection yourself."
  },
  {
    "sub_topic_id": 34,
    "sub_topic": "Regular Expressions (System.Text.RegularExpressions)",
    "title": "Remarks",
    "description": "Check if pattern matches input; Find all matches; Match into groups; Passing Options; Remove non alphanumeric characters from string; Simple match and replace"
  },
  {
    "sub_topic_id": 35,
    "sub_topic": "Serial Ports",
    "title": "Remarks",
    "description": "Asynchronous message receiver; Asynchronous read; Basic operation; List available port names; Synchronous text echo service"
  },
  {
    "sub_topic_id": 36,
    "sub_topic": "Settings",
    "title": "Remarks",
    "description": "AppSettings from ConfigurationSettings in .NET 1.x; Introduction to strongly-typed application and user settings support from Visual Studio; Reading AppSettings from ConfigurationManager in .NET 2.0 and later; Reading strongly-typed settings from custom section of configuration file"
  },
  {
    "sub_topic_id": 37,
    "sub_topic": "SpeechRecognitionEngine class to recognize speech",
    "title": "Remarks",
    "description": "To use SpeechRecognitionEngine, your Windows version needs to have speech recognition enabled. You have to add a reference to System.Speech.dll before you can use the speech classes. Syntax: SpeechRecognitionEngine(), SpeechRecognitionEngine.LoadGrammar(Grammar grammar), SpeechRecognitionEngine.SetInputToDefaultAudioDevice(), SpeechRecognitionEngine.RecognizeAsync(RecognizeMode mode), GrammarBuilder(), GrammarBuilder.Append(Choices choices), Choices(params string[] choices), Grammar(GrammarBuilder builder) "
  },
  {
    "sub_topic_id": 38,
    "sub_topic": "Stack and Heap",
    "title": "Remarks",
    "description": "It's worth noting that on declaring a reference type, its initial value will be null. This is because it does not yet point to a location in memory, and is a perfectly valid state. However, with the exception of nullable types, value types must typically always have a value."
  },
  {
    "sub_topic_id": 39,
    "sub_topic": "Strings",
    "title": "Remarks",
    "description": "In .NET strings System.String are sequence of characters System.Char, each character is an UTF-16 encoded code-unit. This distinction is important because spoken language definition of character and .NET (and many other languages) definition of character are different. One character, which should be correctly called grapheme, it's displayed as a glyph and it is defined by one or more Unicode code-points. Each code-point is then encoded in a sequence of code-units. Now it should be clear why a single System.Char does not always represent a grapheme, let's see in real world how they're different: One grapheme, because of combining characters, may result in two or more code-points: à is composed by two code-points: U+0061 LATIN SMALL LETTER A and U+0300 COMBINING GRAVE ACCENT. This is the most common mistake because 'à'.Length == 2 while you may expect 1. There are duplicated characters, for example à may be a single code-point U+00E0 LATIN SMALL LETTER A WITH GRAVE or two code-points as explained above. Obviously they must compare the same: '\\u00e0' == '\\u0061\\u0300' (even if '\\u00e0'.Length != '\\u0061\\u0300'.Length). This is possible because of string normalization performed by String.Normalize() method. An Unicode sequence may contain a composed or decomposed sequence, for example character 한 U+D55C HAN CHARACTER may be a single code-point (encoded as a single code-unit in UTF-16) or a decomposed sequence of its syllables ᄒ, ᅡ and ᆫ. They must be compared equal. One code-point may be encoded to more than one code-units: character 𠂊 U+2008A HAN CHARACTER is encoded as two System.Char ('\\ud840\\udc8a') even if it is just one code-point: UTF-16 encoding is not fixed size! This is a source of countless bugs (also serious security bugs), if for example your application applies a maximum length and blindly truncates string at that then you may create an invalid string. Some languages have digraph and trigraphs, for example in Czech ch is a standalone letter (after h and before i then when ordering a list of strings you will have fyzika before chemie. There are much more issues about text handling, see for example How can I perform a Unicode aware character by character comparison? for a broader introduction and more links to related arguments."
  },
  {
    "sub_topic_id": 40,
    "sub_topic": "Synchronization Contexts",
    "title": "Remarks",
    "description": "A Synchronization Context is an abstraction that allows consuming to code to pass units of work to a scheduler, without requiring awareness of how the work will be scheduled. Synchronization contexts are traditionally used to ensure that code is run on a specific thread. In WPF and Winforms applications, a SynchronizationContext representing the UI thread is provided by the presentation framework. In this way SynchronizationContext can be thought of as a producer-consumer pattern for delegates. A worker thread will produce executable code (the delegate) and queue it or consumption by the UI message loop. The Task Parallel Library provides features for automatically capturing and using synchronization contexts."
  },
  {
    "sub_topic_id": 41,
    "sub_topic": "System.Diagnostics",
    "title": "Remarks",
    "description": "Run shell commands; Send Command to CMD and Receive Output; Stopwatch"
  },
  {
    "sub_topic_id": 42,
    "sub_topic": "System.IO",
    "title": "Remarks",
    "description": "Reading a text file using StreamReader; Reading/Writing Data Using System.IO.File; Serial Ports using System.IO.SerialPorts"
  },
  {
    "sub_topic_id": 43,
    "sub_topic": "System.IO.File class",
    "title": "Remarks",
    "description": "'Touch' a large amount of files (to update last write time); Convert text file encoding; Delete a file; Enumerate files older than a specified amount; Move a File from one location to another; Strip unwanted lines from a text file"
  },
  {
    "sub_topic_id": 44,
    "sub_topic": "System.Net.Mail",
    "title": "Remarks",
    "description": "It is important to Dispose a System.Net.MailMessage because every single attachment contains a Stream and these Streams need to be freed as soon as possible. The using statement ensures that the Disposable object is Disposed also in case of Exceptions."
  },
  {
    "sub_topic_id": 45,
    "sub_topic": "System.Reflection.Emit namespace",
    "title": "Remarks",
    "description": "An assembly consists of one or more modules, each of which contains zero or more types. This code creates a single-module assembly, the most common case. The module contains one type, named 'MyDynamicType', that has a private field, a property that gets and sets the private field, constructors that initialize the private field, and a method that multiplies a user-supplied number by the private field value and returns the result."
  },
  {
    "sub_topic_id": 46,
    "sub_topic": "System.Runtime.Caching.MemoryCache (ObjectCache)",
    "title": "Remarks",
    "description": "Adding Item to Cache (Set); System.Runtime.Caching.MemoryCache (ObjectCache)"
  },
  {
    "sub_topic_id": 47,
    "sub_topic": "Task Parallel Library (TPL)",
    "title": "Remarks",
    "description": "The purpose of the Task Parallel Library is to simplify the process of writing and maintaining multithreaded and parallel code. Some Use Cases*: Keeping a UI responsive by running background work on separate task. Distributing workload; Allowing a client application to send and receive requests at the same time (rest, TCP/UDP, ect); Reading and/or writing multiple files at once; *Code should be considered on a case by case basis for multithreading. For example, if a loop only has a few iterations or only does a small amount of the work, the overhead for parallelism may outweigh the benefits. TPL with .Net 3.5 The TPL is also available for .Net 3.5 included in a NuGet package, it is called Task Parallel Library."
  },
  {
    "sub_topic_id": 48,
    "sub_topic": "Task Parallel Library (TPL) API Overviews",
    "title": "Remarks",
    "description": "The Task Parallel Library is set of public types and APIs that dramatically simplify the process of adding parallelism and concurrency to an application. .Net. TPL was introduced in .Net 4 and is the recommended way to write multi threaded and parallel code. TPL takes care of work scheduling, thread affinity, cancellation support, state management, and load balancing so that the programmer can focus on solving problems rather than spending time on common low level details."
  },
  {
    "sub_topic_id": 49,
    "sub_topic": "Threading",
    "title": "Remarks",
    "description": "If you want to change an attribute of a control such as a textbox or label from another thread than the GUI thread that created the control, you will have to invoke it or else you might get an error message stating: 'Cross-thread operation not valid: Control 'control_name' accessed from a thread other than the thread it was created on.'"
  },
  {
    "sub_topic_id": 50,
    "sub_topic": "TPL Dataflow",
    "title": "Remarks",
    "description": "Post will try to add the item synchronously and return a bool saying whether it succeeded or not. It may not succeed when, for example, a block has reached its BoundedCapcity and has no more room for new items yet. SendAsync on the other hand will return an uncompleted Task<bool> that you can await. That task will complete in the future with a true result when the block cleared its internal queue and can accept more items or with a false result if it's declining permanently (e.g. as a result of cancellation)."
  },
  {
    "sub_topic_id": 51,
    "sub_topic": "Unit testing",
    "title": "Remarks",
    "description": "Right click on the solution, Add new project; From the Test section, select an Unit Test Project; Pick a name for the assembly - if you are testing project Foo, the name can be Foo.Tests; Add a reference to the tested project in the unit test project references"
  },
  {
    "sub_topic_id": 52,
    "sub_topic": "Upload file and POST data to webserver",
    "title": "Remarks",
    "description": "To send a file and form data in single request, content should have multipart/form-data type."
  },
  {
    "sub_topic_id": 53,
    "sub_topic": "Using Progress and IProgress",
    "title": "Remarks",
    "description": "IProgress<T> can be used to report progress of some procedure to another procedure. This example shows how you can create a basic method that reports its progress. It's important to note that the System.Progress<T> class does not have the Report() method available on it. This method was implemented explicitly from the IProgress<T> interface, and therefore must be called on a Progress<T> when it's cast to an IProgress<T>."
  },
  {
    "sub_topic_id": 54,
    "sub_topic": "VB Forms",
    "title": "Remarks",
    "description": "Some things all beginners should know / do that will help them have a good start with VB .Net. Set the following Options: 'can be permanently set' Tools / Options / Projects and Soluntions / VB Defaults; Option Strict On; Option Explicit On; Option Infer Off; Public Class Form1; End Class. Use &, not + for string concatenation. Strings should be studied in some detail as they are widely used."
  },
  {
    "sub_topic_id": 55,
    "sub_topic": "Work with SHA1 in C#",
    "title": "Remarks",
    "description": "in this project you see how to work with SHA1 cryptographic hash function. for example get hash from string and how to crack SHA1 hash. source on git hub: https://github.com/mahdiabasi/SHA1Tool. First you add System.Security.Cryptography and System.IO to your project."
  },
  {
    "sub_topic_id": 56,
    "sub_topic": "Work with SHA1 in C#",
    "title": "Remarks",
    "description": "in this project you see how to work with SHA1 cryptographic hash function. for example get hash from string and how to crack SHA1 hash source compelete on github: https://github.com/mahdiabasi/SHA1Tool"
  },
  {
    "sub_topic_id": 57,
    "sub_topic": "Write to and read from StdErr stream",
    "title": "Remarks",
    "description": "Read from standard error of child process. Write to standard error output using Console"
  },
  {
    "sub_topic_id": 58,
    "sub_topic": "XmlSerializer",
    "title": "Remarks",
    "description": "Do not use the XmlSerializer to parse HTML. For this, special libraries are available like the HTML Agility Pack. Behaviour: Map array name to property (XmlArray); Behaviour: Map Element name to Property; Deserialize object; Efficiently building multiple serializers with derived types specified dynamically; Formatting: Custom DateTime format; Serialize object"
  },
  {
    "sub_topic_id": 59,
    "sub_topic": "Getting started with C Language",
    "title": "Remarks",
    "description": "C is a general-purpose, imperative computer programming language, supporting structured programming, lexical variable scope and recursion, while a static type system prevents many unintended operations. By design, C provides constructs that map efficiently to typical machine instructions, and therefore it has found lasting use in applications that had formerly been coded in assembly language, including operating systems, as well as various application software for computers ranging from supercomputers to embedded systems. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant and portably written C program can be compiled for a very wide variety of computer platforms and operating systems with few changes to its source code. The language has become available on a very wide range of platforms, from embedded microcontrollers to supercomputers. C was originally developed by Dennis Ritchie between 1969 and 1973 at Bell Labs and used to re-implement the Unix operating systems. It has since become one of the most widely used programming languages of all time, with C compilers from various vendors available for the majority of existing computer architectures and operating systems."
  },
  {
    "sub_topic_id": 60,
    "sub_topic": "— character classification & conversion",
    "title": "Remarks",
    "description": "The header ctype.h is a part of the standard C library. It provides functions for classifying and converting characters. All of these functions take one parameter, an int that must be either EOF or representable as an unsigned char. The names of the classifying functions are prefixed with 'is'. Each returns an integer non-zero value (TRUE) if the character passed to it satisfies the related condition. If the condition is not satisfied then the function returns a zero value (FALSE). These classifying functions operate as shown, assuming the default C locale: int a; int c = 'A'; a = isalpha(c); /* Checks if c is alphabetic (A-Z, a-z), returns non-zero here. */ a = isalnum(c); /* Checks if c  is alphanumeric (A-Z, a-z, 0-9), returns non-zero here. */ a = iscntrl(c); /* Checks is c is a control character (0x00-0x1F, 0x7F), returns zero here. */ a = isdigit(c); /* Checks if c is a digit (0-9), returns zero here. */ a = isgraph(c); /* Checks if c has a graphical representation (any printing character except space), returns non-zero here. */ a = islower(c); /* Checks if c is a lower-case letter (a-z), returns zero here. */ a = isprint(c); /* Checks if c is any printable character (including space), returns non-zero here. */ a = isupper(c); /* Checks if c is a upper-case letter (a-z), returns zero here. */ a = ispunct(c); /* Checks if c is a punctuation character, returns zero here. */ a = isspace(c); /* Checks if c is a white-space character, returns zero here. */ a = isupper(c); /* Checks if c is an upper-case letter (A-Z), returns non-zero here. */ a = isxdigit(c); /* Checks if c is a hexadecimal digit (A-F, a-f, 0-9), returns non-zero here. */ C99 a = isblank(c); /* Checks if c is a blank character (space or tab), returns non-zero here. */ There are two conversion functions. These are named using the prefix 'to'. These functions take the same argument as those above. However the return value is not a simple zero or non-zero but the passed argument changed in some manner."
  },
  {
    "sub_topic_id": 61,
    "sub_topic": "Aliasing and effective type",
    "title": "Remarks",
    "description": "Violations of aliasing rules and of violating the effective type of an object are two different things and should not be confounded. Aliasing is the property of two pointers a and b that refer to the same object, that is that a == b. The effective type of a data object is used by C to determine which operations can be done on that object. In particular the effective type is used to determine if two pointers can alias each other. Aliasing can be a problem for optimization, because changing the object through one pointer, a say, can change the object that is visible through the other pointer, b. If your C compiler would have to assume that pointers could always alias each other, regardless of their type and provenance, many optimization opportunities would be lost, and many programs would run slower. C's strict aliasing rules refers to cases in the compiler may assume which objects do (or do not) alias each other. There are two rules of thumb that you always should have in mind for data pointers. Unless said otherwise, two pointers with the same base type may alias. Two pointers with different base type cannot alias, unless at least one of the two types is a character type. Here base type means that we put aside type qualifications such as const, e.g. If a is double* and b is const double*, the compiler must generally assume that a change of *a may change *b. Violating the second rule can have catastrophic results. Here violating the strict aliasing rule means that you present two pointers a and b of different type to the compiler which in reality point to the same object. The compiler then may always assume that the two point to different objects, and will not update its idea of *b if you changed the object through *a. If you do so the behavior of your program becomes undefined. Therefore, C puts quite severe restrictions on pointer conversions in order to help you to avoid such situation to occur accidentally. Unless the source or target type is void, all pointer conversions between pointers with different base type must be explicit. Or in other words, they need a cast, unless you do a conversion that just adds a qualifier such as const to the target type. Avoiding pointer conversions in general and casts in particular protects you from aliasing problems. Unless you really need them, and these cases are very special, you should avoid them as you can."
  },
  {
    "sub_topic_id": 62,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "Arrays are derived data types, representing an ordered collection of values ('elements') of another type. Most arrays in C have a fixed number of elements of any one type, and its representation stores the elements contiguously in memory without gaps or padding. C allows multidimensional arrays whose elements are other arrays, and also arrays of pointers. C supports dynamically allocated arrays whose size is determined at run time. C99 and later supports variable length arrays or VLAs. Why do we need arrays? Arrays provide a way to organize objects into an aggregate with its own significance. For example, C strings are arrays of characters (chars), and a string such as 'Hello, World!' has meaning as an aggregate that is not inherent in the characters individually. Similarly, arrays are commonly used to represent mathematical vectors and matrices, as well as lists of many kinds. Moreover, without some way to group the elements, one would need to address each individually, such as via separate variables. Not only is that unwieldy, it does not easily accommodate collections of different lengths. Arrays are implicitly converted to pointers in most contexts. Except when appearing as the operand of the sizeof operator, the _Alignof operator (C2011), or the unary & (address-of) operator, or as a string literal used to initialize an(other) array, an array is implicitly converted into ('decays to') a pointer to its first element. This implicit conversion is tightly coupled to the definition of the array subscripting operator ([]): the expression arr[idx] is defined as be equivalent to *(arr + idx). Furthermore, since pointer arithmetic is commutative, *(arr + idx) is also equivalent to *(idx + arr), which in turn is equivalent toidx[arr]. All of those expressions are valid and evaluate to the same value, provided that either idx or arr is a pointer (or an array, which decays to a pointer), the other is an integer, and the integer is a valid index into the array to which the pointer points. As a special case, observe that &(arr[0]) is equivalent to &*(arr + 0), which simplifies to arr. All of those expressions are interchangeable wherever the last decays to a pointer. This simply expresses again that an array decays to a pointer to its first element. In contrast, if the address-of operator is applied to an array of type T[N] (i.e. &arr) then the result has type T (*)[N] and points to the whole array. This is distinct from a pointer to the first array element at least with respect to pointer arithmetic, which is defined in terms of the size of the pointed-to type."
  },
  {
    "sub_topic_id": 63,
    "sub_topic": "Assertion",
    "title": "Remarks",
    "description": "An assertion is a predicate that the presented condition must be true at the moment the assertion is encountered by the software. Most common are simple assertions, which are validated at execution time. However, static assertions are checked at compile time. Opinion varies about whether NDEBUG should always be used for production compilations. The pro-camp argues that assert calls abort and assertion messages are not helpful for end users, so the result is not helpful to user. If you have fatal conditions to check in production code you should use ordinary if/else conditions and exit or quick_exit to end the program. In contrast to abort, these allow the program to do some cleanup (via functions registered with atexit or at_quick_exit). The con-camp argues that assert calls should never fire in production code, but if they do, the condition that is checked means there is something dramatically wrong and the program will misbehave worse if execution continues. Therefore, it is better to have the assertions active in production code because if they fire, hell has already broken loose. Another option is to use a home-brew system of assertions which always perform the check but handle errors differently between development (where abort is appropriate) and production (where an 'unexpected internal error - please contact Technical Support' may be more appropriate). static_assert expands to _Static_assert which is a keyword. The condition is checked at compile time, thus condition must be a constant expression. There is no need for this to be handled differently between development and production."
  },
  {
    "sub_topic_id": 64,
    "sub_topic": "Atomics",
    "title": "Remarks",
    "description": "Atomics as part of the C language are an optional feature that is available since C11. Their purpose is to ensure race-free access to variables that are shared between different threads. Without atomic qualification, the state of a shared variable would be undefined if two threads access it concurrently. Eg an increment operation (++) could be split into several assembler instructions, a read, the addition itself and a store instruction. If another thread would be doing the same operation their two instruction sequences could be intertwined and lead to an inconsistent result. Types: All object types with the exception of array types can be qualified with _Atomic. Operators: All read-modify-write operators (e.g ++ or *=) on these are guaranteed to be atomic. Operations: There are some other operations that are specified as type generic functions, e.g atomic_compare_exchange. Threads: Access to them is guaranteed not to produce data race when they are accessed by different threads. Signal handlers: Atomic types are called lock-free if all operations on them are stateless. In that case they can also be used to deal state changes between normal control flow and a signal handler. There is only one data type that is guaranteed to be lock-free: atomic_flag. This is a minimal type who's operations are intended to map to efficient test-and-set hardware instructions. Other means to avoid race conditions are available in C11's thread interface, in particular a mutex type mtx_t to mutually exclude threads from accessing critical data or critical sections of code. If atomics are not available, these must be used to prevent races."
  },
  {
    "sub_topic_id": 65,
    "sub_topic": "Bit-fields",
    "title": "Remarks",
    "description": "Most variables in C have a size that is an integral number of bytes. Bit-fields are a part of a structure that don't necessarily occupy a integral number of bytes; they can any number of bits. Multiple bit-fields can be packed into a single storage unit. They are a part of standard C, but there are many aspects that are implementation defined. They are one of the least portable parts of C. The only portable types for bit-fields are signed, unsigned or _Bool. The plain int type can be used, but the standard says (§6.7.2¶5) … for bit-fields, it is implementation-defined whether the specifier int designates the same type as signed int or the same type as unsigned int. Other integer types may be allowed by a specific implementation, but using them is not portable."
  },
  {
    "sub_topic_id": 66,
    "sub_topic": "Boolean",
    "title": "Remarks",
    "description": "To use the predefined type _Bool and the header <stdbool.h>, you must be using the C99/C11 versions of C. To avoid compiler warnings and possibly errors, you should only use the typedef/define example if you're using C89 and previous versions of the language. This allows compilers for historic versions of C to function, but remains forward compatible if the code is compiled with a modern C compiler. For more information on typedef, see Typedef, for more on enum see Enumerations. C of all versions, will effectively treat any integer value other than 0 as true for comparison operators and the integer value 0 as false. If you don't have _Bool or bool as of C99 available, you could simulate a Boolean data type in C using #define macros, and you might still find such things in legacy code."
  },
  {
    "sub_topic_id": 67,
    "sub_topic": "Command-line arguments",
    "title": "Remarks",
    "description": "A C program running in a 'hosted environment' (the normal type — as opposed to a 'freestanding environment') must have a main function. It is traditionally defined as: int main(int argc, char *argv[]). Note that argv can also be, and very often is, defined as char **argv; the behavior is the same. Also, the parameter names can be changed because they're just local variables within the function, but argc and argv are conventional and you should use those names. For main functions where the code does not use any arguments, use int main(void). Both parameters are initialized when the program starts: argc is initialized to the number of space-separated arguments given to the program from the command-line as well as the program name itself. argv is an array of char-pointers (strings) containing the arguments (and the program name) that was given on the command-line. some systems expand command-line arguments 'in the shell', others do not. On Unix if the user types myprogram *.txt the program will receive a list of text files; on Windows it will receive the string '*.txt'. Note: Before using argv, you might need to check the value of argc. In theory, argc could be 0, and if argc is zero, then there are no arguments and argv[0] (equivalent to argv[argc]) is a null pointer. It would be an unusual system with a hosted environment if you ran into this problem. Similarly, it is possible, though very unusual, for there to be no information about the program name. In that case, argv[0][0] == '\\0' — the program name may be empty."
  },
  {
    "sub_topic_id": 68,
    "sub_topic": "Comments",
    "title": "Remarks",
    "description": "Comments are used to indicate something to the person reading the code. Comments are treated like a blank by the compiler and do not change anything in the code's actual meaning. There are two syntaxes used for comments in C, the original /* */ and the slightly newer //. Some documentation systems use specially formatted comments to help produce the documentation for code. Syntax /*...*/, //... (C99 and later only)"
  },
  {
    "sub_topic_id": 69,
    "sub_topic": "Common C programming idioms and developer practices",
    "title": "Remarks",
    "description": "Suppose you are creating a function that requires no arguments when it is called and you are faced with the dilemma of how you should define the parameter list in the function prototype and the function definition. You have the choice of keeping the parameter list empty for both prototype and definition. Thereby, they look just like the function call statement you will need. You read somewhere that one of the uses of keyword void (there are only a few of them), is to define the parameter list of functions that do not accept any arguments in their call. So, this is also a choice. So, which is the correct choice? ANSWER: using the keyword void. GENERAL ADVICE: If a language provides certain feature to use for a special purpose, you are better off using that in your code. For example, using enums instead of #define macros (that's for another example). C11 section 6.7.6.3 'Function declarators', paragraph 10, states: The special case of an unnamed parameter of type void as the only item in the list specifies that the function has no parameters. Paragraph 14 of that same section shows the only difference: … An empty list in a function declarator that is part of a definition of that function specifies that the function has no parameters. The empty list in a function declarator that is not part of a definition of that function specifies that no information about the number or types of the parameters is supplied. A simplified explanation provided by K&R (pgs- 72-73) for the above stuff: Furthermore, if a function declaration does not include arguments, as in double atof();, that too is taken to mean that nothing is to be assumed about the arguments of atof; all parameter checking is turned off. This special meaning of the empty argument list is intended to permit older C programs to compile with new compilers. But it's a bad idea to use it with new programs. If the function takes arguments, declare them; if it takes no arguments, use void."
  },
  {
    "sub_topic_id": 70,
    "sub_topic": "Common pitfalls",
    "title": "Remarks",
    "description": "This section discusses some of the common mistakes that a C programmer should be aware of and should avoid making. For more on some unexpected problems and their causes, please see Undefined behavior. Adding a semicolon to a #define; Checking logical expression against 'true'; Comparing floating point numbers; Copying too much; Doing extra scaling in pointer arithmetic; Floating point literals are of type double by default; Forgetting to allocate one extra byte for \\0; Forgetting to copy the return value of realloc into a temporary; Forgetting to free memory (memory leaks); Ignoring return values of library functions; Incautious use of semicolons; Macros are simple string replacements; Mistakenly writing = instead of == when comparing; Misunderstanding array decay; Mixing signed and unsigned integers in arithmetic operations; Multi-line comments cannot be nested; Newline character is not consumed in typical scanf() call; Overstepping array boundaries; Passing unadjacent arrays to functions expecting 'real' multidimensional arrays; Recursive function — missing out the base condition; Undefined reference errors when linking; Using character constants instead of string literals, and vice versa"
  },
  {
    "sub_topic_id": 71,
    "sub_topic": "Compilation",
    "title": "Remarks",
    "description": "The C language is traditionally a compiled language (as opposed to interpreted). The C Standard defines translation phases, and the product of applying them is a program image (or compiled program). In c11, the phases are listed in §5.1.1.2. .c Source file. Usually contains definitions and code. .h Header file. Usually contains declarations. .o Object file. Compiled code in machine language. .obj Alternative extension for object files. .a Library file. Package of object files. .dll Dynamic-Link Library on Windows. .so Shared object (library) on many Unix-like systems. .dylib Dynamic-Link Library on OSX (Unix variant). .exe, .com Windows executable file. Formed by linking object files and library files. In Unix-like systems, there is no special file name extension for executable file."
  },
  {
    "sub_topic_id": 72,
    "sub_topic": "Compound Literals",
    "title": "Remarks",
    "description": "C standard says in C11-§6.5.2.5/3: A postfix expression that consists of a parenthesized type name followed by a brace enclosed list of initializers is a compound literal. It provides an unnamed object whose value is given by the initializer list.99) and footnote 99 says: Note that this differs from a cast expression. For example, a cast specifies a conversion to scalar types or void only, and the result of a cast expression is not an lvalue. Note that: String literals, and compound literals with const-qualified types, need not designate distinct objects. This allows implementations to share storage for string literals and constant compound literals with the same or overlapping representations. Example is given in standard: C11-§6.5.2.5/13: Like string literals, const-qualified compound literals can be placed into read-only memory and can even be shared. For example, (const char []){'abc'} == 'abc' might yield 1 if the literals’ storage is shared."
  },
  {
    "sub_topic_id": 73,
    "sub_topic": "Constraints",
    "title": "Remarks",
    "description": "Constraints are a term used in all of the existing C specifications (recently ISO-IEC 9899-2011). They are one of the three parts of the language described in clause 6 of the standard (along side syntax and semantics). ISO-IEC 9899-2011 defines a constraint as a: restriction, either syntactic or semantic, by which the exposition of language elements is to be interpreted (Please also note, in terms of the C standard, a 'runtime-constraint' is not a kind of constraint and has extensively different rules.) In other words a constraint describes a rule of the language which would make an otherwise syntactically valid program illegal. In this respect constraints are somewhat like undefined behavior, any program which does not follow them is not defined in terms of the C language. Constraints on the other hand have a very significant difference from Undefined Behaviors. Namely an implementation is required to provide a diagnostic message during the translation phase (part of compilation) if a constraint is breached, this message may be a warning or may halt the compilation."
  },
  {
    "sub_topic_id": 74,
    "sub_topic": "Create and include header files",
    "title": "Remarks",
    "description": "In modern C, header files are crucial tools that must be designed and used correctly. They allow the compiler to cross-check independently compiled parts of a program. Headers declare types, functions, macros etc that are needed by the consumers of a set of facilities. All the code that uses any of those facilities includes the header. All the code that defines those facilities includes the header. This allows the compiler to check that the uses and definitions match."
  },
  {
    "sub_topic_id": 75,
    "sub_topic": "Data Types",
    "title": "Remarks",
    "description": "While char is required to be 1 byte, 1 byte is not required to be 8 bits (often also called an octet), even though most of modern computer platforms define it as 8 bits. The implementation's number of bits per char is provided by the CHAR_BIT macro, defined in <limits.h>. POSIX does require 1 byte to be 8 bits. Fixed width integer types should be use sparsely, C's built-in types are designed to be natural on every architecture, the fixed width types should only be used if you explicitly need a specifically sized integer (for example for networking)."
  },
  {
    "sub_topic_id": 76,
    "sub_topic": "Declaration vs Definition",
    "title": "Remarks",
    "description": "Source: What is the difference between a definition and a declaration? Source (For weak and strong symbols): https://www.amazon.com/Computer-Systems-Programmers-Perspective-2nd/dp/0136108040/. A definition can be used in the place of a declaration. However, it must be defined exactly once. If you forget to define something that's been declared and referenced somewhere, then the linker doesn't know what to link references to and complains about a missing symbols. If you define something more than once, then the linker doesn't know which of the definitions to link references to and complains about duplicated symbols."
  },
  {
    "sub_topic_id": 77,
    "sub_topic": "Declarations",
    "title": "Remarks",
    "description": "Declaration of identifier referring to object or function is often referred for short as simply a declaration of object or function. How to apply the rule. STEP 1 Find the identifier. This is your starting point. Then say to yourself, 'identifier is.' You've started your declaration. STEP 2 Look at the symbols on the right of the identifier. If, say, you find () there, then you know that this is the declaration for a function. So you would then have 'identifier is function returning'. Or if you found a [] there, you would say 'identifier is array of'. Continue right until you run out of symbols OR hit a right parenthesis ). (If you hit a left parenthesis (, that's the beginning of a () symbol, even if there is stuff in between the parentheses. More on that below.) STEP 3 Look at the symbols to the left of the identifier. If it is not one of our symbols above (say, something like 'int'), just say it. Otherwise, translate it into English using that table above. Keep going left until you run out of symbols OR hit a left parenthesis (. Now repeat steps 2 and 3 until you've formed your declaration."
  },
  {
    "sub_topic_id": 78,
    "sub_topic": "Enumerations",
    "title": "Remarks",
    "description": "Enumerations consist of the enum keyword and an optional identifier followed by an enumerator-list enclosed by braces. An identifier is of type int. The enumerator-list has at least one enumerator element. An enumerator may optionally be 'assigned' a constant expression of type int. An enumerator is constant and is compatible to either a char, a signed integer or an unsigned integer. Which ever is used is implementation-defined. In any case the type used should be able to represent all values defined for the enumeration in question. If no constant expression is 'assigned' to an enumerator and it is the 1st entry in an enumerator-list it takes value of 0, else it get takes the value of the previous entry in the enumerator-list plus 1. Using multiple 'assignments' can lead to different enumerators of the same enumeration carry the same values."
  },
  {
    "sub_topic_id": 79,
    "sub_topic": "Error handling",
    "title": "Remarks",
    "description": "Have in mind that errno is not necessarily a variable but that the syntax is only an indication how it might been declared. On many modern systems with thread interfaces errno is some macro that resolves to an object that is local to the current thread."
  },
  {
    "sub_topic_id": 80,
    "sub_topic": "Files and I/O streams",
    "title": "Remarks",
    "description": "Mode strings in fopen() and freopen() can be one of those values: 'r': Open the file in read-only mode, with the cursor set to the beginning of the file. 'r+': Open the file in read-write mode, with the cursor set to the beginning of the file. 'w': Open or create the file in write-only mode, with its content truncated to 0 bytes. The cursor is set to the beginning of the file. 'w+': Open or create the file in read-write mode, with its content truncated to 0 bytes. The cursor is set to the beginning of the file. 'a': Open or create the file in write-only mode, with the cursor set to the end of the file 'a+': Open or create the file in read-write mode, with the read-cursor set to the beginning of the file. The output, however, will always be appended to the end of the file. Each of these file modes may have a b added after the initial letter (e.g. 'rb' or 'a+b' or 'ab+'). The b means that the file should be treated as a binary file instead of a text file on those systems where there is a difference. It doesn't make a difference on Unix-like systems; it is important on Windows systems. (Additionally, Windows fopen allows an explicit t instead of b to indicate 'text file' — and numerous other platform-specific options.). C11 'wx': Create a text file in write-only mode. The file may not exist. 'wbx': Create a binary file in write-only mode. The file may not exist. The x, if present, must be the last character in the mode string."
  },
  {
    "sub_topic_id": 82,
    "sub_topic": "Formatted Input/Output",
    "title": "Remarks",
    "description": "Note that length modifiers can be applied to %n (e.g. %hhn indicates that a following n conversion specifier applies to a pointer to a signed char argument, according to the ISO/IEC 9899:2011 §7.21.6.1 ¶7). Note that the floating point conversions apply to types float and double because of default promotion rules — §6.5.2.2 Function calls, ¶7 The ellipsis notation in a function prototype declarator causes argument type conversion to stop after the last declared parameter. The default argument promotions are performed on trailing arguments.) Thus, functions such as printf() are only ever passed double values, even if the variable referenced is of type float. With the g and G formats, the choice between e and f (or E and F) notation is documented in the C standard and in the POSIX specification for printf(): The double argument representing a floating-point number shall be converted in the style f or e (or in the style F or E in the case of a G conversion specifier), depending on the value converted and the precision. Let P equal the precision if non-zero, 6 if the precision is omitted, or 1 if the precision is zero. Then, if a conversion with style E would have an exponent of X: If P > X >= -4, the conversion shall be with style f (or F) and precision P - (X+1). Otherwise, the conversion shall be with style e (or E) and precision P - 1. Finally, unless the '#' flag is used, any trailing zeros shall be removed from the fractional portion of the result and the decimal-point character shall be removed if there is no fractional portion remaining."
  },
  {
    "sub_topic_id": 83,
    "sub_topic": "Function Parameters",
    "title": "Remarks",
    "description": "In C, it is common to use return values to denote errors that occur; and to return data through the use of passed in pointers. This can be done for multiple reasons; including not having to allocate memory on the heap or using static allocation at the point where the function is called."
  },
  {
    "sub_topic_id": 84,
    "sub_topic": "Function Pointers",
    "title": "Remarks",
    "description": "Function pointers are pointers that point to functions instead of data types. They can be used to allow variability in the function that is to be called, at run-time. So how do you specify which functions you can pass into graph() and which ones you can't? The conventional way is by using a syntax that may not be easy to read or understand: double (*fn)(double); // fn is a pointer-to-function that takes a double and returns one The problem above is that there are two things trying to be defined at the same time: the structure of the function, and the fact that it's a pointer. So, split the two definitions! But by using typedef, a better syntax (easier to read & understand) can be achieved."
  },
  {
    "sub_topic_id": 85,
    "sub_topic": "Generic selection",
    "title": "Remarks",
    "description": "_Generic ( assignment-expression , generic-assoc-list. generic-assoc-list generic-association OR generic-assoc-list , generic-association; generic-association type-name : assignment-expression OR default : assignment-expression. All type qualifiers will be dropped during the evaluation of _Generic primary expression. _Generic primary expression is evaluated at translation phase 7. So phases like string concatenation have been finished before its evaluation. )"
  },
  {
    "sub_topic_id": 86,
    "sub_topic": "Identifier Scope",
    "title": "Remarks",
    "description": "An identifier has block scope if its corresponding declaration appears inside a block (parameter declaration in function definition apply). The scope ends at the end of the corresponding block. No different entities with the same identifier can have the same scope, but scopes may overlap. In case of overlapping scopes the only visible one is the one declared in the innermost scope. Block Scope; File Scope; Function Prototype Scope; Function scope"
  },
  {
    "sub_topic_id": 87,
    "sub_topic": "Implementation-defined behaviour",
    "title": "Remarks",
    "description": "The C standard describes the language syntax, the functions provided by the standard library, and the behavior of conforming C processors (roughly speaking, compilers) and conforming C programs. With respect to behavior, the standard for the most part specifies particular behaviors for programs and processors. On the other hand, some operations have explicit or implicit undefined behavior -- such operations are always to be avoided, as you cannot rely on anything about them. In between, there are a variety of implementation defined behaviors. These behaviors may vary between C processors, runtimes, and standard libraries (collectively, implementations), but they are consistent and reliable for any given implementation, and conforming implementations document their behavior in each of these areas. It is sometimes reasonable for a program to rely on implementation-defined behavior. For example, if the program is anyway specific to a particular operating environment then relying on implementation-defined behaviors general to the common processors for that environment is unlikely to be a problem. Alternatively, one can use conditional compilation directives to select implementation-defined behaviors appropriate for the implementation in use. In any case, it is essential to know which operations have implementation defined behavior, so as to either avoid them or to make an informed decision about whether and how to use them. The balance of these remarks constitute a list of all the implementation-defined behaviors and characteristics specified in the C2011 standard, with references to the standard. Many of them use the terminology of the standard. Some others rely more generally on the context of the standard, such as the eight stages of translating source code into a program, or the difference between hosted and freestanding implementations. Some that may be particularly surprising or notable are presented in bold typeface. Not all the behaviors described are supported by earlier C standards, but generally speaking, they have implementation-defined behavior in all versions of the standard that support them."
  },
  {
    "sub_topic_id": 88,
    "sub_topic": "Implicit and Explicit Conversions",
    "title": "Remarks",
    "description": "Explicit Conversion (aka 'Casting'): (type) expression. 'Explicit conversion' is also commonly referred to as 'casting'. When a value with integer type is converted to another integer type other than _Bool, if the value can be represented by the new type, it is unchanged. Otherwise, if the new type is unsigned, the value is converted by repeatedly adding or subtracting one more than the maximum value that can be represented in the new type until the value is in the range of the new type. Otherwise, the new type is signed and the value cannot be represented in it; either the result is implementation-defined or an implementation-defined signal is raised. Usually you should not truncate a wide signed type to a narrower signed type, because obviously the values can't fit and there is no clear meaning that this should have. The C standard cited above defines these cases to be 'implementation-defined', that is, they are not portable. The following example supposes that int is 32 bit wide. Pointer conversions to void* are implicit, but any other pointer conversion must be explicit. While the compiler allows an explicit conversion from any pointer-to-data type to any other pointer-to-data type, accessing an object through a wrongly typed pointer is erroneous and leads to undefined behavior. The only case that these are allowed are if the types are compatible or if the pointer with which your are looking at the object is a character type."
  },
  {
    "sub_topic_id": 89,
    "sub_topic": "Initialization",
    "title": "Remarks",
    "description": "In effect, initialization of automatic variables are just shorthand for assignment statements. Which form to prefer is largely a matter of taste. We generally use explicit assignments, because initializers in declarations are harder to see and further away from the point of use. On the other hand, variables should only be declared when they're about to be used whenever possible. Initializing an array: An array may be initialized by following its declaration with a list of initializers enclosed in braces and separated by commas. For example, to initialize an array days with the number of days in each month: int days_of_month[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 } (Note that January is encoded as month zero in this structure.) When the size of the array is omitted, the compiler will compute the length by counting the initializers, of which there are 12 in this case. If there are fewer initializers for an array than the specified size, the others will be zero for all types of variables. It is an error to have too many initializers. There is no standard way to specify repetition of an initializer — but GCC has an extension to do so. C99 In C89/C90 or earlier versions of C, there was no way to initialize an element in the middle of an array without supplying all the preceding values as well. C99 With C99 and above, designated initializers allow you to initialize arbitrary elements of an array, leaving any uninitialized values as zeros."
  },
  {
    "sub_topic_id": 90,
    "sub_topic": "Inline assembly",
    "title": "Remarks",
    "description": "Inline assembly is the practice of adding assembly instructions in the middle of C source code. No ISO C standard requires support of inline assembly. Since it is not required, the syntax for inline assembly varies from compiler to compiler. Even though it is typically supported there are very few reasons to use inline assembly and many reasons not to. Pros Performance By writing the specific assembly instructions for an operation, you can achieve better performance than the assembly code generated by the compiler. Note that these performance gains are rare. In most cases you can achieve better performance gains just by rearranging your C code so the optimizer can do its job. Hardware interface Device driver or processor startup code may need some assembly code to access the correct registers and to guarantee certain operations occur in a specific order with a specific delay between operations. Cons Compiler Portability Syntax for inline assembly is not guaranteed to be the same from one compiler to another. If you are writing code with inline assembly that should be supported by different compilers, use preprocessor macros (#ifdef) to check which compiler is being used. Then, write a separate inline assembly section for each supported compiler. Processor Portability You can't write inline assembly for an x86 processor and expect it to work on an ARM processor. Inline assembly is intended to be written for a specific processor or processor family. If you have inline assembly that you want supported on different processors, use preprocessor macros to check which processor the code is being compiled for and to select the appropriate assembly code section. Future Performance Changes Inline assembly may be written expecting delays based upon a certain processor clock speed. If the program is compiled for a processor with a faster clock, the assembly code may not perform as expected."
  },
  {
    "sub_topic_id": 91,
    "sub_topic": "Inlining",
    "title": "Remarks",
    "description": "For small functions that get called often, the overhead associated with the function call can be a significant fraction of the total execution time of that function. One way of improving performance, then, is to eliminate the overhead. In this example we use four functions (plus main()) in three source files. Two of those (plusfive() and timestwo()) each get called by the other two located in 'source1.c' and 'source2.c'. The main() is included so we have a working example."
  },
  {
    "sub_topic_id": 92,
    "sub_topic": "Interprocess Communication (IPC)",
    "title": "Remarks",
    "description": "Inter-process communication (IPC) mechanisms allow different independent processes to communicate with each other. Standard C does not provide any IPC mechanisms. Therefore, all such mechanisms are defined by the host operating system. POSIX defines an extensive set of IPC mechanisms; Windows defines another set; and other systems define their own variants."
  },
  {
    "sub_topic_id": 94,
    "sub_topic": "Iteration Statements/Loops: for, while, do-while",
    "title": "Remarks",
    "description": "/* all versions */; for ([expression]; [expression]; [expression]) one_statement; for ([expression]; [expression]; [expression]) { zero or several statements }; while (expression) one_statement; while (expression) { zero or several statements }; do one_statement while (expression); do { one or more statements } while (expression); // since C99 in addition to the form above; for (declaration; [expression]; [expression]) one_statement; for (declaration; [expression]; [expression]) { zero or several statements }"
  },
  {
    "sub_topic_id": 95,
    "sub_topic": "Jump Statements",
    "title": "Remarks",
    "description": " These are the jumps that are integrated into C by means of keywords. C also has another jump construct, long jump, that is specified with a data type, jmp_buf, and C library calls, setjmp and longjmp.return val; /* Returns from the current function. val can be a value of any type that is converts to the function's return type. */; return; /* Returns from the current void-function. */; break; /* Unconditionally jumps beyond the end ('breaks out') of an Iteration Statement (loop) or out of the innermost switch statement. */; continue; /* Unconditionally jumps to the beginning of an Iteration Statement (loop). */; goto LBL; /* Jumps to label LBL. */; LBL: statement /* any statement in the same function. */"
  },
  {
    "sub_topic_id": 96,
    "sub_topic": "Linked lists",
    "title": "Remarks",
    "description": "The C language does not define a linked list data structure. If you are using C and need a linked list, you either need to use a linked list from an existing library (such as GLib) or write your own linked list interface. This topic shows examples for linked lists and double linked lists that can be used as a starting point for writing your own linked lists. Singly linked list: The list contains nodes which are composed of one link called next. Data structure: struct singly_node { struct singly_node * next; }; Doubly linked list: The list contains nodes which are composed of two links called previous and next. The links are normally referencing to a node with the same structure."
  },
  {
    "sub_topic_id": 97,
    "sub_topic": "Literals for numbers, characters and strings",
    "title": "Remarks",
    "description": "The term literal is commonly used to describe a sequence of characters in a C code that designates a constant value such as a number (e.g. 0) or a string (e.g.\"C\"). Strictly speaking, the standard uses the term constant for integer constants, floating constants, enumeration constants and character constants, reserving the term 'literal' for string literals, but this is not common usage. Literals can have prefixes or suffixes (but not both) which are extra characters that can start or end a literal to change its default type or its representation."
  },
  {
    "sub_topic_id": 98,
    "sub_topic": "Memory management",
    "title": "Remarks",
    "description": "For managing dynamically allocated memory, the standard C library provides the functions malloc(), calloc(), realloc() and free(). In C99 and later, there is also aligned_alloc(). Some systems also provide alloca(). Syntax: void *aligned_alloc(size_t alignment, size_t size); /* Only since C11 */; void *calloc(size_t nelements, size_t size); void free(void *ptr); void *malloc(size_t size); void *realloc(void *ptr, size_t size); void *alloca(size_t size); /* from alloca.h, not standard, not portable, dangerous. */"
  },
  {
    "sub_topic_id": 99,
    "sub_topic": "Multi-Character Character Sequence",
    "title": "Remarks",
    "description": "Not all preprocessors support trigraph sequence processing. Some compilers give an extra option or switch for processing them. Others use a separate program to convert trigraphs. The GCC compiler does not recognize them unless you explicitly request it to do so (use -trigraphs to enable them; use -Wtrigraphs, part of -Wall, to get warnings about trigraphs). As most platforms in use today support the full range of single characters used in C, digraphs are preferred over trigraphs but the use of any multi-character character sequences is generally discouraged. Also, beware of accidental trigraph use (puts('What happened??!!');, for example)."
  },
  {
    "sub_topic_id": 100,
    "sub_topic": "Multithreading",
    "title": "Remarks",
    "description": "In C11 there is a standard thread library, <threads.h>, but no known compiler that yet implements it. Thus, to use multithreading in C you must use platform specific implementations such as the POSIX threads library (often referred to as pthreads) using the pthread.h header. Using threads can introduce extra undefined behavior such as a http://www.riptutorial.com/c/example/2622/data-race. For race-free access to variables that are shared between different threads C11 provides the mtx_lock() mutex functionality or the (optional) http://www.riptutorial.com/c/topic/4924/atomics data-types and associated functions in stdatomic.h."
  },
  {
    "sub_topic_id": 101,
    "sub_topic": "Operators",
    "title": "Remarks",
    "description": "An operator in a programming language is a symbol that tells the compiler or interpreter to perform a specific mathematical, relational or logical operation and produce a final result. C has many powerful operators. Many C operators are binary operators, which means they have two operands. For example, in a / b, / is a binary operator that accepts two operands (a, b). There are some unary operators which take one operand (for example: ~, ++), and only one ternary operator ? :. Operators have an arity, a precedence and an associativity. Arity indicates the number of operands. In C, three different operator arities exist: Unary (1 operand); Binary (2 operands); Ternary (3 operands); Precedence indicates which operators 'bind' first to their operands. That is, which operator has priority to operate on its operands. For instance, the C language obeys the convention that multiplication and division have precedence over addition and subtraction: a * b + c; Gives the same result as (a * b) + c. If this is not what was wanted, precedence can be forced using parentheses, because they have the highest precedence of all operators. a * (b + c) this new expression will produce a result that differs from the previous two expressions. The C language has many precedence levels; A table is given below of all operators, in descending order of precedence."
  },
  {
    "sub_topic_id": 102,
    "sub_topic": "Pass 2D-arrays to functions",
    "title": "Remarks",
    "description": "The reasons for this are twofold: the main problem is that arrays are not pointers and the second inconvenience is the so called pointer decay. Passing an array to a function will decay the array to a pointer to the first element of the array--in the case of a 2d array it decays to a pointer to the first row because in C arrays are sorted row-first. The number of columns is predefined and hence fixed at compile time, but the predecessor to the current C-standard (that was ISO/IEC 9899:1999, current is ISO/IEC 9899:2011) implemented VLAs (TODO: link it) and although the current standard made it optional, almost all modern C-compilers support it (TODO: check if MS Visual Studio supports it now)."
  },
  {
    "sub_topic_id": 103,
    "sub_topic": "Pointers",
    "title": "Remarks",
    "description": "A pointer is a type of variable which can store the address of another object or a function. Syntax: <Data type> *<Variable name>; int *ptrToInt; void *ptrToVoid; /* C89+ */; struct someStruct *ptrToStruct; int **ptrToPtrToInt; int arr[length]; int *ptrToFirstElem = arr; /* For <C99 'length' needs to be a compile time constant, for >=C11 it might need to be one. */; int *arrayOfPtrsToInt[length]; /* For <C99 'length' needs to be a compile time constant, for >=C11 it might need to be one. */."
  },
  {
    "sub_topic_id": 104,
    "sub_topic": "Preprocessor and Macros",
    "title": "Remarks",
    "description": "All preprocessor commands begins with the hash (pound) symbol #. A C macro is just a preprocessor command that is defined using the #define preprocessor directive. During the preprocessing stage, the C preprocessor (a part of the C compiler) simply substitutes the body of the macro wherever its name appears. When a compiler encounters a macro in the code, it performs simple string replacement, no additional operations are performed. Because of this, changes by the preprocessor do not respect scope of C programs - for example, a macro definition is not limited to being within a block, so is unaffected by a '}' that ends a block statement. The preprocessor is, by design, not turing complete - there are several types of computation that cannot be done by the preprocessor alone. Usually compilers have a command line flag (or configuration setting) that allows us to stop compilation after the preprocessing phase and to inspect the result. On POSIX platforms this flag is -E. So, running gcc with this flag prints the expanded source to stdout: $ gcc -E cprog.c. Often the preprocessor is implemented as a separate program, which is invoked by the compiler, common name for that program is cpp. A number of preprocessors emit supporting information, such as information about line numbers - which is used by subsequent phases of compilation to generate debugging information. In the case the preprocessor is based on gcc, the -P option suppresses such information. $ cpp -P cprog.c."
  },
  {
    "sub_topic_id": 105,
    "sub_topic": "Random Number Generation",
    "title": "Remarks",
    "description": "Due to the flaws of rand(), many other default implementations have emerged over the years. Among those are: arc4random() (available on OS X and BSD); random() (available on Linux); drand48() (available on POSIX). The function rand() can be used to generate a pseudo-random integer value between 0 and RAND_MAX (0 and RAND_MAX included). srand(int) is used to seed the pseudo-random number generator. Each time rand() is seeded wih the same seed, it must produce the same sequence of values. It should only be seeded once before calling rand(). It should not be repeatedly seeded, or reseeded every time you wish to generate a new batch of pseudo-random numbers. Standard practice is to use the result of time(NULL) as a seed. If your random number generator requires to have a deterministic sequence, you can seed the generator with the same value on each program start. This is generally not required for release code, but is useful in debug runs to make bugs reproducible. It is advised to always seed the generator, if not seeded, it behaves as if it was seeded with srand(1)."
  },
  {
    "sub_topic_id": 106,
    "sub_topic": "Selection Statements",
    "title": "Remarks",
    "description": "One of the simplest ways to control program flow is by using if selection statements. Whether a block of code is to be executed or not to be executed can be decided by this statement. The condition for if can include multiple expressions. if will only perform the action if the end result of expression is true. While if performs an action only when its condition evaluate to true, if / else allows you to specify the different actions when the condition true and when the condition is false. Just like the if statement, when the block within if or else is consisting of only one statement, then the braces can be omitted (but doing so is not recommended as it can easily introduce problems involuntarily). However if there's more than one statement within the if or else block, then the braces have to be used on that particular block. Nested if()...else statements take more execution time (they are slower) in comparison to an if()...else ladder because the nested if()...else statements check all the inner conditional statements once the outer conditional if() statement is satisfied, whereas the if()..else ladder will stop condition testing once any of the if() or the else if() conditional statements are true. switch statements are useful when you want to have your program do many different things according to the value of a particular test variable."
  },
  {
    "sub_topic_id": 107,
    "sub_topic": "Sequence points",
    "title": "Remarks",
    "description": "International Standard ISO/IEC 9899:201x Programming languages — C. Accessing a volatile object, modifying an object, modifying a file, or calling a function that does any of those operations are all side effects, which are changes in the state of the execution environment. The presence of a sequence point between the evaluation of expressions A and B implies that every value computation and side effect associated with A is sequenced before every value computation and side effect associated with B. Here is the complete list of sequence points from Annex C of the online 2011 pre-publication draft of the C language standard: Sequence points 1 The following are the sequence points described in 5.1.2.3: Between the evaluations of the function designator and actual arguments in a function call and the actual call. (6.5.2.2). Between the evaluations of the first and second operands of the following operators: logical AND && (6.5.13); logical OR || (6.5.14); comma , (6.5.17). Between the evaluations of the first operand of the conditional ? : operator and whichever of the second and third operands is evaluated (6.5.15). The end of a full declarator: declarators (6.7.6); Between the evaluation of a full expression and the next full expression to be evaluated. The following are full expressions: an initializer that is not part of a compound literal (6.7.9); the expression in an expression statement (6.8.3); the controlling expression of a selection statement (if or switch) (6.8.4); the controlling expression of a while or do statement (6.8.5); each of the (optional) expressions of a for statement (6.8.5.3); the (optional) expression in a return statement (6.8.6.4). Immediately before a library function returns (7.1.4). After the actions associated with each formatted input/output function conversion specifier (7.21.6, 7.29.2). Immediately before and immediately after each call to a comparison function, and also between any call to a comparison function and any movement of the objects passed as arguments to that call (7.22.5)."
  },
  {
    "sub_topic_id": 108,
    "sub_topic": "Side Effects",
    "title": "Remarks",
    "description": "In C, there are two unary operators - '++' and '--' that are very common source of confusion. The operator ++ is called the increment operator and the operator -- is called the decrement operator. Both of them can be used used in either prefix form or postfix form. The syntax for prefix form for ++ operator is ++operand and the syntax for postfix form is operand++. When used in the prefix form, the operand is incremented first by 1 and the resultant value of the operand is used in the evaluation of the expression."
  },
  {
    "sub_topic_id": 109,
    "sub_topic": "Signal handling",
    "title": "Remarks",
    "description": "The usage of signal handlers with only the guarantees from the C standard imposes various limitations what can, or can't be done in the user defined signal handler. If the user defined function returns while handling SIGSEGV, SIGFPE, SIGILL or any other implementation-defined hardware interrupt, the behavior is undefined by the C standard. This is because C's interface doesn't give means to change the faulty state (e.g after a division by 0) and thus when returning the program is in exactly the same erroneous state than before the hardware interrupt occurred. If the user defined function was called as the result of a call to abort, or raise, the signal handler is not allowed to call raise, again. Signals can arrive in the middle of any operation, and therefore the indivisibility of operations can in generally not be guaranteed nor does signal handling work well with optimization. Therefore all modifications to data in a signal handler must be to variables of type sig_atomic_t (all versions) or a lock-free atomic type (since C11, optional) that are volatile qualified. Other functions from the C standard library will usually not respect these restrictions, because they may change variables in the global state of the program. The C standard only makes guarantees for abort, _Exit (since C99), quick_exit (since C11), signal (for the same signal number), and some atomic operations (since C11). Behavior is undefined by the C standard if any of the rules above are violated. Platforms may have specific extensions, but these are generally not portable beyond that platform. Usually systems have their own list of functions that are asynchronous signal safe, that is of C library functions that can be used from a signal handler. E.g often printf is among these function. In particular the C standard doesn't define much about the interaction with its threads interface (since C11) or any platform specific thread libraries such as POSIX threads. Such platforms have to specify the interaction of such thread libraries with signals by themselves."
  },
  {
    "sub_topic_id": 110,
    "sub_topic": "Standard Math",
    "title": "Remarks",
    "description": "To link with math library use -lm with gcc flags. A portable program that needs to check for an error from a mathematical function should set errno to zero, and make the following call feclearexcept(FE_ALL_EXCEPT); before calling a mathematical function. Upon return from the mathematical function, if errno is nonzero, or the following call returns nonzero fetestexcept(FE_INVALID | FE_DIVBYZERO | FE_OVERFLOW | FE_UNDERFLOW); then an error occurred in the mathematical function. Read manpage of math_error for more information. #include <math.h>; double pow(double x, double y); float powf(float x, float y); long double powl(long double x, long double y);"
  },
  {
    "sub_topic_id": 111,
    "sub_topic": "Storage Classes",
    "title": "Remarks",
    "description": "A storage class is used to set the scope of a variable or function. By knowing the storage class of a variable, we can determine the life-time of that variable during the run-time of the program. Storage class specifiers are the keywords which can appear next to the top-level type of a declaration. The use of these keywords affects the storage duration and linkage of the declared object, depending on whether it is declared at file scope or at block scope. Every object has an associated storage duration (regardless of scope) and linkage (relevant to declarations at file scope only), even when these keywords are omitted. The ordering of storage class specifiers with respect to top-level type specifiers (int, unsigned, short, etc.) and top-level type qualifiers (const, volatile) is not enforced, so both of these declarations are valid. Variables with static storage duration live throughout the whole execution of the program and can be declared both at file scope (with or without static) and at block scope (by putting static explicitly). They are usually allocated and initialized by the operating system at program startup and reclaimed when the process terminates. In practice, executable formats have dedicated sections for such variables (data, bss and rodata) and these whole sections from the file are mapped into memory at certain ranges. Variables with automatic storage duration can only be declared at block scope (directly within a function or within a block in that function). They are usable only in the period between entering and leaving the function or block. Once the variable goes out of scope (either by returning from the function or by leaving the block), its storage is automatically deallocated. Any further references to the same variable from pointers are invalid and lead to undefined behaviour. In typical implementations, automatic variables are located at certain offsets in the stack frame of a function or in registers."
  },
  {
    "sub_topic_id": 112,
    "sub_topic": "Strings",
    "title": "Remarks",
    "description": "In C, a string is not an intrinsic type. A C-string is the convention to have a one-dimensional array of characters which is terminated by a null-character, by a '\\0'. This means that a C-string with a content of \"abc\" will have four characters 'a', 'b', 'c' and '\\0'. Syntax: char str1[] = 'Hello, world!'; /* Modifiable */; char str2[14] = 'Hello, world!'; /* Modifiable */; char* str3 = 'Hello, world!'; /* Non-modifiable*/"
  },
  {
    "sub_topic_id": 113,
    "sub_topic": "Structs",
    "title": "Remarks",
    "description": "DESC"
  },
  {
    "sub_topic_id": 114,
    "sub_topic": "Structure Padding and Packing",
    "title": "Remarks",
    "description": "Structures provide a way to group a set of related variables of diverse types into a single unit of memory. The structure as a whole can be referenced by a single name or pointer; the structure members can be accessed individually too. Structures can be passed to functions and returned from functions. They are defined using the keyword struct."
  },
  {
    "sub_topic_id": 115,
    "sub_topic": "Testing frameworks",
    "title": "Remarks",
    "description": "Many developers use unit tests to check that their software works as expected. Unit tests check small units of larger pieces of software, and ensure that the outputs match expectations. Testing frameworks make unit testing easier by providing set-up/tear-down services and coordinating the tests. There are many unit testing frameworks available for C. For example, Unity is a pure C framework. People quite often use C++ testing frameworks to test C code; there are many C++ test frameworks too."
  },
  {
    "sub_topic_id": 116,
    "sub_topic": "Threads (native)",
    "title": "Remarks",
    "description": "C11 threads are an optional feature. Their absence can be tested with __STDC__NO_THREAD__. Currently (Jul 2016) this feature is not yet implemented by all C libraries that otherwise support C11. Syntax: #ifndef __STDC_NO_THREADS__; # include <threads.h>; #endif; void call_once(once_flag *flag, void (*func)(void)); int cnd_broadcast(cnd_t *cond); void cnd_destroy(cnd_t *cond); int cnd_init(cnd_t *cond); int cnd_signal(cnd_t *cond); int cnd_timedwait(cnd_t *restrict cond, mtx_t *restrict mtx, const struct timespec *restrict ts); int cnd_wait(cnd_t *cond, mtx_t *mtx); void mtx_destroy(mtx_t *mtx); int mtx_init(mtx_t *mtx, int type); int mtx_lock(mtx_t *mtx); int mtx_timedlock(mtx_t *restrict mtx, const struct timespec *restrict ts); int mtx_trylock(mtx_t *mtx); int mtx_unlock(mtx_t *mtx); int thrd_create(thrd_t *thr, thrd_start_t func, void *arg); thrd_t thrd_current(void); int thrd_detach(thrd_t thr); int thrd_equal(thrd_t thr0, thrd_t thr1); _Noreturn void thrd_exit(int res); int thrd_join(thrd_t thr, int *res); int thrd_sleep(const struct  timespec *duration, struct timespec* remaining); void thrd_yield(void); int tss_create(tss_t *key, tss_dtor_t dtor); void tss_delete(tss_t key); void *tss_get(tss_t key); int tss_set(tss_t key, void *val);"
  },
  {
    "sub_topic_id": 117,
    "sub_topic": "Type Qualifiers",
    "title": "Remarks",
    "description": "Type qualifiers are the keywords which describe additional semantics about a type. They are an integral part of type signatures. They can appear both at the topmost level of a declaration (directly affecting the identifier) or at sub-levels (relevant to pointers only, affecting the pointed-to values): Keyword Remarks const Prevents the mutation of the declared object (by appearing at the topmost level) or prevents the mutation of the pointed-to value (by appearing next to a pointer subtype). volatile Informs the compiler that the declared object (at topmost level) or the pointed-to value (in pointer subtypes) may change its value as a result of external conditions, not only as a result of program control flow. restrict An optimization hint, relevant to pointers only. Declares intent that for the lifetime of the pointer, no other pointers will be used to access the same pointed-to object. The ordering of type qualifiers with respect to storage class specifiers (static, extern, auto, register), type modifiers (signed, unsigned, short, long) and type specifiers (int, char, double, etc.) is not enforced, but the good practice is to put them in the aforementioned order"
  },
  {
    "sub_topic_id": 118,
    "sub_topic": "Typedef",
    "title": "Remarks",
    "description": "The typedef mechanism allows the creation of aliases for other types. It does not create new types. People often use typedef to improve the portability of code, to give aliases to structure or union types, or to create aliases for function (or function pointer) types. In the C standard, typedef is classified as a 'storage class' for convenience; it occurs syntactically where storage classes such as static or extern could appear. #define is a C pre-processor directive which is also used to define the aliases for various data types similar to typedef but with the following differences: typedef is limited to giving symbolic names to types only where as #define can be used to define alias for values as well. typedef interpretation is performed by the compiler whereas #define statements are processed by the pre-processor. Note that #define cptr char * followed by cptr a, b; does not do the same as typedef char *cptr; followed by cptr a, b;. With the #define, b is a plain char variable, but it is also a pointer with the typedef."
  },
  {
    "sub_topic_id": 119,
    "sub_topic": "Undefined behavior",
    "title": "Remarks",
    "description": "What is Undefined Behavior (UB)? Undefined behavior is a term used in the C standard. The C11 standard (ISO/IEC 9899:2011) defines the term undefined behavior as behavior, upon use of a nonportable or erroneous program construct or of erroneous data, for which this International Standard imposes no requirements What happens if there is UB in my code? These are the results which can happen due to undefined behavior according to standard: NOTE Possible undefined behavior ranges from ignoring the situation completely with unpredictable results, to behaving during translation or program execution in a documented manner characteristic of the environment (with or without the issuance of a diagnostic message), to terminating a translation or execution (with the issuance of a diagnostic message). The following quote is often used to describe (less formally though) results happening from undefined behavior: “When the compiler encounters [a given undefined construct] it is legal for it to make demons fly out of your nose” (the implication is that the compiler may choose any arbitrarily bizarre way to interpret the code without violating the ANSI C standard) Why does UB exist? If it's so bad, why didn't they just define it or make it implementation-defined? Undefined behavior allows more opportunities for optimization; The compiler can justifiably assume that any code does not contain undefined behaviour, which can allow it to avoid run-time checks and perform optimizations whose validity would be costly or impossible to prove otherwise. Why is UB hard to track down? There are at least two reasons why undefined behavior creates bugs that are difficult to detect: The compiler is not required to - and generally can't reliably - warn you about undefined behavior. In fact requiring it to do so would go directly against the reason for the existence of undefined behaviour. The unpredictable results might not start unfolding at the exact point of the operation where the construct whose behavior is undefined occurs; Undefined behaviour taints the whole execution and its effects may happen at any time: During, after, or even before the undefined construct. Consider null-pointer dereference: the compiler is not required to diagnose null-pointer dereference, and even could not, as at run-time any pointer passed into a function, or in a global variable might be null. And when the null-pointer dereference occurs, the standard does not mandate that the program needs to crash. Rather, the program might crash earlier, later, or not crash at all; it could even behave as if the null pointer pointed to a valid object, and behave completely normally, only to crash under other circumstances. In the case of null-pointer dereference, C language differs from managed languages such as Java or C#, where the behavior of null-pointer dereference is defined: an exception is thrown, at the exact time (NullPointerException in Java, NullReferenceException in C#), thus those coming from Java or C# might incorrectly believe that in such a case, a C program must crash, with or without the issuance of a diagnostic message. Additional information: There are several such situations that should be clearly distinguished: Explicitly undefined behavior, that is where the C standard explicitly tells you that you are off limits. Implicitly undefined behavior, where there is simply no text in the standard that foresees a behavior for the situation you brought your program in. Also have in mind that in many places the behavior of certain constructs is deliberately undefined by the C standard to leave room for compiler and library implementors to come up with their own definitions. A good example are signals and signal handlers, where extensions to C, such as the POSIX operating system standard, define much more elaborated rules. In such cases you just have to check the documentation of your platform; the C standard can't tell you anything. Also note that if undefined behavior occurs in program it doesn't mean that just the point where undefined behavior occurred is problematic, rather entire program becomes meaningless. Because of such concerns it is important (especially since compilers don't always warn us about UB) for person programming in C to be at least familiar with the kind of things that trigger undefined behavior. It should be noted there are some tools (e.g. static analysis tools such as PC-Lint) which aid in detecting undefined behavior, but again, they can't detect all occurrences of undefined behavior."
  },
  {
    "sub_topic_id": 120,
    "sub_topic": "Unions",
    "title": "Remarks",
    "description": "Some C implementations permit code to write to one member of a union type then read from another in order to perform a sort of reinterpreting cast (parsing the new type as the bit representation of the old one). It is important to note however, this is not permitted by the C standard current or past and will result in undefined behavior, none the less is is a very common extension offered by compilers (so check your compiler docs if you plan to do this). One real life example of this technique is the 'Fast Inverse Square Root' algorithm which relies on implementation details of IEEE 754 floating point numbers to perform an inverse square root more quickly than using floating point operations, this algorithm can be performed either through pointer casting (which is very dangerous and breaks the strict aliasing rule) or through a union (which is still undefined behavior but works in many compilers)."
  },
  {
    "sub_topic_id": 121,
    "sub_topic": "Valgrind",
    "title": "Remarks",
    "description": "Valgrind is a debugging tool that can be used to diagnose errors regarding memory management in C programs. Valgrind can be used to detect errors like invalid pointer usage, including writing or reading past the allocated space, or making an invalid call to free(). It can also be used for improving applications through functions that conduct memory profiling. For more info see http://valgrind.org."
  },
  {
    "sub_topic_id": 122,
    "sub_topic": "Variable arguments",
    "title": "Remarks",
    "description": "Variable arguments are used by functions in the printf family (printf, fprintf, etc) and others to allow a function to be called with a different number of arguments each time, hence the name varargs. To implement functions using the variable arguments feature, use #include <stdarg.h>. To call functions which take a variable number of arguments, ensure there is a full prototype with the trailing ellipsis in scope: void err_exit(const char *format, ...); for example. Syntax: void va_start(va_list ap, last); /* Start variadic argument processing; last is the last function parameter before the ellipsis (“...”) */; type va_arg(va_list ap, type); /* Get next variadic argument in list; be sure to pass the correct promoted type */; void va_end(va_list ap); /* End argument processing */; void va_copy(va_list dst, va_list src); /* C99 or later: copy argument list, i.e. current position in argument processing, into another list (e.g. to pass over arguments multiple times) */"
  },
  {
    "sub_topic_id": 123,
    "sub_topic": "X-macros",
    "title": "Remarks",
    "description": "X-macros are a preprocessor-based technique for minimizing repetitious code and maintaining data / code correspondences. Multiple distinct macro expansions based on a common set of data are supported by representing the whole group of expansions via a single master macro, with that macro's replacement text consisting of a sequence of expansions of an inner macro, one for each datum. The inner macro is traditionally named X(), hence the name of the technique. The user of an X-macro-style master macro is expected to provide his own definition for the inner X() macro, and within its scope to expand the master macro. The master's inner macro references are thus expanded according to the user's definition of X(). In this way, the amount of repetitive boilerplate code in the source file can be reduced (appearing only once, in the replacement text of X()), as is favored by adherents to the 'Do not Repeat Yourself' (DRY) philosophy. Additionally, by redefining X() and expanding the master macro one or more additional times, X macros can facilitate maintaining corresponding data and code -- one expansion of the macro declares the data (as array elements or enum members, for example), and the other expansions produce corresponding code. Although the 'X-macro' name comes from the traditional name of the inner macro, the technique does not depend on that particular name. Any valid macro name can be used in its place. Criticisms include source files that rely on X macros are more difficult to read; like all macros, X macros are strictly textual -- they do not inherently provide any type safety; and X macros provide for code generation. As compared to alternatives based on calling functions, X macros effectively make the code larger. A good explanation of X macros can be found in Randy Meyers' article [X-Macros] in Dr. Dobbs (http://www.drdobbs.com/the-new-c-x-macros/184401387)."
  },
  {
    "sub_topic_id": 124,
    "sub_topic": "Getting started with C# Language",
    "title": "Remarks",
    "description": "C# is a multi-paradigm, C-descendant programming language from Microsoft. C# is a managed language that compiles to CIL, intermediate bytecode which can be executed on Windows, Mac OS X and Linux. Versions 1.0, 2.0 and 5.0 were standardized by ECMA (as ECMA-334), and standardization efforts for modern C# are underway."
  },
  {
    "sub_topic_id": 125,
    "sub_topic": ".NET Compiler Platform (Roslyn)",
    "title": "Remarks",
    "description": "First obtain the Microsoft.CodeAnalysis.CSharp.Workspaces nuget before continuing. A Semantic Model offers a deeper level of interpretation and insight of code compare to a syntax tree. Where syntax trees can tell the names of variables, semantic models also give the type and all references. Syntax trees notice method calls, but semantic models give references to the precise location the method is declared (after overload resolution has been applied.) A Syntax Tree is an immutable data structure representing the program as a tree of names, commands and marks (as previously configured in the editor.) For example, assume a Microsoft.CodeAnalysis.Compilation instance named compilation has been configured. There are multiple ways to list the names of every variable declared in the loaded code. To do so naively, take all pieces of syntax in every document (the DescendantNodes method) and use Linq to select nodes that describe variable declaration."
  },
  {
    "sub_topic_id": 126,
    "sub_topic": "Access Modifiers",
    "title": "Remarks",
    "description": "If the access modifier is omitted, classes are by default internal methods are by deault private getters and setters inherit the modifier of the property, by default this is private. Access modifiers on setters or getters of properties can only restrict access, not widen it: public string someProperty {get; private set;}"
  },
  {
    "sub_topic_id": 127,
    "sub_topic": "Access network shared folder with username and password",
    "title": "Remarks",
    "description": "Accessing network share file using PInvoke."
  },
  {
    "sub_topic_id": 128,
    "sub_topic": "Accessing Databases",
    "title": "Remarks",
    "description": "A Connection String is a string that specifies information about a particular data source and how to go about connecting to it by storing credentials, locations, and other information. Typically, a connection string will be stored within a configuration file (such as an app.config or web.config within ASP.NET applications). Each data provider (SQL Server, MySQL, Azure, etc.) all feature their own flavor of syntax for their connection strings and expose different available properties. ConnectionStrings.com is an incredibly useful resource if you are unsure about what yours should look like."
  },
  {
    "sub_topic_id": 129,
    "sub_topic": "Action Filters",
    "title": "Remarks",
    "description": "We write custom action filters for various reasons. We may have a custom action filter for logging, or for saving data to database before any action execution. We could also have one for fetching data from the database and setting it as the global values of the application. To create a custom action filter, we need to perform the following tasks: Create a class Inherit it from ActionFilterAttribute class Override at least one of the following methods: OnActionExecuting – This method is called before a controller action is executed. OnActionExecuted – This method is called after a controller action is executed. OnResultExecuting – This method is called before a controller action result is executed. OnResultExecuted – This method is called after a controller action result is executed."
  },
  {
    "sub_topic_id": 130,
    "sub_topic": "Aliases of built-in types",
    "title": "Remarks",
    "description": "The C# type keywords and their aliases are interchangeable. Keyword types : bool System.Boolean; byte System.Byte; sbyte System.SByte; char System.Char; decimal System.Decimal; double System.Double; float System.Single; int System.Int32; uint System.UInt32; long System.Int64; ulong System.UInt64; object System.Object; short System.Int16; ushort System.UInt16; string System.String"
  },
  {
    "sub_topic_id": 131,
    "sub_topic": "An overview of c# collections",
    "title": "Remarks",
    "description": " Collections types are: Dictionary; HashSet; LinkedList; List; Queue; SortedSet; Stack. Dictionary<TKey, TValue> is a map. For a given key there can be one value in the dictionary. T[ ] (Array of T)List<T> is a list of a given type. Items can be added, inserted, removed and addressed by index. List<T> can be thought of as an array that you can resize. Enumerating over the collection in order is quick, as is access to individual elements via their index. To access elements based on some aspect of their value, or some other key, a Dictionary<T> will provide faster lookup."
  },
  {
    "sub_topic_id": 132,
    "sub_topic": "Anonymous types",
    "title": "Remarks",
    "description": "Anonymous type equality is given by the Equals instance method. Two objects are equal if they have the same type and equal values (through a.Prop.Equals(b.Prop)) for every property. Two anonymous types are considered the same if and only if their properties have the same name and type and appear in the same order. Anonymous types allow the creation of objects without having to explicitly define their types ahead of time, while maintaining static type checking. Conversely, dynamic has dynamic type checking, opting for runtime errors, instead of compile-time errors."
  },
  {
    "sub_topic_id": 133,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "In C#, an array is a reference type, which means it is nullable. An array has a fixed length, which means you cant .Add() to it or .Remove() from it. In order to use these, you would need a dynamic array - List or ArrayList. Declaring an array: <type>[] <name>; Declaring two-dimensional array: <type>[,] <name> = new <type>[<value>, <value>]; Declaring a Jagged Array: <type>[] <name> = new <type>[<value>]; Declaring a subarray for a Jagged Array: <name>[<value>] = new <type>[<value>]; Initializing an array without values: <name> = new <type>[<length>]; Initializing an array with values: <name> = new <type>[] {<value>, <value>, <value>, ...}; Initializing a two-dimensional array with values: <name> = new <type>[,] { {<value>, <value>}, {<value>, <value>}, ...}; Accessing an element at index i: <name>[i] Getting the array's length: <name>.Length."
  },
  {
    "sub_topic_id": 134,
    "sub_topic": "ASP.NET Identity",
    "title": "Remarks",
    "description": "Tutorials concerning asp.net Identity such as user management, role management, creating tokens and more. How to implement password reset token in asp.net identity using user manager: Create a new folder called MyClasses and create and add the following class; Configure your Identity Class; Add your credentials to the web.config. I did not use gmail in this portion because the use of gmail is blocked in my workplace and it still works perfectly; Make necessary changes to your Account Controller. Add the following highlighted code; Compile then run. Cheers!"
  },
  {
    "sub_topic_id": 135,
    "sub_topic": "AssemblyInfo.cs Examples",
    "title": "Remarks",
    "description": "The filename AssemblyInfo.cs is used by convention as the source file where developers place metadata attributes that describe the entire assembly they are building. AssemblyConfiguration: The AssemblyConfiguration attribute must have the configuration that was used to build the assembly. Use conditional compilation to properly include different assembly configurations. Use the block similar to the example below. Add as many different configurations as you commonly use."
  },
  {
    "sub_topic_id": 136,
    "sub_topic": "Async/await, Backgroundworker, Task and Thread Examples",
    "title": "Remarks",
    "description": "To run any of these examples just call them like that: static void Main(){new Program().ProcessDataAsync(); Console.ReadLine(); When ASP.NET handles a request, a thread is assigned from the thread pool and a request context is created. The request context contains information about the current request which can be accessed through the static HttpContext.Current property. The request context for the request is then assigned to the thread handling the request. A given request context may only be active on one thread at a time. When execution reaches await, the thread handling a request is returned to the thread pool while the asynchronous method runs and the request context is free for another thread to use.}"
  },
  {
    "sub_topic_id": 137,
    "sub_topic": "Async-Await",
    "title": "Remarks",
    "description": "In C#, a method declared async won't block within a synchronous process, in case of you're using I/O based operations (e.g. web access, working with files, ...). The result of such async marked methods may be awaited via the use of the awaitkeyword. An async method can return void, Task or Task<T>. The return type Task will wait for the method to finish and the result will be void. Task<T> will return a value from type T after the method completes. async methods should return Task or Task<T>, as opposed to void, in almost all circumstances. async void methods cannot be awaited, which leads to a variety of problems. The only scenario where an async should return void is in the case of an event handler. async/await works by transforming your async method into a state machine. It does this by creating a structure behind the scenes which stores the current state and any context (like local variables), and exposes a MoveNext() method to advance states (and run any associated code) whenever an awaited awaitable completes."
  },
  {
    "sub_topic_id": 138,
    "sub_topic": "Asynchronous Socket",
    "title": "Remarks",
    "description": "By using asynchronous sockets a server can listening for incoming connections and do some other logic in the mean time in contrast to synchronous socket when they are listening they block the main thread and the application is becoming unresponsive an will freeze until a client connects. Socket and network How to access a Server outside my own network? This is a common question and when it is asked is mostly flagged as of topic.Server Side: On the network of your server you need to port forward your router to your server. For Example PC where server is running on: local IP = 192.168.1.115 Server is listening to port 1234. Forward incoming connections on Port 1234 router to 192.168.1.115 Client Side: The only thing you need to change is the IP. You don't want to connect to your loopback address but to the public IP from the network your server is running on. This IP you can get here.  _connectingSocket.Connect(new IPEndPoint(IPAddress.Parse(\"10.10.10.10\"), 1234)); So now you create a request on this endpoint : 10.10.10.10:1234 if you did property port forward your router your server and client will connect without any problem. If you want to connect to a local IP you won't have to portforwart just change the loopback address to 192.168.1.178 or something like that. Sending data: Data is send in byte array. You need to pack you data into an byte array and unpack it on the other side. If you are familiar with socket you also can try to encrypt your byte array before sending. This will prevent anyone from stealing your package."
  },
  {
    "sub_topic_id": 139,
    "sub_topic": "Attributes",
    "title": "Remarks",
    "description": "Caller info attributes can be used to pass down information about the invoker to the invoked method. Adding the DebuggerDisplay Attribute will change the way the debugger displays the class when it is hovered over. Expressions that are wrapped in {} will be evaluated by the debugger. This can be a simple property like in the following sample or more complex logic. System.Obsolete is an attribute that is used to mark a type or a member that has a better version, and thus should not be used. Method GetCustomAttributes returns an array of custom attributes applied to the member. After retrieving this array you can search for one or more specific attributes. There is no simple way to obtain attributes from an interface, since classes does not inherit attributes from an interface. Whenever implementing an interface or overriding members in a derived class, you need to re-declare the attributes. So in the example below output would be True in all three cases."
  },
  {
    "sub_topic_id": 140,
    "sub_topic": "BackgroundWorker",
    "title": "Remarks",
    "description": "Performing long-running operations within the UI thread can cause your application to become unresponsive, appearing to the user that it has stopped working. It is preferred that these tasks be run on a background thread. Once complete, the UI can be updated. Making changes to the UI during the BackgroundWorker's operation requires invoking the changes to the UI thread, typically by using the Control.Invoke method on the control you are updating. Neglecting to do so will cause your program to throw an exception. The BackgroundWorker is typically only used in Windows Forms applications. In WPF applications, Tasks are used to offload work onto background threads (possibly in combination with async/await). Marshalling updates onto the UI thread is typically done automatically, when the property being updated implements INotifyPropertyChanged, or manually by using the UI thread's Dispatcher."
  },
  {
    "sub_topic_id": 141,
    "sub_topic": "BigInteger",
    "title": "Remarks",
    "description": "BigInteger objects are by their very nature very heavy on RAM. Consequently, they should only be used when absolutely necessary, ie for numbers on a truly astronomical scale. Further to this, all arithmetic operations on these objects are an order of magnitude slower than their primitive counterparts, this problem gets further compounded as the number grows as they are not of a fixed size. It is therefore feasibly possible for a rogue BigInteger to cause a crash by consuming all of the available RAM. If speed is imperative to your solution it may be more efficient to implement this functionality yourself using a class wrapping a Byte[] and overloading the necessary operators yourself. However, this does require a significant amount of extra effort."
  },
  {
    "sub_topic_id": 142,
    "sub_topic": "Binary Serialization",
    "title": "Remarks",
    "description": "The binary serialization engine is part of the .NET framework, but the examples given here are specific to C#. As compared to other serialization engines built into the .NET framework, the binary serializer is fast and efficient and usually requires very little extra code to get it to work. However, it is also less tolerant to code changes; that is, if you serialize an object and then make a slight change to the object's definition, it likely will not deserialize correctly."
  },
  {
    "sub_topic_id": 143,
    "sub_topic": "BindingList",
    "title": "Remarks",
    "description": "Example: BindingList<string> listOfUIItems = new BindingList<string>(); listOfUIItems.Add('Alice'); listOfUIItems.Add('Bob'); This is placed in a Windows Forms event handler: var nameList = new BindingList<string>(); ComboBox1.DataSource = nameList; for(long i = 0; i < 10000; i++ ) {nameList.AddRange(new [] {'Alice', 'Bob', 'Carol' });} This takes a long time to execute, to fix, do the below: var nameList = new BindingList<string>(); ComboBox1.DataSource = nameList; nameList.RaiseListChangedEvents = false; for(long i = 0; i < 10000; i++ ) {nameList.AddRange(new [] {'Alice', 'Bob', 'Carol' });} nameList.RaiseListChangedEvents = true; nameList.ResetBindings();"
  },
  {
    "sub_topic_id": 144,
    "sub_topic": "Built-in Types",
    "title": "Remarks",
    "description": "If value types are assigned to variables of type object they are boxed - the value is stored in an instance of a System.Object. This can lead to unintended consequences when comparing values with ==. This can be avoided by using the overloaded Equals method, which will give the expected result. Alternatively, the same could be done by unboxing the left and right variables so that the int values are compared. Boxed value types can only be unboxed into their original Type, even if a conversion of the two Types is valid."
  },
  {
    "sub_topic_id": 145,
    "sub_topic": "C# 3.0 Features",
    "title": "Remarks",
    "description": "C# version 3.0 was released as part of .Net version 3.5. Many of the features added with this version were in support of LINQ (Language INtegrated Queries). List of added features: LINQ; Lambda expressions; Extension methods; Anonymous types; Implicitly typed variables; Object and Collection Initializers; Automatically implemented properties; Expression trees."
  },
  {
    "sub_topic_id": 146,
    "sub_topic": "C# 4.0 Features",
    "title": "Remarks",
    "description": "A new pseudo-type dynamic is introduced into the C# type system. It is treated as System.Object, but in addition, any member access (method call, field, property, or indexer access, or a delegate invocation) or application of an operator on a value of such type is permitted without any type checking, and its resolution is postponed until run-time. This is known as duck typing or late binding. In this case, dynamic type is used to avoid more verbose Reflection. It still uses Reflection under the hood, but it's usually faster thanks to caching. This feature is primarily targeted at interoperability with dynamic languages."
  },
  {
    "sub_topic_id": 147,
    "sub_topic": "C# 5.0 Features",
    "title": "Remarks",
    "description": "Async & Await public Task MyTaskAsync(){ doSomething(); } await MyTaskAsync(); public Task<string> MyStringTaskAsync(){ return getSomeString(); } string MyString = await MyStringTaskAsync(); Caller Information Attributes public void MyCallerAttributes(string MyMessage, [CallerMemberName] string MemberName = \"\", [CallerFilePath] string SourceFilePath = \"    \", [CallerLineNumber] int LineNumber = 0) Trace.WriteLine('My Message: ' + MyMessage); Trace.WriteLine('Member: ' + MemberName); Trace.WriteLine('Source File Path: ' + SourceFilePath); Trace.WriteLine('Line Number: ' + LineNumber);"
  },
  {
    "sub_topic_id": 148,
    "sub_topic": "C# 6.0 Features",
    "title": "Remarks",
    "description": "This sixth iteration of the C# language is provided by the Roslyn compiler. This compiler came out with version 4.6 of the .NET Framework, however it can generate code in a backward compatible manner to allow targeting earlier framework versions. C# version 6 code can be compiled in a fully backwards compatible manner to .NET 4.0. It can also be used for earlier frameworks, however some features that require additional framework support may not function correctly. The sixth version of C# was released July 2015 alongside Visual Studio 2015 and .NET 4.6. As well as adding some new language features it includes a complete rewrite of the compiler. Previously csc.exe was a native Win32 application written in C++, with C# 6 it is now a .NET managed application written in C#. This rewrite was known as project 'Roslyn' and the code is now open source and available on GitHub."
  },
  {
    "sub_topic_id": 149,
    "sub_topic": "C# 7.0 Features",
    "title": "Remarks",
    "description": "C# 7.0 is the seventh version of C#. This version contains some new features: language support for Tuples, local functions, out var declarations, digit separators, binary literals, pattern matching, throw expressions, ref return and ref local and extended expression bodied members list. Official reference: What's new in C# 7. "
  },
  {
    "sub_topic_id": 150,
    "sub_topic": "C# Authentication handler",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow. Download C# Language (PDF): https://riptutorial.com/ebook/csharp "
  },
  {
    "sub_topic_id": 151,
    "sub_topic": "C# Script",
    "title": "Remarks",
    "description": "You can evaluate any valid C# code: int value = await CSharpScript.EvaluateAsync<int>(\" 15 * 89 + 95 \"); var span = await CSharpScript.EvaluateAsync<TimeSpan>('new DateTime(2016,1,1) - DateTime.Now'); If type is not specified, the result is object: object value = await CSharpScript.EvaluateAsync(\"15 * 89 + 95\"); Download C# Language (PDF): https://riptutorial.com/ebook/csharp"
  },
  {
    "sub_topic_id": 152,
    "sub_topic": "Caching",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow. Download C# Language (PDF): https://riptutorial.com/ebook/csharp "
  },
  {
    "sub_topic_id": 153,
    "sub_topic": "Casting",
    "title": "Remarks",
    "description": "Casting is not the same as Converting. It is possible to convert the string value \"-1\" to an integer value (-1), but this must be done through library methods like Convert.ToInt32() or Int32.Parse(). It cannot be done using casting syntax directly. If you need to know whether a value's type extends or implements a given type, but you don't want to actually cast it as that type, you can use the is operator. In C#, types can define custom Conversion Operators, which allow values to be converted to and from other types using either explicit or implicit casts. A value will automatically be cast to the appropriate type if the compiler knows that it can always be converted to that type."
  },
  {
    "sub_topic_id": 154,
    "sub_topic": "Checked and Unchecked",
    "title": "Remarks",
    "description": "Syntax: checked(a + b) // checked expression; unchecked(a + b) // unchecked expression; checked { c = a + b; c += 5; } // checked block; unchecked { c = a + b; c += 5; } // unchecked block"
  },
  {
    "sub_topic_id": 155,
    "sub_topic": "CLSCompliantAttribute",
    "title": "Remarks",
    "description": "The Common Language Specification (CLS) is a set of base rules to which any language targeting the CLI(language which confirms the Common Language Infrastructure specifications) should confirm in order to interoperate with other CLS-compliant languages.List of CLI languages. You should mark your assembly as CLSCompliant in most cases when you are distributing libraries. This attribute will guarantee you that your code will be usable by all CLS-compliant languages. This means that your code can be consumed by any language that can be compiled and run on CLR(Common Language Runtime). When your assembly is marked with CLSCompliantAttribute, the compiler will check if your code violates any of CLS rules and return warning if it is needed."
  },
  {
    "sub_topic_id": 156,
    "sub_topic": "Code Contracts",
    "title": "Remarks",
    "description": ".NET supports the Design by Contract idea via its Contracts class found in the System.Diagnostics namespace and introduced in .NET 4.0. Code Contracts API includes classes for static and runtime checks of code and allows you to define preconditions, postconditions, and invariants within a method. The preconditions specify the conditions the parameters must fulfill before a method can execute, postconditions that are verified upon completion of a method, and the invariants define the conditions that do not change during the execution of a method. Why are Code Contracts needed? Tracking issues of an application when your application is running, is one the foremost concerns of all the developers and administrators. Tracking can be performed in many ways. For example - You can apply tracing on our application and get the details of an application when the application is running. You can use event logging mechanism when you are running the application. The messages can be seen using Event Viewer. You can apply Performance Monitoring after a specific time interval and write live data from your application. Code Contracts uses a different approach for tracking and managing issues within an application. Instead of validating everything that is returned from a method call, Code Contracts with the help of preconditions, postconditions, and invariants on methods, ensure that everything entering and leaving your methods are correct."
  },
  {
    "sub_topic_id": 157,
    "sub_topic": "Code Contracts and Assertions",
    "title": "Remarks",
    "description": "Assertions are used not to perform testing of input parameters, but to verify that program flow is corect -- i.e., that you can make certain assumptions about your code at a certain point in time. In other words: a test done with Debug.Assert should always assume that the value tested is true. Debug.Assert only executes in DEBUG builds; it is filtered out of RELEASE builds. It must be considered a debugging tool in addition to unit testing and not as a replacement of code contracts or input validation methods."
  },
  {
    "sub_topic_id": 158,
    "sub_topic": "Collection Initializers",
    "title": "Remarks",
    "description": "The only requirement for an object to be initialized using this syntactic sugar is that the type implements System.Collections.IEnumerable and the Add method. Although we call it a collection initializer, the object does not have to be an collection."
  },
  {
    "sub_topic_id": 159,
    "sub_topic": "Comments and regions",
    "title": "Remarks",
    "description": "Using comments in your projects is a handy way of leaving explanations of your design choices, and should aim to make your (or someone else's) life easier when maintaining or adding to the code. There are a two ways of adding a comment to your code. A region is a collapsible block of code, that can help with the readability and organisation of your code. NOTE: StyleCop's rule SA1124 DoNotUseRegions discourages use of regions. They are usually a sign of badly organized code, as C# includes partial classes and other features which make regions obsolete."
  },
  {
    "sub_topic_id": 160,
    "sub_topic": "Common String Operations",
    "title": "Remarks",
    "description": "The System.String class supports a number of methods to convert between uppercase and lowercase characters in a string. System.String.ToLowerInvariant is used to return a String object converted to lowercase. System.String.ToUpperInvariant is used to return a String object converted to uppercase. Note: The reason to use the invariant versions of these methods is to prevent producing unexpected culture-specific letters. This is explained here in detail. The System.String.Join method allows to concatenate all elements in a string array, using a specified separator between each element."
  },
  {
    "sub_topic_id": 161,
    "sub_topic": "Conditional Statements",
    "title": "Remarks",
    "description": "Following on from the If-Else Statement example, it is now time to introduce the Else If statement. The Else If statement follows directly after the If statement in the If-Else If-Else structure, but intrinsically has has a similar syntax as the If statement. It is used to add more branches to the code than what a simple If-Else statement can. In the example from If-Else Statement, the example specified that the score goes up to 100; however there were never any checks against this. Programming in general often requires a decision or a branch within the code to account for how the code operates under different inputs or conditions. Within the C# programming language (and most programming languages for this matter), the simplest and sometimes the most useful way of creating a branch within your program is through an If-Else statement. Lets assume we have method (a.k.a. a function) which takes an int parameter which will represent a score up to 100, and the method will print out a message saying whether we pass or fail."
  },
  {
    "sub_topic_id": 162,
    "sub_topic": "Constructors and Finalizers",
    "title": "Remarks",
    "description": "C# does not actually have destructors, but rather Finalizers which use C++ style destructor syntax. Specifying a destructor overrides the Object.Finalize() method which cannot be called directly. Unlike other languages with similar syntax, these methods are not called when objects go out of scope, but are called when the Garbage Collector runs, hich occurs under certain conditions. As such, they are not guaranteed to run in any particular order. Finalizers should be responsible for cleaning up unmanaged resources only (pointers acquired via the Marshal class, received through p/Invoke (system calls) or raw pointers used within unsafe blocks). To clean up managed resources, please review IDisposable, the Dispose pattern and the using statement."
  },
  {
    "sub_topic_id": 163,
    "sub_topic": "Creating a Console Application using a Plain-Text Editor and the C# Compiler (csc.exe)",
    "title": "Remarks",
    "description": "In order to use a plain-text editor to create a Console application that is written in C#, you'll need the C# Compiler. The C# Compiler (csc.exe), can be found at the following location: %WINDIR%\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe N.B. Depending upon which version of the .NET Framework that is installed on your system, you may need to change the path above, accordingly. Saving the Code: The purpose of this topic is not to teach you how to write a Console application, but to teach you how to compile one [to produce a single executable file], with nothing other than the C# Compiler and any Plain-Text Editor (such as Notepad). Open the Run dialog, by using the keyboard shortcut Windows Key + R Type notepad, then hit Enter Paste the example code below, into Notepad Save the file as ConsoleApp.cs, by going to File → Save As..., then entering ConsoleApp.cs in the 'File Name' text field, then selecting All Files as the file-type. Click Save Compiling the Source Code 1. Open the Run dialog, using Windows Key + R 2. Enter: %WINDIR%\\Microsoft.NET\\Framework64\\v4.0.30319\\csc.exe /t:exe /out:'C:\\Users\\yourUserName\\Documents\\ConsoleApp.exe' 'C:\\Users\\yourUserName\\Documents\\ConsoleApp.cs' Now, go back to where you originally saved your ConsoleApp.cs file. You should now see an executable file (ConsoleApp.exe). Double-click ConsoleApp.exe to open it."
  },
  {
    "sub_topic_id": 164,
    "sub_topic": "Creating Own MessageBox in Windows Form Application",
    "title": "Remarks",
    "description": "First we need to know what a MessageBox is... The MessageBox control displays a message with specified text, and can be customised by specifying a custom image, title and button sets (These button sets allow the user to choose more than a basic yes/no answer). By creating our own MessageBox we can re-use that MessageBox Control in any new applications just by using the generated dll, or copying the file containing the class."
  },
  {
    "sub_topic_id": 165,
    "sub_topic": "Creational Design Patterns",
    "title": "Remarks",
    "description": "The creational patterns aim to separate a system from how its objects are created, composed, and represented. They increase the system's flexibility in terms of the what, who, how, and when of object creation. Creational patterns encapsulate the knowledge about which classes a system uses, but they hide the details of how the instances of these classes are created and put together. Programmers have come to realize that composing systems with inheritance makes those systems too rigid. The creational patterns are designed to break this close coupling."
  },
  {
    "sub_topic_id": 166,
    "sub_topic": "Cryptography (System.Security.Cryptography)",
    "title": "Remarks",
    "description": "There are times when the framework's Random() class may not be considered random enough, given that it is based on a psuedo-random number generator. The framework's Crypto classes do, however, provide something more robust in the form of RNGCryptoServiceProvider. The following code samples demonstrate how to generate Cryptographically Secure byte arrays, strings and numbers. Asymmetric encryption is often regarded as preferable to Symmetric encryption for transferring messages to other parties. This is mainly because it negates many of the risks related to the exchange of a shared key and ensures that whilst anyone with the public key can encrypt a message for the intended recipient, only that recipient can decrypt it. Unfortunately the major down-side of asymmetric encryption algorithms is that they are significantly slower than their symmetric cousins. As such the asymmetric encryption of files, especially large ones, can often be a very computationally intensive process. In order to provide both security AND performance, a hybrid approach can be taken. This entails the cryptographically random generation of a key and initialization vector for Symmetric encryption. These values are then encrypted using an Asymmetric algorithm and written to the output file, before being used to encrypt the source data Symmetrically and appending it to the output. This approach provides a high degree of both performance and security, in that the data is encrypted using a symmetric algorithm (fast) and the key and iv, both randomly generated (secure) are encrypted by an asymmetric algorithm (secure). It also has the added advantage that the same payload encrypted on different occasions will have very different cyphertext, because the symmetric keys are randomly generated each time."
  },
  {
    "sub_topic_id": 167,
    "sub_topic": "Data Annotation",
    "title": "Remarks",
    "description": "Data annotations are a way of adding more contextual information to classes or members of a class. There are three main categories of annotations: Validation Attributes: add validation criteria to data; Display Attributes: specify how the data should be displayed to the user; Modelling Attributes: add information on usage and relationship with other classes. Custom validation attributes can be created by deriving from the ValidationAttribute base class, then overriding virtual methods as needed. Validation attributes are used to enforce various validation rules in a declarative fashion on classes or class members. All validation attributes derive from the ValidationAttribute base class."
  },
  {
    "sub_topic_id": 168,
    "sub_topic": "DateTime Methods",
    "title": "Remarks",
    "description": "To get the current date you use the DateTime.Today property. This returns a DateTime object with today's date. When this is then converted .ToString() it is done so in your system's locality by default. DateTimeForma tInfo specifies a set of specifiers for simple date and time formating. Every specifier correspond to a particular DateTimeFormatInfo format pattern. You can use also date separator / (slash) and time sepatator : (colon)."
  },
  {
    "sub_topic_id": 169,
    "sub_topic": "Delegates",
    "title": "Remarks",
    "description": "A delegate type is a type representing a particular method signature. An instance of this type refers to a particular method with a matching signature. Method parameters may have delegate types, and so this one method to be passed a reference to another method, which may then be invoked In-built delegate types: Action<...>, Predicate<T> and Func<...,TResult> The System namespace contains Action<...>,Predicate<T> and Func<...,TResult> delegates, where the \"...    \" represents between 0 and 16 generic type parameters (for 0 parameters, Action is non-generic). Func represents methods with a return type matching TResult, and Action represents methods without a return value (void). In both cases, the additional generic type parameters match, in order, the method parameters. Predicate represents method with boolean return type, T is input parameter. Custom delegate types: Named delegate types can be declared using the delegate keyword. Invoking delegates: Delegates can be invoked using the same syntax as methods: the name of the delegate instance, followed by parentheses containing any parameters. Assigning to delegates: Delegates can be assigned to in the following ways: Assigning a named method; Assigning an anonymous method using a lambda; Assigning a named method using the delegate keyword. Combining delegates: Multiple delegate objects can be assigned to one delegate instance by using the + operator. The - operator can be used to remove a component delegate from another delegate."
  },
  {
    "sub_topic_id": 170,
    "sub_topic": "Dependency Injection",
    "title": "Remarks",
    "description": "In software engineering, dependency injection is a software design pattern that implements inversion of control for resolving dependencies. A dependency is an object that can be used (a service). An injection is the passing of a dependency to a dependent object (a client) that would use it. **This site features an answer to the question How to explain Dependency Injection to a 5-year old. The most highly rated answer, provided by John Munsch provides a surprisingly accurate analogy targeted at the (imaginary) five-year-old inquisitor: When you go and get things out of the refrigerator for yourself, you can cause problems. You might leave the door open, you might get something Mommy or Daddy doesn’t want you to have. You might even be looking for something we don’t even have or which has expired. What you should be doing is stating a need, “I need something to drink with lunch,” and then we will make sure you have something when you sit down to eat. What this means in terms of object-oriented software development is this: collaborating classes (the five-year-olds) should rely on the infrastructure (the parents) to provide ** This code uses MEF to dynamically load the dll and resolve the dependencies. ILogger dependency is resolved by MEF and injectd into the user class. User class never receives Concrete implementation of ILogger and it has no idea of what or which type of logger its using.**"
  },
  {
    "sub_topic_id": 171,
    "sub_topic": "Diagnostics",
    "title": "Remarks",
    "description": "Writes to the trace listeners in the Listeners collection when the application is compiled in debug configuration. In Visual Studio or Xamarin Studio this will appear in the Application Output window. This is due to the presence of the default trace listener in the TraceListenerCollection. You can redirect the debug output to a text file by adding a TextWriterTraceListener to the Debug.Listeners collection. You can redirect the debug output to a console application's out stream using a ConsoleTraceListener."
  },
  {
    "sub_topic_id": 172,
    "sub_topic": "Dynamic type",
    "title": "Remarks",
    "description": "The dynamic keyword declares a variable whose type is not known at compile time. A dynamic variable can contain any value, and the type of the value can change during runtime. As noted in the book 'Metaprogramming in .NET', C# does not have a backing type for the dynamic keyword: The functionality enabled by the dynamic keyword is a clever set of compiler actions that emit and use CallSite objects in the site container of the local execution scope. The compiler manages what programmers perceive as dynamic object references through those CallSite instances. The parameters, return types, fields, and properties that get dynamic treatment at compile time may be marked with some metadata to indicate that they were generated for dynamic use, but the underlying data type for them will always be System.Object."
  },
  {
    "sub_topic_id": 173,
    "sub_topic": "Enum",
    "title": "Remarks",
    "description": "An enum can derive from any of the following types: byte, sbyte, short, ushort, int, uint, long, ulong. The default is int, and can be changed by specifying the type in the enum definition: public enum Weekday : byte { Monday = 1, Tuesday = 2, Wednesday = 3, Thursday = 4, Friday = 5 } This is useful when P/Invoking to native code, mapping to data sources, and similar circumstances. In general, the default int should be used, because most developers expect an enum to be an int."
  },
  {
    "sub_topic_id": 174,
    "sub_topic": "Equality Operator",
    "title": "Remarks",
    "description": "In C#, there are two different kinds of equality: reference equality and value equality. Value equality is the commonly understood meaning of equality: it means that two objects contain the same values. For example, two integers with the value of 2 have value equality. Reference equality means that there are not two objects to compare. Instead, there are two object references, both of which refer to the same object. For predefined value types, the equality operator (==) returns true if the values of its operands are equal, false otherwise. For reference types other than string, == returns true if its two operands refer to the same object. For the string type, == compares the values of the strings."
  },
  {
    "sub_topic_id": 175,
    "sub_topic": "Equals and GetHashCode",
    "title": "Remarks",
    "description": "Each implementation of Equals must fulfil the following requirements: Reflexive: An object must equal itself. x.Equals(x) returns true. Symmetric: There is no difference if I compare x to y or y to x - the result is the same. x.Equals(y) returns the same value as y.Equals(x). Transitive: If one object is equal to another object and this one is equal to a third one, the first has to be equal to the third. If (x.Equals(y) && y.Equals(z)) returns true, then x.Equals(z) returns true. Consistent: If you compare an object to another multiple times, the result is always the same. Successive invocations of x.Equals(y) return the same value as long as the objects referenced by x and y are not modified. Comparison to null: No object is equal to null. x.Equals(null) returns false. Implementations of GetHashCode: Compatible with Equals: If two objects are equal (meaning that Equals returns true), then GetHashCode must return the same value for each of them. Large range: If two objects are not equal (Equals says false), there should be a high probability their hash codes are distinct. Perfect hashing is often not possible as there is a limited number of values to choose from. Cheap: It should be inexpensive to calculate the hash code in all cases."
  },
  {
    "sub_topic_id": 176,
    "sub_topic": "Events",
    "title": "Remarks",
    "description": "An event is a notification that something has occurred (such as a mouse click) or, in some cases, is about to occur (such as a price change). Classes can define events and their instances (objects) may raise these events. For instance, a Button may contain a Click event that gets raised when a user has clicked it. Event handlers are then methods that get called when their corresponding event is raised. A form may contain a Clicked event handler for every Button it contains, for instance."
  },
  {
    "sub_topic_id": 177,
    "sub_topic": "Exception Handling",
    "title": "Remarks",
    "description": "Who says you cannot throw multiple exceptions in one method. If you are not used to playing around with AggregateExceptions you may be tempted to create your own data-structure to represent many things going wrong. There are of course were another data-structure that is not an exception would be more ideal such as the results of a validation. Even if you do play with AggregateExceptions you may be on the receiving side and always handling them not realizing they can be of use to you. It is quite plausible to have a method execute and even though it will be a failure as a whole you will want to highlight multiple things that went wrong in the exceptions that are thrown. As an example this behavior can be seen with how Parallel methods work were a task broken into multiple threads and any number of them could throw exceptions and this needs to be reported. "
  },
  {
    "sub_topic_id": 178,
    "sub_topic": "Expression Trees",
    "title": "Remarks",
    "description": "Expression Trees are Expressions arranged in a treelike data structure. Each node in the tree is a representation of an expression, an expression being code. An In-Memory representation of a Lambda expression would be an Expression tree, which holds the actual elements (i.e. code) of the query, but not its result. Expression trees make the structure of a lambda expression transparent and explicit. Expression trees are all about consuming 'source code' at runtime. Consider a method which calculates the sales tax due on a sales order decimal CalculateTotalTaxDue(SalesOrder order). Using that method in a .NET program is easy — you just call it decimal taxDue = CalculateTotalTaxDue(order);. What if you want to apply it to all the results from a remote query (SQL, XML, a remote server, etc)? Those remote query sources cannot call the method! Traditionally, you would have to invert the flow in all these cases. Make the entire query, store it in memory, then loop through the results and calculate tax for each result."
  },
  {
    "sub_topic_id": 179,
    "sub_topic": "Extension Methods",
    "title": "Remarks",
    "description": "Extension methods are syntactic sugar that allow static methods to be invoked on object instances as if they were a member of the type itself. Extension methods require an explicit target object. You will need to use the this keyword to access the method from within the extended type itself. Extensions methods must be declared static, and must live in a static class. Which namespace? The choice of namespace for your extension method class is a trade-off between visibility and discoverability. The most commonly mentioned option is to have a custom namespace for your extension methods. However this will involve a communication effort so that users of your code know that the extension methods exist, and where to find them. An alternative is to choose a namespace such that developers will discover your extension methods via Intellisense. So if you want to extend the Foo class, it is logical to put the extension methods in the same namespace as Foo. It is important to realise that nothing prevents you using 'someone else's' namespace: Thus if you want to extend IEnumerable, you can add your extension method in the System.Linq namespace. This is not always a good idea. For example, in one specific case, you may want to extend a common type (bool IsApproxEqualTo(this double value, double other) for example), but not have that 'pollute' the whole of System. In this case it is preferable to chose a local, specific, namespace. Finally, it is also possible to put the extension methods in no namespace at all!"
  },
  {
    "sub_topic_id": 180,
    "sub_topic": "File and Stream I/O",
    "title": "Remarks",
    "description": "Always make sure to close Stream objects. This can be done with a using block as shown above or by manually calling myStream.Close(). Make sure the current user has necessary permissions on the path you are trying to create the file. Verbatim strings should be used when declaring a path string that includes backslashes, like so: @'C:\\MyFolder\\MyFile.txt'. By this method, file is copied, meaning that it will be read from the source and then written to the destination path. This is a resource consuming process, it would take relative time to the file size, and can cause your program to freeze if you don't utilize threads."
  },
  {
    "sub_topic_id": 181,
    "sub_topic": "FileSystemWatcher",
    "title": "Remarks",
    "description": "A common mistake a lot of people starting out with FileSystemWatcher does is not taking into account That the FileWatcher event is raised as soon as the file is created. However, it may take some time for the file to be finished. Example: Take a file size of 1 GB for example . The file apr ask created by another program (Explorer.exe copying it from somewhere) but it will take minutes to finish that process. The event is raised that creation time and you need to wait for the file to be ready to be copied. The following example creates a FileSystemWatcher to watch the directory specified at run time. The component is set to watch for changes in LastWrite and LastAccess time, the creation, deletion, or renaming of text files in the directory. If a file is changed, created, or deleted, the path to the file prints to the console. When a file is renamed, the old and new paths print to the console."
  },
  {
    "sub_topic_id": 182,
    "sub_topic": "Func delegates",
    "title": "Remarks",
    "description": "Syntax : public delegate TResult Func<in T, out TResult>(T arg); public delegate TResult Func<in T1, in T2, out TResult>(T1 arg1, T2 arg2); public delegate TResult Func<in T1, in T2, in T3, out TResult>(T1 arg1, T2 arg2, T3 arg3); public delegate TResult Func<in T1, in T2, in T3, in T4, out TResult>(T1 arg1, T2 arg2, T3 arg3, T4 arg4). arg or arg1. The (first) parameter of the method arg2 the second parameter of the method arg3 the third parameter of the method arg4 the fourth parameter of the method T or T1 the type of the (first) parameter of the method T2 the type of the second parameter of the method T3 the type of the third parameter of the method T4 the type of the fourth parameter of the method TResult the return type of the method"
  },
  {
    "sub_topic_id": 183,
    "sub_topic": "Function with multiple return values",
    "title": "Remarks",
    "description": "There is no inherent answer in C# to this - so called - need. Nonetheless there are workarounds to satisfy this need. The reason I qualify the need as 'so called' is that we only need methods with 2 or more than 2 values to return when we violate good programming principals. Especially the Single Responsibility Principle. Hence, it would be better to be alerted when we need functions returning 2 or more values, and improve our design."
  },
  {
    "sub_topic_id": 184,
    "sub_topic": "Functional Programming",
    "title": "Remarks",
    "description": "C# developers get a lot of null reference exceptions to deal with. F# developers don't because they have the Option type. An Option<> type (some prefer Maybe<> as a name) provides a Some and a None return type. It makes it explicit that a method may be about to return a null record. For instance, you can't read the following and know if you will have to deal with a null value. var user = _repository.GetUser(id); If you do know about the possible null you can introduce some boilerplate code to deal with it. var username = user != null ? user.Name : string.Empty; What if we have an Option<> returned instead? Option<User> maybeUser = _repository.GetUser(id); The code now makes it explicit that we may have a None record returned and the boilerplate code to check for Some or None is required: var username = maybeUser.HasValue ? maybeUser.Value.Name : string.Empty; The following method shows how to return an Option<> public Option<User> GetUser(int id) { var users = new List<User> { new User { Id = 1, Name = 'Joe Bloggs' }, new User { Id = 2, Name = 'John Smith' } }; var user = users.FirstOrDefault(user => user.Id == id); return user != null ? new Option<User>(user) : new Option<User>(); } Here is a minimal implementation of Option<>."
  },
  {
    "sub_topic_id": 185,
    "sub_topic": "Garbage Collector in .Net",
    "title": "Remarks",
    "description": "By default the Large Object Heap is not compacted unlike the classic Object Heap which can lead to memory fragmentation and further, can lead to OutOfMemoryExceptions Starting with .NET 4.5.1 there is an option to explicitly compact the Large Object Heap (along with a garbage collection): GCSettings.LargeObjectHeapCompactionMode = GCLargeObjectHeapCompactionMode.CompactOnce; GC.Collect(); Just as any explicit garbage collection request (it's called request because the CLR is not forced to conduct it) use with care and by default avoid it if you can since it can de-calibrate GCs statistics, decreasing its performance."
  },
  {
    "sub_topic_id": 186,
    "sub_topic": "Generating Random Numbers in C#",
    "title": "Remarks",
    "description": "The random seed generated by the system isn't the same in every different run. Seeds generated in the same time might be the same. Seed A value for generating random numbers. If not set, the default value is determined by the current system time. minValue Generated numbers won't be smaller than this value. If not set, the default value is 0. maxValue Generated numbers will be smaller than this value. If not set, the default value is Int32.MaxValue. return value Returns a number with random value."
  },
  {
    "sub_topic_id": 187,
    "sub_topic": "Generic Lambda Query Builder",
    "title": "Remarks",
    "description": "The class is called ExpressionBuilder. It has three properties: private static readonly MethodInfo ContainsMethod = typeof(string).GetMethod('Contains', new[] { typeof(string) }); private static readonly MethodInfo StartsWithMethod = typeof(string).GetMethod('StartsWith', new[] { typeof(string) });  private static readonly MethodInfo EndsWithMethod = typeof(string).GetMethod('EndsWith', new[] { typeof(string) }); One public method GetExpression that returns the lambda expression, and three private methods: Expression GetExpression<T>; BinaryExpression GetExpression<T>; ConstantExpression GetConstant; All the methods are explained in details in the examples."
  },
  {
    "sub_topic_id": 188,
    "sub_topic": "Generics",
    "title": "Remarks",
    "description": "Generics in C# are supported all the way down to the runtime: generic types built with C# will have their generic semantics preserved even after compiled to CIL. This effectively means that, in C#, it is possible to reflect on generic types and see them as they were declared or check if an object is an instance of a generic type, for example. This is in contrast with type erasure, where generic type information is removed during compilation. It is also in contrast with the template approach to generics, where multiple concrete generic types become multiple non-generic types at runtime, and any metadata required to further instantiate the original generic type definitions is lost. Be careful, however, when reflecting on generic types: generic types' names will be altered on compilation, substituting the angled brackets and the type parameters' names by a backtick followed by the number of generic type parameters. Thus, a Dictionary<TKey, Tvalue> will be translated to Dictionary`2."
  },
  {
    "sub_topic_id": 189,
    "sub_topic": "Getting Started: Json with C#",
    "title": "Remarks",
    "description": "The following topic will introduce a way to work with Json using C# language and concepts of Serialization and Deserialization. Before reading some code, it is important to undersand the main concepts that will help to program applications using json. Serialization: Process of converting a object into a stream of bytes that can be sent through applications. The following code can be serialized and converted into the previous json. Deserialization: Process of converting a json/stream of bytes into an object. Its exactly the opposite process of serialization. The previous json can be deserialized into an C# object as demonstrated in examples below. To work this out, it is important to turn the json structure into classes in order to use processes already described. If you use Visual Studio, you can turn a json into a class automatically just by selecting 'Edit/Paste Special/Paste JSON as Classes' and pasting the json structure."
  },
  {
    "sub_topic_id": 190,
    "sub_topic": "Guid",
    "title": "Remarks",
    "description": "Guids are Globally Unique Identifiers, also known as UUID's, Universally Unique Identifiers. They are 128-bit pseudorandom values. There are so many valid Guids (about 10^18 Guids for each cell of every people on Earth) that if they are generated by a good pseudorandom algorithm, they can be considered unique in the whole universe by all practical means. Guids are most often used as primary keys in databases. Their advantage is that you don't have to call the database to get a new ID that is (almost) guaranteed to be unique. Related Examples"
  },
  {
    "sub_topic_id": 191,
    "sub_topic": "Handling FormatException when converting string to other types",
    "title": "Remarks",
    "description": "There are various methods available for explicitly converting a string to an integer, such as: Convert.ToInt16(); Convert.ToInt32(); Convert.ToInt64(); int.Parse(); But all these methods will throw a FormatException, if the input string contains non-numeric characters. For this, we need to write an additional exception handling(try..catch) to deal them in such cases. But, using the try..catch everywhere will not be a good practice, and there may be some scenarios where we wanted to give 0 if the input is wrong, (If we follow the above method we need to assign 0 to convertedInt from the catch block). To handle such scenarios we can make use of a special method called .TryParse(). The .TryParse() method having an internal Exception handling, which will give you the output to the out parameter, and returns a Boolean value indicating the conversion status (true if the conversion was successful; false if it failed)."
  },
  {
    "sub_topic_id": 192,
    "sub_topic": "Hash Functions",
    "title": "Remarks",
    "description": "MD5 and SHA1 are insecure and should be avoided. The examples exist for educational purposes and due to the fact that legacy software may still use these algorithms. Hash functions map binary strings of an arbitrary length to small binary strings of a fixed length. The MD5 algorithm is a widely used hash function producing a 128-bit hash value (16 Bytes, 32 Hexdecimal characters). The ComputeHash method of the System.Security.Cryptography.MD5 class returns the hash as an array of 16 bytes. Like most hash functions, MD5 is neither encryption nor encoding. It can be reversed by brute-force attack and suffers from extensive vulnerabilities against collision and preimage attacks."
  },
  {
    "sub_topic_id": 193,
    "sub_topic": "How to use C# Structs to create a Union type (Similar to C Unions)",
    "title": "Remarks",
    "description": "Union types are used in several languages, notably C-language, to contain several different types which can 'overlap' in the same memory space. In other words, they might contain different fields all of which start at the same memory offset, even when they might have different lengths and types. This has the benefit of both saving memory, and doing automatic conversion. Please, note the comments in the constructor of the Struct. The order in which the fields are initialized is extremely important. You want to first initialize all of the other fields and then set the value that you intend to change as the last statement. Because the fields overlap, the last value setup is the one that counts."
  },
  {
    "sub_topic_id": 194,
    "sub_topic": "ICloneable",
    "title": "Remarks",
    "description": "object ICloneable.Clone() { return Clone(); } // Private implementation of interface method which uses our custom public Clone() function. public Foo Clone() { return new Foo(this); } // Public clone method should utilize the copy constructor logic. It is up to the author to decide if cloning means only shallow copy, or deep copy. For immutable structures containing references it is recommended to do a deep copy. For classes being references themselves it is probably fine to implement a shallow copy. NOTE: In C# an interface method can be implemented privately with the syntax shown above."
  },
  {
    "sub_topic_id": 195,
    "sub_topic": "IComparable",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp"
  },
  {
    "sub_topic_id": 196,
    "sub_topic": "IDisposable interface",
    "title": "Remarks",
    "description": "It's up to clients of the class implementing IDisposable to make sure they call the Dispose method when they are finished using the object. There is nothing in the CLR that directly searches objects for a Dispose method to invoke. It's not necessary to implement a finalizer if your object only contains managed resources. Be sure to call Dispose on all of the objects that your class uses when you implement your own Dispose method. It's recommended to make the class safe against multiple calls to Dispose, although it should ideally be called only once. This can be achieved by adding a private bool variable to your class and setting the value to true when the Dispose method has run."
  },
  {
    "sub_topic_id": 197,
    "sub_topic": "IEnumerable",
    "title": "Remarks",
    "description": "IEnumerable is the base interface for all non-generic collections like ArrayList that can be enumerated. IEnumerator<T> is the base interface for all generic enumerators like List<>. IEnumerable is an interface which implements the method GetEnumerator. The GetEnumerator method returns an IEnumerator which provides options to iterate through the collection like foreach. IEnumerable is the base interface for all non-generic collections that can be enumerated"
  },
  {
    "sub_topic_id": 197,
    "sub_topic": "ILGenerator",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 199,
    "sub_topic": "Immutability",
    "title": "Remarks",
    "description": "Immutable types are types that when changed create a new version of the object in memory, rather than changing the existing object in memory. The simplest example of this is the built-in string type. Taking the following code, that appends 'world' onto the word 'Hello' string myString = 'hello'; myString += 'world'; What is happening in memory in this case is that a new object is created when you append to the string in the second line. If you do this as part of a large loop, there is the potential for this to cause performance issues in your application. The mutable equivalent for a string is a StringBuilder"
  },
  {
    "sub_topic_id": 200,
    "sub_topic": "Implementing Decorator Design Pattern",
    "title": "Remarks",
    "description": "Pros of using Decorator: you can add new functionalities at runtime in different configurations; good alternative for inheritance; client can choose configuration he wants to use. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 201,
    "sub_topic": "Implementing Flyweight Design Pattern",
    "title": "Remarks",
    "description": "Flyweight is one of structural design patterns. It is used to decrease the amount of used memory by sharing as much data as possible with similiar objects. This document will teach you how to use Flyweight DP properly. Let me explain the idea of it to you on a simple example. Imagine you're working on a RPG game and you need to load huge file that contains some characters. For example: # is grass. You can walk on it. $ is starting point. @ is rock. You can't walk on it. % is treasure chest. Sample of a map: @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ @############@@@@@######@#$@@@ @#############@@@######@###@@@ @#######%######@###########@@@ @############################@ @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Since those objects have similiar characteristic, you don't need to create separate object for each map field. I will show you how to use flyweight."
  },
  {
    "sub_topic_id": 202,
    "sub_topic": "Import Google Contacts",
    "title": "Remarks",
    "description": "The user contacts data will be received in JSON format, we extract it and finally we loop through this data and thus we get the google contacts. To Import Google(Gmail) contacts in ASP.NET MVC application, first download 'Google API setup' This will grant the following references: using Google.Contacts; using Google.GData.Client; using Google.GData.Contacts; using Google.GData.Extensions; Add these to the relevant application."
  },
  {
    "sub_topic_id": 203,
    "sub_topic": "Including Font Resources",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 204,
    "sub_topic": "Indexer",
    "title": "Remarks",
    "description": "Indexer allows array-like syntax to access a property of an object with an index. Can be used on a class, struct or interface. Can be overloaded. Can use multiple parameters. Can be used to access and set values. Can use any type for it's index. public ReturnType this[IndexType index] { get { ... } set { ... }}. By overloading the indexer you can create a class that looks and feels like an array but isn't. It will have O(1) get and set methods, can access an element at index 100, and yet still have the size of the elements inside of it."
  },
  {
    "sub_topic_id": 205,
    "sub_topic": "Inheritance",
    "title": "Remarks",
    "description": "Classes can inherit directly from only one class, but (instead or at the same time) can implement one or more interfaces. Structs can implement interfaces but cannot explicitly inherit from any type. They implicitly inherit from System.ValueType, which in turn inherits directly from System.Object. Static classes cannot implement interfaces. class DerivedClass : BaseClass; class DerivedClass : BaseClass, IExampleInterface; class DerivedClass : BaseClass, ExampleInterface, IAnotherInterface,When creating an instance of Dog class, the base classes's default constructor (without parameters) will be called if there is no explicit call to another constructor in the parent class. In our case, first will be called Object's constructor, then Animal's and at the end Dog's constructor. "
  },
  {
    "sub_topic_id": 206,
    "sub_topic": "Initializing Properties",
    "title": "Remarks",
    "description": "When deciding on how to create a property, start with an auto-implemented property for simplicity and brevity. Switch to a property with a backing field only when circumstances dictate. If you need other manipulations beyond a simple set and get, you may need to introduce a backing field. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 207,
    "sub_topic": "INotifyPropertyChanged interface",
    "title": "Remarks",
    "description": "The interface INotifyPropertyChanged is needed whenever you need to make your class report the changes happening to its properties. The interface defines a single event PropertyChanged. With XAML Binding the PropertyChanged event is wired up automatically so you only need to implement the INotifyPropertyChanged interface on your view model or data context classes to work with XAML Binding. The implementation of INotifyPropertyChange can be error-prone, as the interface requires specifying property name as a string. In order to make the implementation more robust, an attribute CallerMemberName can be used."
  },
  {
    "sub_topic_id": 208,
    "sub_topic": "Interfaces",
    "title": "Remarks",
    "description": "Explicit interface implementation is necessary when you implement multiple interfaces who define a common method, but different implementations are required depending on which interface is being used to call the method (note that you don't need explicit implementations if multiple interfaces share the same method and a common implementation is possible). We have our Items stored inside of a List<Item>, and in our program somewhere, we want to sort our list by ID number from smallest to largest. Instead of writing our own sorting algorithm, we can instead use the Sort() method that List<T> already has. However, as our Item class is right now, there is no way for the List<T> to understand what order to sort the list. Here is where the IComparable interface comes in. To correctly implement the CompareTo method, CompareTo should return a positive number if the parameter is 'less than' the current one, zero if they are equal, and a negative number if the parameter is 'greater than'."
  },
  {
    "sub_topic_id": 209,
    "sub_topic": "Interoperability",
    "title": "Remarks",
    "description": "Working with Win32 API using C# Windows exposes lots of functionality in the form of Win32 API. Using these API you can perform direct operation in windows, which increases performance of your application.Source Click here Windows exposes a broad range of API. To get information about various APIs you can check sites like pinvoke. Finding the dynamic library: When the extern method is first invoked the C# program will search for and load the appropriate DLL. For more information about where is searched to find the DLL, and how you can influence the search locations see this stackoverflow question. C++ compilers encode additional information in the names of exported functions, such as argument types, to make overloads with different arguments possible. This process is called name mangling. This causes problems with importing functions in C# (and interop with other languages in general), as the name of int add(int a, int b) function is no longer add, it can be ?add@@YAHHH@Z, _add@8 or anything else, depending on the compiler and the calling convention."
  },
  {
    "sub_topic_id": 210,
    "sub_topic": "IQueryable interface",
    "title": "Remarks",
    "description": "The IQueryable and IQueryable<T> interfaces allows developers to translate a LINQ query (a 'language-integrated' query) to a specific datasource, for example a relational database. If the variable books is of a type that implements IQueryable<Book> then the query above gets passed to the provider (set on the IQueryable.Provider property) in the form of an expression tree, a data structure that reflects the structure of the code. The provider can inspect the expression tree at runtime to determine: that there is a predicate for the Author property of the Book class; that the comparison method used is 'equals' (==); that the value it should equal is 'Stephen King'. The provider gets called when the query variable is iterated over (IQueryable implements IEnumerable). (The provider used in this example would require some extra metadata to know which table to query and to know how to match properties of the C# class to columns of the table, but such metadata is outside of the scope of the IQueryable interface.)"
  },
  {
    "sub_topic_id": 211,
    "sub_topic": "Iterators",
    "title": "Remarks",
    "description": "An iterator is a method, get accessor, or operator that performs a custom iteration over an array or collection class by using the yield keyword. Iterators produce enumerators. In C#, enumerators are produced by defining methods, properties or indexers that contain yield statements. Most methods will return control to their caller through normal return statements, which disposes all state local to that method. In contrast, methods that use yield statements allow them to return multiple values to the caller on request while preserving local state in-between returning those values. These returned values constitute a sequence. There are two types of yield statements used within iterators: yield return, which returns control to the caller but preserves state. The callee will continue execution from this line when control is passed back to it. yield break, which functions similarly to a normal return statement - this signifies the end of the sequence. Normal return statements themselves are illegal within an iterator block."
  },
  {
    "sub_topic_id": 212,
    "sub_topic": "Keywords",
    "title": "Remarks",
    "description": "Keywords are predefined, reserved identifiers with special meaning to the compiler. They cannot be used as identifiers in your program without the @ prefix. For example @if is a legal identifier but not the keyword if. C# has a predefined collection of 'keywords' (or reserved words) which each have a special function. These words can not be used as identifiers (names for variables, methods, classes, etc.) unless prefixed with @. "
  },
  {
    "sub_topic_id": 213,
    "sub_topic": "Lambda expressions",
    "title": "Remarks",
    "description": "A lambda expression is a syntax for creating anonymous functions inline. More formally, from the C# Programming Guide: A lambda expression is an anonymous function that you can use to create delegates or expression tree types. By using lambda expressions, you can write local functions that can be passed as arguments or returned as the value of function calls. A lambda expression is created by using the => operator. Put any parameters on the lefthand side of the operator. On the righthand side, put an expression that can use those parameters; this expression will resolve as the return value of the function. More rarely, if necessary, a whole {code block} can be used on the righthand side. If the return type is not void, the block will contain a return statement."
  },
  {
    "sub_topic_id": 214,
    "sub_topic": "Lambda Expressions",
    "title": "Remarks",
    "description": "Lambda expressions will implicitly capture variables used and create a closure. A closure is a function along with some state context. The compiler will generate a closure whenever a lambda expression 'encloses' a value from its surrounding context. E.g. when the following is executed Func<object, bool> safeApplyFiltererPredicate = o => (o != null) && filterer.Predicate(i); safeApplyFilterPredicate refers to a newly created object which has a private reference to the current value of filterer, and whose Invoke method behaves like o => (o != null) && filterer.Predicate(i); This can be important, because as long as the reference to the value now in safeApplyFilterPredicate is maintained, there will be a reference to the object which filterer currently refers to. This has an effect on garbage collection, and may cause unexpected behaviour if the object which filterer currently refers to is mutated. On the other hand, closures can be used to deliberate effect to encapsulate a behaviour which involves references to other objects."
  },
  {
    "sub_topic_id": 215,
    "sub_topic": "LINQ Queries",
    "title": "Remarks",
    "description": "LINQ is an acronym which stands for Language INtegrated Query. It is a concept which integrates a query language by offering a consistent model for working with data across various kinds of data sources and formats; you use the same basic coding patterns to query and transform data in XML documents, SQL databases, ADO.NET Datasets, .NET collections, and any other format for which a LINQ provider is available. To use LINQ queries you need to import System.Linq. The Method Syntax is more powerful and flexible, but the Query Syntax may be simpler and more familiar. All queries written in Query syntax  are translated into the functional syntax by the compiler, so performance is the same. Query objects are not evaluated until they are used, so they can be changed or added to without a performance penalty."
  },
  {
    "sub_topic_id": 216,
    "sub_topic": "Linq to Objects",
    "title": "Remarks",
    "description": "LINQ to Objects refers to the use of LINQ queries with any IEnumerable collection. LINQ queries do not execute immediately. When you are building the query you are simply storing the query for future execution. Only when you actually request to iterate the query is the query executed (e.g. in a for loop, when calling ToList, Count, Max, Average, First, etc.) This is considered deferred execution. This allows you to build up the query in multiple steps, potentially modifying it based on conditional statements, and then execute it later only once you require the result. Some LINQ methods will also trigger the query execution, Count, First, Max, Average. They return single values. ToList and ToArray collects result and turn them to a List or a Array respectively. Be aware that it is possible for you to iterate across the query multiple times if you call multiple LINQ functions on the same query. This could give you different results at each call. If you only want to work with one data set, be sure to save it into a list or array."
  },
  {
    "sub_topic_id": 217,
    "sub_topic": "LINQ to XML",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 218,
    "sub_topic": "Literals",
    "title": "Remarks",
    "description": "Syntax: bool: true or false; byte: None, integer literal implicitly converted from int; sbyte: None, integer literal implicitly converted from int; char: Wrap the value with single-quotes; decimal: M or m; double: D, d, or a real number; float: F or f; int: None, default for integral values within the range of int; uint: U, u, or integral values within the range of uint; long: L, l, or integral values within the range of long; ulong: UL, ul, Ul, uL, LU, lu, Lu, lU, or integral values within the range of ulong; short: None, integer literal implicitly converted from int; ushort: None, integer literal implicitly converted from int; string: Wrap the value with double-quotes, optionally prepended with @; null: The literal null"
  },
  {
    "sub_topic_id": 219,
    "sub_topic": "Lock Statement",
    "title": "Remarks",
    "description": "Using the lock statement you can control different threads' access to code within the code block. It is commonly used to prevent race conditions, for example multiple threads reading and removing items from a collection. As locking forces threads to wait for other threads to exit a code block it can cause delays that could be solved with other synchronization methods.MSDN The lock keyword marks a statement block as a critical section by obtaining the mutual-exclusion lock for a given object, executing a statement, and then releasing the lock. The lock keyword ensures that one thread does not enter a critical section of code while another thread is in the critical section. If another thread tries to enter a locked code, it will wait, block, until the object is released. Best practice is to define a private object to lock on, or a private static object variable to protect data common to all instances."
  },
  {
    "sub_topic_id": 220,
    "sub_topic": "Looping",
    "title": "Remarks",
    "description": "The type ItemType does not need to match the precise type of the items, it just needs to be assignable from the type of the items Instead of ItemType, alternatively var can be used which will infer the items type from the enumerableObject by inspecting the generic argument of the IEnumerable implementation The statement can be a block, a single statement or even an empty statement (;) If enumerableObject is not implementing IEnumerable, the code will not compile During each iteration the current item is cast to ItemType (even if this is not specified but compiler-inferred via var) and if the item cannot be cast an InvalidCastException will be thrown.A For Loop is great for doing things a certain amount of time. It's like a While Loop but the increment is included with the condition. Initialization - Makes a new local variable that can only be used in the loop. Condition - The loop only runs when the condition is true. Increment - How the variable changes every time the loop runs. It is not sufficient to just do sum = sum + i without the lock because the read-modify-write operation is not atomic. A thread will overwrite any external modifications to sum that occur after it has read the current value of sum, but before it stores the modified value of sum + i back into sum. "
  },
  {
    "sub_topic_id": 221,
    "sub_topic": "Making a variable thread safe",
    "title": "Remarks",
    "description": "Controlling access to a variable in a Parallel.For loop. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 222,
    "sub_topic": "Methods",
    "title": "Remarks",
    "description": "Every method has a unique signature consisting of a accessor (public, private, ...) ,optional modifier (abstract), a name and if needed method parameters. Note, that the return type is not part of the signature. A method prototype looks like the following: AccessModifier OptionalModifier ReturnType MethodName(InputParameters) {     //Method body } AccessModifier can be public, protected, pirvate or by default internal. OptionalModifier can be static abstract virtual override new or sealed. ReturnType can be void for no return or can be any type from the basic ones, as int to complex classes. a Method may have some or no input parameters. to set parameters for a method, you should declare each one like normal variable declarations (like int a), and for more than one parameter you should use comma between them (like int a, int b). Parameters may have default values. for this you should set a value for the parameter (like int a = 0). if a parameter has a default value, setting the input value is optional."
  },
  {
    "sub_topic_id": 223,
    "sub_topic": "Microsoft.Exchange.WebServices",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 224,
    "sub_topic": "Named and Optional Arguments",
    "title": "Remarks",
    "description": "Named Arguments Ref: MSDN Named arguments enable you to specify an argument for a particular parameter by associating the argument with the parameter’s name rather than with the parameter’s position in the parameter list. As said by MSDN, A named argument , Enables you to pass the argument to the function by associating the parameter’s name. No needs for remembering the parameters position that we are not aware of always. No need to look the order of the parameters in the parameters list of called function. We can specify parameter for each arguments by its name. Optional Arguments Ref: MSDN The definition of a method, constructor, indexer, or delegate can specify that its parameters are required or that they are optional. Any call must provide arguments for all required parameters, but can omit arguments for optional parameters. As said by MSDN, a Optional Argument, We can omit the argument in the call if that argument is an Optional Argument Every Optional Argument has its own default value It will take default value if we do not supply the value A default value of a Optional Argument must be a Constant expression. Must be a value type such as enum or struct. Must be an expression of the form default(valueType) It must be set at the end of parameter list"
  },
  {
    "sub_topic_id": 225,
    "sub_topic": "Named Arguments",
    "title": "Remarks",
    "description": "In this our first argument is length (ie 120) and second argument is width (ie 56). And we are calculating the area by that function. And following is the function definition. So in the first function call, we just passed the arguments by its position. Right? One of the important use of a named argument is, when you use this in your program it improves the readability of your code. It simply says what your argument is meant to be, or what it is? You can give the positional arguments too. That means, a combination of both positional argument and named argument. Named argument specification must appear after all fixed arguments have been specified. If you use a named argument before a fixed argument you will get a compile time error as follows."
  },
  {
    "sub_topic_id": 226,
    "sub_topic": "nameof Operator",
    "title": "Remarks",
    "description": "The nameof operator allows you to get the name of a variable, type or member in string form without hard-coding it as a literal. The operation is evaluated at compile-time, which means that you can rename a referenced identifier, using an IDE's rename feature, and the name string will update with it. The nameof operator allows you to get the name of a variable, type or member in string form without hard-coding it as a literal. The operation is evaluated at compile-time, which means that you can rename, using an IDE's rename feature, a referenced identifier and the name string will update with it."
  },
  {
    "sub_topic_id": 227,
    "sub_topic": "Naming Conventions",
    "title": "Remarks",
    "description": "Choose easily readable identifier names For example, a property named HorizontalAlignment is more readable in English than AlignmentHorizontal. Favor readability over brevity The property name CanScrollHorizontally is better than ScrollableX (an obscure reference to the X-axis). Avoid using underscores, hyphens, or any other non-alphanumeric characters. Do not use Hungarian notation Hungarian notation is the practice of including a prefix in identifiers to encode some metadata about the parameter, such as the data type of the identifier, e.g. string strName. Also, avoid using identifiers that conflict with keywords already used within C#. Abbreviations and acronyms In general, you should not use abbreviations or acronyms; these make your names less readable. Similarly, it is difficult to know when it is safe to assume that an acronym is widely recognized."
  },
  {
    "sub_topic_id": 228,
    "sub_topic": "Networking",
    "title": "Remarks",
    "description": "You can get the NetworkStream from a TcpClient with client.GetStream() and pass it into a StreamReader/StreamWriter to gain access to their async read and write methods. Downloading a file from the internet is a very common task required by almost every application your likely to build. To accomplish this, you can use the 'System.Net.WebClient' class. What this example does is it uses 'using' to make sure that your web client is cleaned up correctly when finished, and simply transfers the named resource from the URL in the first parameter, to the named file on your local hard drive in the second parameter. The first parameter is of type 'System.Uri', the second parameter is of type 'System.String' You can also use this function is an async form, so that it goes off and performs the download in the background, while your application get's on with something else, using the call in this way is of major importance in modern applications, as it helps to keep your user interface responsive."
  },
  {
    "sub_topic_id": 229,
    "sub_topic": "Nullable types",
    "title": "Remarks",
    "description": "Nullable types can represent all the values of an underlying type as well as null. The syntax T? is shorthand for Nullable<T> Nullable values are System.ValueType objects actually, so they can be boxed and unboxed. Also, null value of a nullable object is not the same as null value of a reference object, it's just a flag. When a nullable object boxing, the null value is converted to null reference, and non-null value is converted to non-nullable underlying type. Any nullable type is a generic type. And any nullable type is a value type.The .GetValueOrDefault() method returns a value even if the .HasValue property is false (unlike the Value property, which throws an exception)."
  },
  {
    "sub_topic_id": 230,
    "sub_topic": "Null-Coalescing Operator",
    "title": "Remarks",
    "description": "The null coalescing operator itself is two consecutive question mark characters: ?? It is a shorthand for the conditional expression: possibleNullObject != null ? possibleNullObject : defaultValue The left-side operand (object being tested) must be a nullable value type or reference type, or a compile error will occur. The ?? operator works for both reference types and value types."
  },
  {
    "sub_topic_id": 231,
    "sub_topic": "Null-conditional Operators",
    "title": "Remarks",
    "description": "Note that when using the null coalescing operator on a value type T you will get a Nullable<T> back. Syntax: X?.Y; //null if X is null else X.Y; X?.Y?.Z; //null if X is null or Y is null else X.Y.Z; X?[index]; //null if X is null else X[index]; X?.ValueMethod(); //null if X is null else the result of X.ValueMethod(); X?.VoidMethod(); //do nothing if X is null else call X.VoidMethod()"
  },
  {
    "sub_topic_id": 232,
    "sub_topic": "NullReferenceException",
    "title": "Remarks",
    "description": "A NullReferenceException is thrown when you try to access a non-static member (property, method, field or event) of a reference object but it is null. In debug mode, you only have to put your mouse cursor on every of these elements and you will find your null reference. Then, what you have to do is understand why it doesn't have a value. The correction totally depends on the goal of your method. In any case, remember that a method should never throw a NullReferenceException. If it does, that means you have forgotten to check something."
  },
  {
    "sub_topic_id": 233,
    "sub_topic": "O(n) Algorithm for circular rotation of an array",
    "title": "Remarks",
    "description": "In my path to studying programming there have been simple, but interesting problems to solve as exercises. One of those problems was to rotate an array(or another collection) by a certain value. Here I will share with you a simple formula to do it. The thing that is important in this code is the formula with which we find the new index value after the rotation. (index + array.Length + shiftCount % array.Length) % array.Length Here is a little more information about it: (shiftCount % array.Length) -> we normalize the shifting value to be in the length of the array (since in an array with length 10, shifting 1 or 11 is the same thing, the same goes for -1 and -11). array.Length + (shiftCount % array.Length) -> this is done due to left rotations to make sure we do not go into a negative index, but rotate it to the end of the array. Without it for an array with length 10 for index 0 and a rotation -1 we would go into a negative number (-1) and not get the real rotation index value, which is 9. (10 + (-1 % 10) = 9) index + array.Length + (shiftCount % array.Length) -> not much to say here as we apply the rotation to the index to get the new index. (0 + 10 + (-1 % 10) = 9) index + array.Length + (shiftCount % array.Length) % array.Length -> the second normalization is making sure that the new index value does not go outside of the array, but rotates the value in the beginning of the array. It is for right rotations, since in an array with length 10 without it for index 9 and a rotation 1 we would go into index 10, which is outside of the array, and not get the real rotation index value is 0. ((9 + 10 + (1 % 10)) % 10 = 0)"
  },
  {
    "sub_topic_id": 234,
    "sub_topic": "Object initializers",
    "title": "Remarks",
    "description": "The constructor parentheses can only be omitted if the type being instantiated has a default (parameterless) constructor available. SomeClass sc = new SomeClass { Property1 = value1, Property2 = value2, ... }; SomeClass sc = new SomeClass(param1, param2, ...) { Property1 = value1, Property2 = value2, ... }. Object initializers are handy when you need to create an object and set a couple of properties right away, but the available constructors are not sufficient. Object initializers are the only way to initialize anonymous types, which are types generated by the compiler."
  },
  {
    "sub_topic_id": 235,
    "sub_topic": "Object Oriented Programming In C#",
    "title": "Remarks",
    "description": "This topic try to tell us how we can write programs based on OOP approach.But we don't try to teach Object Oriented Programming paradigm. We'll be covering following topics: Classes,Properties,Inheritance,Polymorphism,Interfaces and so on. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 236,
    "sub_topic": "ObservableCollection",
    "title": "Remarks",
    "description": "ObservableCollection is a collection of type T like List<T> which means that it holds objects of type T. From documentation we read that : ObservableCollectionrepresents a dynamic data collection that provides notifications when items get added, removed, or when the entire list is refreshed. The key difference from other collections is that ObservableCollection implements the interfaces INotifyCollectionChanged and INotifyPropertyChanged and immediately raise notification event when a new object is added or removed and when collection is cleared. This is especially useful for conneting the UI and backend of an application without having to write extra code because when an object is added to or removed from an observable collection, the UI is automatically updated."
  },
  {
    "sub_topic_id": 237,
    "sub_topic": "Operators",
    "title": "Remarks",
    "description": "In C#, an operator is a program element that is applied to one or more operands in an expression or statement. Operators that take one operand, such as the increment operator (++) or new, are referred to as unary operators. Operators that take two operands, such as arithmetic operators (+,-,*,/), are referred to as binary operators. One operator, the conditional operator (?:), takes three operands and is the sole ternary operator in C#. Syntax: public static OperandType operator operatorSymbol(OperandType operand1) public static OperandType operator operatorSymbol(OperandType operand1, OperandType2 operand2)"
  },
  {
    "sub_topic_id": 238,
    "sub_topic": "Overflow",
    "title": "Remarks",
    "description": "There is a maximum capacity an integer can store. And when you go over that limit, it will loop back to the negative side. For int, it is 2147483647 For any integers out of this range use namespace System.Numerics which has datatype BigInteger. Check below link for more information https://msdn.microsoft.com/en-us/library/system.numerics.biginteger(v=vs.110).aspx This is due to the left-to-right ordering of the operations. In the first code fragment x + x overflows and after that it becomes a long. On the other hand x + 1L becomes long and after that x is added to this value."
  },
  {
    "sub_topic_id": 239,
    "sub_topic": "Overload Resolution",
    "title": "Remarks",
    "description": "The process of overload resolution is described in the C# specification, section 7.5.3. Also relevant are the sections 7.5.2 (type inference) and 7.6.5 (invocation expressions). How overload resolution works will probably be changed in C# 7. The design notes indicate that Microsoft will roll out a new system for etermining which method is better (in complicated scenarios). At compile-time, when the compiler finds the method call Hello(0), it finds all methods with the name Hello. In this case, it finds two of them. It then tries to determine which of the methods is better. The algorithm for determining which method is better is complex, but it usually boils down to 'make as few implicit conversions as possible'. Thus, in the case of Hello(0), no conversion is needed for the method Hello(int) but an implicit numeric conversion is needed for the method Hello(double). Thus, the first method is chosen by the compiler. In the case of Hello(0.0), there is no way to convert 0.0 to an int implicitly, so the method Hello(int) is not even considered for overload resolution. Only method remains and so it is chosen by the compiler."
  },
  {
    "sub_topic_id": 240,
    "sub_topic": "Parallel LINQ (PLINQ)",
    "title": "Remarks",
    "description": "Syntax: ParallelEnumerable.Aggregate(func); ParallelEnumerable.Aggregate(seed, func); ParallelEnumerable.Aggregate(seed, updateAccumulatorFunc, combineAccumulatorsFunc, resultSelector); ParallelEnumerable.Aggregate(seedFactory, updateAccumulatorFunc, combineAccumulatorsFunc, resultSelector); ParallelEnumerable.All(predicate); ParallelEnumerable.Any(); ParallelEnumerable.Any(predicate); ParallelEnumerable.AsEnumerable(); ParallelEnumerable.AsOrdered(); ParallelEnumerable.AsParallel(); ParallelEnumerable.AsSequential(); ParallelEnumerable.AsUnordered(); ParallelEnumerable.Average(selector); ParallelEnumerable.Cast(); ParallelEnumerable.Concat(second); ParallelEnumerable.Contains(value); ParallelEnumerable.Contains(value, comparer); ParallelEnumerable.Count();  ParallelEnumerable.Count(predicate); ParallelEnumerable.DefaultIfEmpty(); ParallelEnumerable.DefaultIfEmpty(defaultValue); ParallelEnumerable.Distinct(); ParallelEnumerable.Distinct(comparer); ParallelEnumerable.ElementAt(index); ParallelEnumerable.ElementAtOrDefault(index); ParallelEnumerable.Empty(); ParallelEnumerable.Except(second); ParallelEnumerable.Except(second, comparer); ParallelEnumerable.First(); ParallelEnumerable.First(predicate); ParallelEnumerable.FirstOrDefault(); ParallelEnumerable.FirstOrDefault(predicate); ParallelEnumerable.ForAll(action); ParallelEnumerable.GroupBy(keySelector); ParallelEnumerable.GroupBy(keySelector, comparer); ParallelEnumerable.GroupBy(keySelector, elementSelector); ParallelEnumerable.GroupBy(keySelector, elementSelector, comparer); ParallelEnumerable.GroupBy(keySelector, resultSelector); ParallelEnumerable.GroupBy(keySelector, resultSelector, comparer) ; ParallelEnumerable.GroupBy(keySelector, elementSelector, ruleSelector); ParallelEnumerable.GroupBy(keySelector, elementSelector, ruleSelector, comparer); ParallelEnumerable.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector); ParallelEnumerable.GroupJoin(inner, outerKeySelector, innerKeySelector, resultSelector, comparer); ParallelEnumerable.Intersect(second); ParallelEnumerable.Intersect(second, comparer); ParallelEnumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector); ParallelEnumerable.Join(inner, outerKeySelector, innerKeySelector, resultSelector, comparer); ParallelEnumerable.Last(); ParallelEnumerable.Last(predicate); ParallelEnumerable.LastOrDefault(); ParallelEnumerable.LastOrDefault(predicate); ParallelEnumerable.LongCount(); ParallelEnumerable.LongCount(predicate); ParallelEnumerable.Max(); ParallelEnumerable.Max(selector); ParallelEnumerable.Min(); ParallelEnumerable.Min(selector); ParallelEnumerable.OfType(); ParallelEnumerable.OrderBy(keySelector); ParallelEnumerable.OrderBy(keySelector, comparer); ParallelEnumerable.OrderByDescending(keySelector); ParallelEnumerable.OrderByDescending(keySelector, comparer); ParallelEnumerable.Range(start, count); ParallelEnumerable.Repeat(element, count); ParallelEnumerable.Reverse(); ParallelEnumerable.Select(selector); ParallelEnumerable.SelectMany(selector); ParallelEnumerable.SelectMany(collectionSelector, resultSelector); ParallelEnumerable.SequenceEqual(second); ParallelEnumerable.SequenceEqual(second, comparer); ParallelEnumerable.Single(); ParallelEnumerable.Single(predicate); ParallelEnumerable.SingleOrDefault(); ParallelEnumerable.SingleOrDefault(predicate); ParallelEnumerable.Skip(count); ParallelEnumerable.SkipWhile(predicate); ParallelEnumerable.Sum(); ParallelEnumerable.Sum(selector); ParallelEnumerable.Take(count); ParallelEnumerable.TakeWhile(predicate); ParallelEnumerable.ThenBy(keySelector);  ParallelEnumerable.ThenBy(keySelector, comparer) ; ParallelEnumerable.ThenByDescending(keySelector);  ParallelEnumerable.ThenByDescending(keySelector, comparer); ParallelEnumerable.ToArray(); ParallelEnumerable.ToDictionary(keySelector); ParallelEnumerable.ToDictionary(keySelector, comparer); ParallelEnumerable.ToDictionary(elementSelector); ParallelEnumerable.ToDictionary(elementSelector, comparer); ParallelEnumerable.ToList(); ParallelEnumerable.ToLookup(keySelector); ParallelEnumerable.ToLookup(keySelector, comparer); ParallelEnumerable.ToLookup(keySelector, elementSelector); ParallelEnumerable.ToLookup(keySelector, elementSelector, comparer); ParallelEnumerable.Union(second); ParallelEnumerable.Union(second, comparer); ParallelEnumerable.Where(predicate); ParallelEnumerable.WithCancellation(cancellationToken); ParallelEnumerable.WithDegreeOfParallelism(degreeOfParallelism); ParallelEnumerable.WithExecutionMode(executionMode); ParallelEnumerable.WithMergeOptions(mergeOptions); ParallelEnumerable.Zip(second, resultSelector)"
  },
  {
    "sub_topic_id": 241,
    "sub_topic": "Partial class and methods",
    "title": "Remarks",
    "description": "Partial classes provides us an option to split classes into multiple parts and in multiple source files. All parts are combined into one single class during compile time. All parts should contain the keyword partial,should be of the same accessibility. All parts should be present in the same assembly for it to be included during compile time. Partial classes must be defined within the same assembly, and namespace, as the class that they are extending. All parts of the class must use the partial keyword. All parts of the class must have the same accessibility; public/protected/private etc.. If any part uses the abstract keyword, then the combined type is considered abstract. If any part uses the sealed keyword, then the combined type is considered sealed. If any part uses the a base type, then the combined type inherits from that type. The combined type inherits all the interfaces defined on all the partial classes."
  },
  {
    "sub_topic_id": 242,
    "sub_topic": "Performing HTTP requests",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 243,
    "sub_topic": "Pointers",
    "title": "Remarks",
    "description": "Pointers and unsafe Due to their nature, pointers produce unverifiable code. Thus, usage of any pointer type requires an unsafe context. The type System.IntPtr is a safe wrapper around a void*. It is intended as a more convenient alternative to void* when an unsafe context isn't otherwise required to perform the task at hand. Undefined behavior Like in C and C++, incorrect usage of pointers can invoke undefined behavior, with possible side-effects being memory corruption and execution of unintended code. Due to the unverifiable nature of most pointer operations, correct usage of pointers is entirely a responsibility of the programmer. Types that support pointers Unlike C and C++, not all C# types have corresponding pointer types. A type T may have a corresponding pointer type if both of the following criteria apply: T is a struct type or a pointer type. T contains only members that satisfy both of these criteria recursively."
  },
  {
    "sub_topic_id": 244,
    "sub_topic": "Pointers & Unsafe Code",
    "title": "Remarks",
    "description": "In C#, an array name and a pointer to a data type same as the array data, are not the same variable type. For example, int *p and int[] p, are not same type. You can increment the pointer variable p because it is not fixed in memory but an array address is fixed in memory, and you can't increment that. Therefore, if you need to access an array data using a pointer variable, as we traditionally do in C, or C++, you need to fix the pointer using the fixed keyword. For compiling unsafe code, you have to specify the /unsafe command-line switch with command-line compiler. C# allows using pointer variables in a function of code block when it is marked by the unsafe modifier. The unsafe code or the unmanaged code is a code block that uses a pointer variable. A pointer is a variable whose value is the address of another variable i.e., the direct address of the memory location. similar to any variable or constant, you must declare a pointer before you can use it to store any variable address."
  },
  {
    "sub_topic_id": 245,
    "sub_topic": "Polymorphism",
    "title": "Remarks",
    "description": "Polymorphism means that a operation can also be applied to values of some other types. There are multiple types of Polymorphism: Ad hoc polymorphism: contains function overloading. The target is that a Method can be used with different types without the need of being generic. Parametric polymorphism: is the use of generic types. See Generics Subtyping: has the target inherit of a class to generalize a similar functionality Ad hoc polymorphism The target of Ad hoc polymorphism is to create a method, that can be called by different datatypes without a need of type-conversion in the function call or generics. The following method(s) sumInt(par1, par2) can be called with different datatypes and has for each combination of types a own implementation. Polymorphism is one of the pillar of OOP. Poly derives from a Greek term which means 'multiple forms'. Below is an example which exhibits Polymorphism. The class Vehicle takes multiple forms as a base class. The Derived classes Ducati and Lamborghini inherits from Vehicle and overrides the base class's Display() method, to display its own NumberOfWheels."
  },
  {
    "sub_topic_id": 246,
    "sub_topic": "Preprocessor directives",
    "title": "Remarks",
    "description": "Preprocessor directives are typically used to make source programs easy to change and easy to compile in different execution environments. Directives in the source file tell the preprocessor to perform specific actions. For example, the preprocessor can replace tokens in the text, insert the contents of other files into the source file, or suppress compilation of part of the file by removing sections of text. Preprocessor lines are recognized and carried out before macro expansion. Therefore, if a macro expands into something that looks like a preprocessor command, that command is not recognized by the preprocessor. Preprocessor statements use the same character set as source file statements, with the exception that escape sequences are not supported. The character set used in preprocessor statements is the same as the execution character set. The preprocessor also recognizes negative character values."
  },
  {
    "sub_topic_id": 247,
    "sub_topic": "Properties",
    "title": "Remarks",
    "description": "Properties combine the class data storage of fields with the accessibility of methods. Sometimes it may be hard to decide whether to use a property, a property referencing a field, or a method referencing a field. As a rule of thumb: Properties should be used without an internal field if they only get and/or set values; with no other logic occurring. In such cases, adding an internal field would be adding code for no benefit. Properties should be used with internal fields when you need to manipulate or validate the data. An example may be removing leading and trailing spaces from strings or ensuring that a date is not in the past. With regards to Methods vs Properties, where you can both retrieve (get) and update (set) a value, a property is the better choice. Also, .Net provides a lot of functionality that makes use of a class's structure; e.g. adding a grid to a form, .Net will by default list all properties of the class on that form; thus to make best use of such conventions plan to use properties when this behaviour would be typically desirable, and methods where you'd prefer for the types to not be automatically added."
  },
  {
    "sub_topic_id": 248,
    "sub_topic": "Reactive Extensions (Rx)",
    "title": "Remarks",
    "description": "An observable is created from the TextChanged event of the TextBox. Also any input is only selected if it's different from the last input and if there was no input within 0.5 seconds. The output in this example is sent to the console. Creates an Observable and starts a method asynchronously. SelectMany flattens the collection and the subscription is fired every 200 elements through Buffer."
  },
  {
    "sub_topic_id": 249,
    "sub_topic": "Read & Understand Stacktraces",
    "title": "Remarks",
    "description": "A stack trace is a great aid when debugging a program. You will get a stack trace when your program throws an Exception, and sometimes when the program terminates abnormally. The stack trace goes on like that, but this part will suffice for our purposes. At the top of the stack trace we see the line: at WindowsFormsApplication1.Form1.button1_Click(Object sender, EventArgs e) in F:\\WindowsFormsApplication1\\WindowsFormsApplication1\\Form1.cs:line 29 This is the most important part. It tells us the exact line where the Exception occurred: line 29 in Form1.cs . So, this is where you begin your search. The second line is at System.Windows.Forms.Control.OnClick(EventArgs e) This is the method that called button1_Click. So now we know that button1_Click, where the error occurred, was called from System.Windows.Forms.Control.OnClick. We can continue like this; the third line is at System.Windows.Forms.Button.OnClick(EventArgs e). This is, in turn, the code that called System.windows.Forms.Control.OnClick. The stack trace is the list of functions that was called until your code encountered the Exception. And by following this, you can figure out which execution path your code followed until it ran into trouble! Note that the stack trace includes calls from the .Net system; you don't normally need to follow all Microsofts System.Windows.Forms code to find out what went wrong, only the code that belongs to your own application. So, why is this called a 'stack trace'? Because, every time a program calls a method, it keeps track of where it was. It has a data structure called the 'stack', where it dumps its last location. If it is done executing the method, it looks on the stack to see where it was before it called the method - and continues from there. So the stack lets the computer know where it left off, before calling a new method. But it also serves as a debugging help. Like a detective tracing the steps that a criminal took when committing their crime, a programmer can use the stack to trace the steps a program took before it crashed."
  },
  {
    "sub_topic_id": 250,
    "sub_topic": "Reading and writing .zip files",
    "title": "Remarks",
    "description": "Public static ZipArchive OpenRead(string archiveFileName) archiveFileName The path to the archive to open, specified as a relative or absolute path. A relative path is interpreted as relative to the current working directory. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 251,
    "sub_topic": "Recursion",
    "title": "Remarks",
    "description": "Note that using recursion can have a severe impact on your code, as each recursive function call will be appended to the stack. If there are too many calls this could lead to a StackOverflowException. Most 'natural recursive functions' can be written as a for, while or foreach loop construct, and whilst not looking so posh or clever will be more efficient. Always think twice and use recursion carefully - know why you use it: recursion should be used when you know the number of recursive calls isn't excessive excessive means, it depends on how much memory is available recursion is used because it is clearer and cleaner code version, it's more readable than an iterative or loop-based function. Often this is the case because it gives cleaner and more compact code (aka less lines of code). But be aware, it can be less efficient! For example in the Fibonacci recursion, to compute the nth number in the sequence, the calculation time will grow exponentially!"
  },
  {
    "sub_topic_id": 252,
    "sub_topic": "Reflection",
    "title": "Remarks",
    "description": "Reflection allows code to access information about the assemblies, modules and types at run-time (program execution). This can then be further used to dynamically create, modify or access types. Types include properties, methods, fields and attributes. Reflection is a C# language mechanism for accessing dynamic object properties on runtime. Typically, reflection is used to fetch the information about dynamic object type and object attribute values. In REST application, for example, reflection could be used to iterate through serialized response object. According to MS guidelines performance critical code should avoid reflection. See https://msdn.microsoft.com/en-us/library/ff647790.aspx ."
  },
  {
    "sub_topic_id": 253,
    "sub_topic": "Regex Parsing",
    "title": "Remarks",
    "description": "You can test your patterns online without the need of compiling your solution to get results here: Click me Regex101 Example: Click me Especially beginners are tended to overkill their tasks with regex because it feels powerful and in the right place for complexer text-based lookups. This is the point where people try to parse xml-documents with regex without even asking theirselfes if there could be an already finished class for this task like XmlDocument. Regex should be the last weapon to pick agains complexity. At least dont forget putting in some effort to search for the right way before writing down 20 lines of patterns."
  },
  {
    "sub_topic_id": 254,
    "sub_topic": "Runtime Compile",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 255,
    "sub_topic": "Singleton Implementation",
    "title": "Remarks",
    "description": "This thread-safe version of a singleton was necessary in the early versions of .NET where static initialization was not guaranteed to be thread-safe. In more modern versions of the framework a statically initialized singleton is usually preferred because it is very easy to make implementation mistakes in the following pattern. Using Lazy<T> will make sure that the object is only instantiated when it is used somewhere in the calling code. Mutating instance is not a thread-safe operation, therefore the readonly attribute guarantees immutability after initialization."
  },
  {
    "sub_topic_id": 256,
    "sub_topic": "Static Classes",
    "title": "Remarks",
    "description": "The 'static' keyword when referring to a class has three effects: You cannot create an instance of a static class (this even removes the default constructor) All properties and methods in the class must be static as well. A static class is a sealed class, meaning it cannot be inherited. The static keyword means 2 things: This value does not change from object to object but rather changes on a class as a whole Static properties and methods don't require an instance."
  },
  {
    "sub_topic_id": 257,
    "sub_topic": "Stopwatches",
    "title": "Remarks",
    "description": "Stopwatches are often used in benchmarking programs to time code and see how optimal different segments of code take to run. Syntax: stopWatch.Start() - Starts Stopwatch. stopWatch.Stop() - Stops Stopwatch. stopWatch.Elapsed - Gets the total elapsed time measured by the current interval. A Stopwatch instance can measure elapsed time over several intervals with the total elapsed time being all individual intervals added together. This gives a reliable method of measuring elapsed time between two or more events."
  },
  {
    "sub_topic_id": 258,
    "sub_topic": "Stream",
    "title": "Remarks",
    "description": "A stream is an object that provides a low-level means to transfer data. They themselves do not act as data containers. The data that we deal with is in form of byte array(byte []). The functions for reading and writing are all byte orientated, e.g. WriteByte(). There are no functions for dealing with integers, strings etc. This makes the stream very general-purpose, but less simple to work with if, say, you just want to transfer text. Streams can be particularly very helpful when you are dealing with large amount of data. We will need to use different type of Stream based where it needs to be written/read from (i.e. the backing store). For example, if the source is a file, we need to use FileStream."
  },
  {
    "sub_topic_id": 259,
    "sub_topic": "String Concatenate",
    "title": "Remarks",
    "description": "If you are creating a dynamic string, It is a good practice to opt for StringBuilder class rather than joining strings using + or Concat method as each +/Concat creates a new string object everytime it is executed. Concatenating strings using a StringBuilder can offer performance advantages over simple string concatenation using +. This is due to the way memory is allocated. Strings are reallocated with each concatenation, StringBuilders allocate memory in blocks only reallocating when the current block is exhausted. This can make a huge difference when doing a lot of small concatenations."
  },
  {
    "sub_topic_id": 260,
    "sub_topic": "String Escape Sequences",
    "title": "Remarks",
    "description": "String escape sequences are transformed to the corresponding character at compile time. Ordinary strings that happen to contain backwards slashes are not transformed. For example, the strings notEscaped and notEscaped2 below are not transformed to a newline character, but will stay as two different characters ('\\' and 'n'). string escaped = \"\n\"; string notEscaped = \"\\\" + \"\n\"; string notEscaped2 = \"\\\n\"; Console.WriteLine(escaped.Length); // 1. Console.WriteLine(notEscaped.Length); // 2. Console.WriteLine(notEscaped2.Length); // 2. Escape sequences are not restricted to string and char literals."
  },
  {
    "sub_topic_id": 261,
    "sub_topic": "String Interpolation",
    "title": "Remarks",
    "description": "tring interpolation is a shorthand for the string.Format() method that makes it easier to build strings with variable and expression values inside of them. Syntax: $'content {expression} content'; $'content {expression:format} content'; $'content {expression} {{content in braces}} content}'; $'content {expression:format} {{content in braces}} content}'. Note: MM stands for months and mm for minutes. Be very careful when using these as mistakes can introduce bugs that may be difficult to discover."
  },
  {
    "sub_topic_id": 262,
    "sub_topic": "String Manipulation",
    "title": "Remarks",
    "description": "The System.String class supports a number of methods to convert between uppercase and lowercase characters in a string. System.String.ToLowerInvariant is used to return a String object converted to lowercase. System.String.ToUpperInvariant is used to return a String object converted to uppercase. Note: The reason to use the invariant versions of these methods is to prevent producing unexpected culture-specific letters. This is explained here in detail. The System.String.Join method allows to concatenate all elements in a string array, using a specified separator between each element. The System.String.Trim method can be used to remove all leading and trailing white-space characters from a string. String Concatenation can be done by using the System.String.Concat method, or (much easier) using the + operator."
  },
  {
    "sub_topic_id": 263,
    "sub_topic": "String.Format",
    "title": "Remarks",
    "description": "The Format methods are a set of overloads in the System.String class used to create strings that combine objects into specific string representations. This information can be applied to String.Format, various WriteLine methods as well as other methods in the .NET framework. String.Format() handles null arguments without throwing an exception. There are overloads that replace the args parameter with one, two, or three object parameters."
  },
  {
    "sub_topic_id": 264,
    "sub_topic": "StringBuilder",
    "title": "Remarks",
    "description": "A StringBuilder represents a series of characters, which unlike a normal string, are mutable. Often times there is a need to modify strings that we've already made, but the standard string object is not mutable. This means that each time a string is modified, a new string object needs to be created, copied to, and then reassigned. string myString = 'Apples'; mystring += ' are my favorite fruit'; In the above example, myString initially only has the value 'Apples'. However, when we concatenate ' are my favorite fruit', what the string class does internally needs to do involves: Creating a new array of characters equal to the length of myString and the new string we are appending. Copying all of the characters of myString into the beginning of our new array and copying the new string into the end of the array. Create a new string object in memory and reassign it to myString."
  },
  {
    "sub_topic_id": 265,
    "sub_topic": "Structs",
    "title": "Remarks",
    "description": "Unlike classes, a struct is a value type, and is created on the local stack and not on the managed heap, by default. This means that once the specific stack goes out of scope, the struct is de-allocated. Contained reference types of de-allocated structs are also swept, once the GC determines they are not longer referenced to by the struct. structs cannot inherit and cannot be bases for inheritance, they are implicitly sealed, and also cannot include protected members. However, a struct can implement an interface, as classes do."
  },
  {
    "sub_topic_id": 266,
    "sub_topic": "Structural Design Patterns",
    "title": "Remarks",
    "description": "tructural design patterns are patterns that describe how objects and classes can be combined and form a large structure and that ease design by identifying a simple way to realize relationships between entities. There are seven structural patterns described. They are as follows: Adapter, Bridge, Composite, Decorator, Facade, Flyweight and Proxy. So in technical terms this means: Convert the interface of a class into another interface that a clients expect. Adapter let classes work together that couldn't otherwise because of incompatible interfaces. The classes and objects participating in this pattern are: The adapter pattern exits out 4 elements ITarget: This is the interface which is used by the client to achieve functionality. Adaptee: This is the functionality which the client desires but its interface is not compatible with the client. Client: This is the class which wants to achieve some functionality by using the adaptee’s code. Adapter: This is the class which would implement ITarget and would call the Adaptee code which the client wants to call."
  },
  {
    "sub_topic_id": 267,
    "sub_topic": "Synchronization Context in Async-Await",
    "title": "Remarks",
    "description": "ConfigureAwait provides a means to avoid the default SynchronizationContext capturing behavior; passing false for the flowContext parameter prevents the SynchronizationContext from being used to resume execution after the await. async/await keywords use current synchronization context if it exists. I.e. you can write library code that would work correctly in UI, Web, and Console applications. The application will be unresponsive."
  },
  {
    "sub_topic_id": 268,
    "sub_topic": "System.DirectoryServices.Protocols.LdapConnection",
    "title": "Remarks",
    "description": "Set up some constants for the server and authentication information. Assuming LDAPv3, but it's easy enough to change that. // Authentication, and the name of the server. Private const string LDAPUser = 'cn=example:app:mygroup:accts,ou=Applications,dc=example,dc=com'; private readonly char[] password = { 'p', 'a', 's', 's', 'w', 'o', 'r', 'd' }; private const string TargetServer = 'ldap.example.com'; // Specific to your company. Might start 'cn=manager' instead of 'ou=people', for example. private const string CompanyDN = 'ou=people,dc=example,dc=com'; Actually create the connection with three parts: an LdapDirectoryIdentifier (the server), and NetworkCredentials."
  },
  {
    "sub_topic_id": 269,
    "sub_topic": "System.Management.Automation",
    "title": "Remarks",
    "description": "he System.Management.Automation namespace is the root namespace for Windows PowerShell. System.Management.Automation is an extension library from Microsoft and it can be added to Visual Studio projects via NuGet package manager or package manager console. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 270,
    "sub_topic": "T4 Code Generation",
    "title": "Remarks",
    "description": "Syntax: T4 Syntax <#@...#> //Declaring properties including templates, assemblies and namespaces and the language the template uses; Plain Text //Declaring text that can be looped through for the files generated; <#=...#> //Declaring Scripts; <#+...#> //Declaring scriptlets; <#...#> //Declaring text blocks. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 271,
    "sub_topic": "Task Parallel Library",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 272,
    "sub_topic": "Task Parallel Library (TPL) Dataflow Constructs",
    "title": "Remarks",
    "description": "BatchBlock combines N single items into one batch item, represented as an array of elements. An instance is created with a specific batch size, and the block then creates a batch as soon as it’s received that number of elements, asynchronously outputting the batch to the output buffer. BatchBlock is capable of executing in both greedy and non-greedy modes. In the default greedy mode, all messages offered to the block from any number of sources are accepted and buffered to be converted into batches. In non-greedy mode, all messages are postponed from sources until enough sources have offered messages to the block to create a batch. Thus, a BatchBlock can be used to receive 1 element from each of N sources, N elements from 1 source, and a myriad of options in between. Unlike BufferBlock, BroadcastBlock’s mission in life is to enable all targets linked from the block to get a copy of every element published, continually overwriting the “current” value with those propagated to it. Additionally, unlike BufferBlock, BroadcastBlock doesn’t hold on to data unnecessarily. After a particular datum has been offered to all targets, that element will be overwritten by whatever piece of data is next in line (as with all dataflow blocks, messages are handled in FIFO order). That element will be offered to all targets, and so on."
  },
  {
    "sub_topic_id": 273,
    "sub_topic": "Threading",
    "title": "Remarks",
    "description": "A thread is a part of a program that can execute independently of other parts. It can perform tasks simultaneously with other threads. Multithreading is a feature that enables programs to perform concurrent processing so that more than one operation can be done at a time. For example, you can use threading to update a timer or counter in the background while simultaneously performing other tasks in the foreground. Multithreaded applications are more responsive to user input and are also easily scalable, because the developer can add threads as and when the workload increases. By default, a C# program has one thread - the main program thread. However, secondary threads can be created and used to execute code in parallel with the primary thread. Such threads are called worker threads. To control the operation of a thread, the CLR delegates a function to the operating system known as Thread Scheduler. A thread scheduler assures that all the threads are allocated proper execution time. It also checks that the threads that are blocked or locked do not consume much of the CPU time. The .NET Framework System.Threading namespace makes using threads easier. System.Threading enables multithreading by providing a number of classes and interfaces. Apart from providing types and classes for a particular thread, it also defines types to hold a collection of threads, timer class and so on. It also provides its support by allowing synchronized access to shared data. Thread is the main class in the System.Threading namespace. Other classes include AutoResetEvent, Interlocked, Monitor, Mutex, and ThreadPool. Some of the delegates that are present in the System.Threading namespace include ThreadStart, TimerCallback, and WaitCallback. Enumerations in System.Threading namespace include ThreadPriority, ThreadState, and EventResetMode. In .NET Framework 4 and later versions, multithreaded programming is made easier and simpler through the System.Threading.Tasks.Parallel and System.Threading.Tasks.Task classes, Parallel LINQ (PLINQ), new concurrent collection classes in the System.Collections.Concurrent namespace, and a new task-based programming model."
  },
  {
    "sub_topic_id": 274,
    "sub_topic": "Timers",
    "title": "Remarks",
    "description": "If using Visual Studio, Timers can be added as a control directly to your form from the toolbox. Syntax: myTimer.Interval - sets how often the 'Tick' event is called (in milliseconds); myTimer.Enabled - boolean value that sets the timer to be enabled / disabled; myTimer.Start() - Starts the timer; myTimer.Stop() - Stops the timer. Timers are used to perform tasks at specific intervals of time (Do X every Y seconds) Below is an example of creating a new instance of a Timer. NOTE: This applies to Timers using WinForms. If using WPF, you may want to look into DispatcherTimer"
  },
  {
    "sub_topic_id": 275,
    "sub_topic": "Tuples",
    "title": "Remarks",
    "description": "To access tuple elements use Item1-Item8 properties. Only the properties with index number less or equal to tuple size are going to be available (i.e. one cannot access Item3 property in Tuple<T1,T2>). Tuples can be compared based on their elements. As an example, an enumerable whose elements are of type Tuple can be sorted based on comparisons operators defined on a specified element. Tuples are created using generic types Tuple<T1>-Tuple<T1,T2,T3,T4,T5,T6,T7,T8>. Each of the types represents a tuple containing 1 to 8 elements. Elements can be of different types. Tuples can be used to return multiple values from a method without using out parameters. In the following example AddMultiply is used to return two values (sum, product)."
  },
  {
    "sub_topic_id": 276,
    "sub_topic": "Type Conversion",
    "title": "Remarks",
    "description": "Type conversion is converting one type of data to another type. It is also known as Type Casting. In C#, type casting has two forms: Implicit type conversion - These conversions are performed by C# in a type-safe manner. For example, are conversions from smaller to larger integral types and conversions from derived classes to base classes. Explicit type conversion - These conversions are done explicitly by users using the pre-defined functions. Explicit conversions require a cast operator."
  },
  {
    "sub_topic_id": 277,
    "sub_topic": "Unsafe Code in .NET",
    "title": "Remarks",
    "description": "In order to be able to use the unsafe keyword in a .Net project, you must check 'Allow unsafe code' in Project Properties => Build Using unsafe code can improve performance, however, it is at the expense of code safety (hence the term unsafe). For instance, when you use a for loop an array like so: for (int i = 0; i < array.Length; i++) { array[i] = 0; } .NET Framework ensures that you do not exceed the bounds of the array, throwing an IndexOutOfRangeException if the index exceeds the bounds."
  },
  {
    "sub_topic_id": 278,
    "sub_topic": "Using Directive",
    "title": "Remarks",
    "description": "The using keyword is both a directive (this topic) and a statement. For the using statement (i.e. to encapsulate the scope of an IDisposable object, ensuring that outside of that scope the object becomes cleanly disposed) please see Using Statement. Allows you to import a specific type and use the type's static members without qualifying them with the type name. This shows an example using static methods. If you are using multiple namespaces that may have same-name classes(such as System.Random and UnityEngine.Random), you can use an alias to specify that Random comes from one or the other without having to use the entire namespace in the call."
  },
  {
    "sub_topic_id": 279,
    "sub_topic": "Using json.net",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C# Language (PDF):https://riptutorial.com/ebook/csharp."
  },
  {
    "sub_topic_id": 280,
    "sub_topic": "Using SQLite in C#",
    "title": "Remarks",
    "description": "First of all we need to add SQLite support to our application. There are two ways of doing that Download DLL suiting your system from SQLite download page and then add to the project manually Add SQLite dependency via NuGet We'll do it the second way First open the NuGet menu. Note: Setting FailIfMissing to true creates the file data.db if missing. However, the file will be empty. So, any required tables have to be recreated."
  },
  {
    "sub_topic_id": 281,
    "sub_topic": "Using Statement",
    "title": "Remarks",
    "description": "Provides a convenient syntax that ensures the correct use of IDisposable objects. Syntax: using (disposable) { } The object in the using statement must implement the IDisposable interface. using(var obj = new MyObject()) { } class MyObject : IDisposable { public void Dispose() { // Cleanup } } More complete examples for IDisposable implementation can be found at the MSDN docs. If you have code (a routine) you want to execute under a specific (constraint) context, you can use dependency injection. The following example shows the constraint of executing under an open SSL connection. This first part would be in your library or framework, which you won't expose to the client code."
  },
  {
    "sub_topic_id": 282821,
    "sub_topic": "Value type vs Reference type",
    "title": "Remarks",
    "description": "Value types: Value types are the simpler of the two. Value types are often used to represent data itself. An integer, a Boolean or a point in 3D space are all examples of good value types. Value types (structs) are declared by using the struct keyword. See the syntax section for an example of how to declare a new struct. Generally speaking, We have 2 keywords that are used to declare value types: Structs; Enumerations; Reference types; Reference types are slightly more complex. Reference types are traditional objects in the sense of Object Oriented Programming. So, they support inheritance (and the benefits there of) and also support finalizers. In C# generally we have this reference types: Classes; Delegates; Interfaces. New reference types (classes) are declared using the class keyword. For an example, see the syntax section for how to declare a new reference type."
  },
  {
    "sub_topic_id": 283,
    "sub_topic": "Verbatim Strings",
    "title": "Remarks",
    "description": "Syntax: @'verbatim strings are strings whose contents are not escaped, so in this case \n does not represent the newline character but two individual characters: \\ and n. Verbatim strings are created prefixing the string contents with the @ character' @'To escape quotation marks, \"\"double quotation marks'are used.' To concatenate string literals, use the @ symbol at the beginning of each string. var combinedString = @'\t means a tab\" + @ \" and \\\n means a newline'. In a normal string, the backslash character is the escape character, which instructs the compiler to look at the next character(s) to determine the actual character in the string. (Full list of character escapes) In verbatim strings, there are no character escapes (except for '' which is turned into a '). To use a verbatim string, just prepend a @ before the starting quotes."
  },
  {
    "sub_topic_id": 284,
    "sub_topic": "Windows Communication Foundation",
    "title": "Remarks",
    "description": "Windows Communication Foundation (WCF) is a framework for building service-oriented applications. Using WCF, you can send data as asynchronous messages from one service endpoint to another. A service endpoint can be part of a continuously available service hosted by IIS, or it can be a service hosted in an application. The messages can be as simple as a single character or word sent as XML, or as complex as a stream of binary data."
  },
  {
    "sub_topic_id": 285,
    "sub_topic": "XDocument and the System.Xml.Linq namespace",
    "title": "Remarks",
    "description": "To modify an XML file with XDocument, you load the file into a variable of type XDocument, modify it in memory, then save it, overwriting the original file. A common mistake is to modify the XML in memory and expect the file on disk to change. You want to modify the Banana's color to brown: We need to know the path to the file on disk. One overload of XDocument.Load receives a URI (file path). Since the xml file uses a namespace, we must query with the namespace AND element name. A Linq query utilizing C# 6 syntax to accommodate for the possibility of null values. Every . used in this query has the potential to return a null set if the condition finds no elements. Before C# 6 you would do this in multiple steps, checking for null along the way. The result is the <Fruit> element that contains the Banana. Actually an IEnumerable<XElement>, which is why the next step uses FirstOfDefault(). Now we extract the FruitColor element out of the Fruit element we just found. Here we assume there is just one, or we only care about the first one. If it is not null, we set the FruitColor to 'Brown'. Finally, we save the XDocument, overwriting the original file on disk."
  },
  {
    "sub_topic_id": 286,
    "sub_topic": "XML Documentation Comments",
    "title": "Remarks",
    "description": "Some times you need to create extended text documentation from you xml comments. Unfortunatly there is no standard way for it. But there are some separate projects that you can use for this case: Sandcastle; Docu; NDoc; DocFX. To generate an XML documentation file from documentation comments in the code, use the /doc option with the csc.exe C# compiler. When you build the project, an XML file will be produced by the compiler with a name corresponding to the project name (e.g. XMLDocumentation.dll -> XMLDocumentation.xml). When you use the assembly in another project, make sure that the XML file is in the same directory as the DLL being referenced."
  },
  {
    "sub_topic_id": 287,
    "sub_topic": "XmlDocument and the System.Xml namespace",
    "title": "Remarks",
    "description": "There are several ways interact with an Xml file. Xml Document; XDocument; XmlReader/XmlWriter; Before LINQ to XML we were used XMLDocument for manipulations in XML like adding attributes, elements and so on. Now LINQ to XML uses XDocument for the same kind of thing. Syntaxes are much easier than XMLDocument and it requires a minimal amount of code. Also XDocument is mutch faster as XmlDocument. XmlDoucument is an old and dirty solution for query an XML document."
  },
  {
    "sub_topic_id": 288,
    "sub_topic": "Yield Keyword",
    "title": "Remarks",
    "description": "When you use the yield keyword in a statement, you indicate that the method, operator, or get accessor in which it appears is an iterator. Using yield to define an iterator removes the need for an explicit extra class (the class that holds the state for an enumeration) when you implement the IEnumerable and IEnumerator pattern for a custom collection type. Putting the yield keyword in a method with the return type of IEnumerable, IEnumerable<T>, IEnumerator, or IEnumerator<T> tells the compiler to generate an implementation of the return type (IEnumerable or IEnumerator) that, when looped over, runs the method up to each 'yield' to get each result. The yield keyword is useful when you want to return 'the next' element of a theoretically unlimited sequence, so calculating the entire sequence beforehand would be impossible, or when calculating the complete sequence of values before returning would lead to an undesirable pause for the user. yield break can also be used to terminate the sequence at any time. As the yield keyword requires an iterator interface type as the return type, such as IEnumerable<T>, you cannot use this in an async method as this returns a Task<IEnumerable<T>> object."
  },
  {
    "sub_topic_id": 289,
    "sub_topic": "Getting started with C++",
    "title": "Remarks",
    "description": "The 'Hello World' program is a common example that can be simply used to check compiler and library presence. It uses the C++ standard library, with std::cout from <iostream>, and has only one file to compile, minimizing the chance of possible user error during compilation. The process for compiling a C++ program inherently differs between compilers and operating systems. The topic Compiling and Building contains the details about how to compile C++ code on different platforms for a variety of compilers."
  },
  {
    "sub_topic_id": 290,
    "sub_topic": "Alignment",
    "title": "Remarks",
    "description": "The standard guarantees the following: The alignment requirement of a type is a divisor of its size. For example, a class with size 16 bytes could have an alignment of 1, 2, 4, 8, or 16, but not 32. (If a class's members only total 14 bytes in size, but the class needs to have an alignment requirement of 8, the compiler will insert 2 padding bytes to make the class's size equal to 16.) The signed and unsigned versions of an integer type have the same alignment requirement. A pointer to void has the same alignment requirement as a pointer to char. The cv-qualified and cv-unqualified versions of a type have the same alignment requirement. Note that while alignment exists in C++03, it was not until C++11 that it became possible to query alignment (using alignof) and control alignment (using alignas)."
  },
  {
    "sub_topic_id": 291,
    "sub_topic": "Argument Dependent Name Lookup",
    "title": "Remarks",
    "description": "Functions are found by first collecting a set of 'associated classes' and 'associated namespaces' that include one ore more of the following, depending on the argument type T. First, let us show the rules for classes, enumeration and class template specialization names. If T is a nested class, member enumeration, then the surrounding class of it. If T is an enumeration (it may also be a class member!), the innermost namespace of it. If T is a class (it may also be nested!), all its base classes and the class itself. The innermost namespace of all associated classes. If T is a ClassTemplate<TemplateArguments> (this is also a class!), the classes and namespaces associated with the template type arguments, the namespace of any template template argument and the surrounding class of any template template argument, if a template argument is a member template. Now there are a few rules for builtin types as well If T is a pointer to U or array of U, the classes and namespaces associated with U. Example: void (*fptr)(A); f(fptr);, includes the namespaces and classes associated with void(A) (see next rule). If T is a function type, the classes and namespaces associated with parameter and return types. Example: void(A) would includes the namespaces and classes associated with A. If T is a pointer to member, the classes and namespaces associated with the member type (may apply to both pointer to member functions and pointer to data member!). Example: B A::*p; void (A::*pf)(B); f(p); f(pf); includes the namespaces and classes associated with A, B, void(B) (which applies bullet above for function types)."
  },
  {
    "sub_topic_id": 292,
    "sub_topic": "Arithmitic Metaprogramming",
    "title": "Remarks",
    "description": "These are example of using C++ template metaprogramming in processing arithmitic operations in compile time. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 293,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "Arrays are elements of the same type placed in adjoining memory locations. The elements can be individually referenced by a unique identifier with an added index. This allows you to declare multiple variable values of a specific type and access them individually without needing to declare a variable for each value. An array is just a block of sequential memory locations for a specific type of variable. Arrays are allocated the same way as normal variables, but with square brackets appended to its name [] that contain the number of elements that fit into the array memory. The following example of an array uses the typ int, the variable name arrayOfInts, and the number of elements [5] that the array has space for. The array allocated here has indeterminate values, but it can be zero-initialized by just adding an empty parenthesis (), like this: new int[n](). More generally, for arbitrary item type, this performs a value-initialization. As part of a function down in a call hierarchy this code would not be exception safe, since an exception before the delete[] expression (and after the new[]) would cause a memory leak. One way to address that issue is to automate the cleanup via e.g. a std::unique_ptr smart pointer. But a generally better way to address it is to just use a std::vector: that's what std::vector is there for."
  },
  {
    "sub_topic_id": 294,
    "sub_topic": "Atomic Types",
    "title": "Remarks",
    "description": "std::atomic allows atomic access to a TriviallyCopyable type, it is implementation-dependent if this is done via atomic operations or by using locks. The only guaranteed lock-free atomic type is std::atomic_flag. Syntax: std::atomic<T>; std::atomic_flag. An atomic type can be used to safely read and write to a memory location shared between two threads."
  },
  {
    "sub_topic_id": 295,
    "sub_topic": "Attributes",
    "title": "Remarks",
    "description": "C++14 introduced a standard way of deprecating functions via attributes. [[deprecated]] can be used to indicate that a function is deprecated. [[deprecated('reason')]] allows adding a specific reason which can be shown by the compiler. This attribute may be applied to: the declaration of a class; a typedef-name; a variable; a non-static data member; a function; an enumeration; a template specialization. Whenever a case is ended in a switch, the code of the next case will get executed. This last one can be prevented by using the ´break` statement. As this so-called fallthrough behavior can introduce bugs when not intended, several compilers and static analyzers give a warning on this. From C++17 on, a standard attribute was introduced to indicate that the warning is not needed when the code is meant to fall through. Compilers can safely give warnings when a case is ended without break or [[fallthrough]] and has at least one statement."
  },
  {
    "sub_topic_id": 296,
    "sub_topic": "auto",
    "title": "Remarks",
    "description": "The keyword auto is a typename that represents an automatically-deduced type. It was already a reserved keyword in C++98, inherited from C. In old versions of C++, it could be used to explicitly state that a variable has automatic storage duration: int main() {auto int i = 5; // removing auto has no effect} That old meaning is now removed."
  },
  {
    "sub_topic_id": 297,
    "sub_topic": "Basic input/output in c++",
    "title": "Remarks",
    "description": "he standard library <iostream> defines few streams for input and output. cout here takes the string to be displayed and inserts it to standard output or monitor All four streams are located in standard namespace std so we need to print std::stream for stream stream to use it. There is also a manipulator std::endl in code. It can be used only with output streams. It inserts end of line '\n' character in the stream and flushes it. It causes immediately producing output."
  },
  {
    "sub_topic_id": 298,
    "sub_topic": "Basic Type Keywords",
    "title": "Remarks",
    "description": "Keywords: bool; char; char16_t; char32_t; double; float; int; long; short; void; wchar_t. An integer type large enough to represent all characters of the largest supported extended character set, also known as the wide-character set. (It is not portable to make the assumption that wchar_t uses any particular encoding, such as UTF-16.) It is normally used when you need to store characters over ASCII 255 , as it has a greater size than the character type char."
  },
  {
    "sub_topic_id": 299,
    "sub_topic": "Bit fields",
    "title": "Remarks",
    "description": "Bit fields tightly pack C and C++ structures to reduce size. This appears painless: specify the number of bits for members, and compiler does the work of co-mingling bits. The restriction is inability to take the address of a bit field member, since it is stored co-mingled. sizeof() is also disallowed. The cost of bit fields is slower access, as memory must be retrieved and bitwise operations applied to extract or modify member values. These operations also add to executable size."
  },
  {
    "sub_topic_id": 300,
    "sub_topic": "Bit Manipulation",
    "title": "Remarks",
    "description": "In order to use std::bitset you will have to include <bitset> header. #include <bitset> std::bitset overloads all of the operator functions to allow the same usage as the c-style handling of bitsets. One of several applications of bit manipulation is converting a letter from small to capital or vice versa by choosing a mask and a proper bit operation. For example, the a letter has this binary representation 01(1)00001 while its capital counterpart has 01(0)00001. They differ solely in the bit in parenthesis. In this case, converting the a letter from small to capital is basically setting the bit in parenthesis to one."
  },
  {
    "sub_topic_id": 301,
    "sub_topic": "Bit Operators",
    "title": "Remarks",
    "description": "Bit shift operations are not portable across all processor architectures, different processors can have different bit-widths. In other words, if you wrote int a = ~0; int b = a << 1; This value would be different on a 64 bit machine vs. on a 32 bit machine, or from an x86 based processor to a PIC based processor. Endian-ness does not need to be taken into account for the bit wise operations themselves, that is, the right shift (>>) will shift the bits towards the least significant bit and an XOR will perform an exclusive or on the bits. Endian-ness only needs to be taken into account with the data itself, that is, if endian-ness is a concern for your application, it's a concern regardless of bit wise operations."
  },
  {
    "sub_topic_id": 302,
    "sub_topic": "Build Systems",
    "title": "Remarks",
    "description": "C++, like C, has a long and varied history regarding compilation workflows and build processes. Today, C++ has various popular build systems that are used to compile programs, sometimes for multiple platforms within one build system. Here, a few build systems will be reviewed and analyzed. Currently, there exists no universal or dominant build system for C++ that is both popular and cross-platform. However, there do exist several major build systems that are attached to major platforms/projects, the most notable being GNU Make with the GNU/Linux operating system and NMAKE with the Visual C++/Visual Studio project system. Additionally, some Integrated Development Environments (IDEs) also include specialized build systems to be used specifically with the native IDE. Certain build system generators can generate these native IDE build system/project formats, such as CMake for Eclipse and Microsoft Visual Studio 2012."
  },
  {
    "sub_topic_id": 303,
    "sub_topic": "C incompatibilities",
    "title": "Remarks",
    "description": "This describes what C code will break in a C++ compiler. The first example are keywords that have a special purpose in C++: the following is legal in C, but not C++. int class = 5 These errors are easy to fix: just rename the variable. In C, pointers can be cast to a void*, which needs an explicit cast in C++. The following is illegal in C++, but legal in C:  void* ptr; int* intptr = ptr; Adding an explicit cast makes this work, but can cause further issues."
  },
  {
    "sub_topic_id": 304,
    "sub_topic": "C++ Containers",
    "title": "Remarks",
    "description": "C++ containers store a collection of elements. Containers include vectors, lists, maps, etc. Using Templates, C++ containers contain collections of primitives (e.g. ints) or custom classes (e.g. MyClass). Choosing which C++ Container to use can be tricky, so here's a simple flowchart to help decide which Container is right for the job. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 305,
    "sub_topic": "C++ Debugging and Debug-prevention Tools & Techniques",
    "title": "Remarks",
    "description": "A lot of time from C++ developers is spent debugging. This topic is meant to assist with this task and give inspiration for techniques. Don't expect an extensive list of issues and solutions fixed by the tools or a manual on the mentioned tools. This topic ain't complete yet, examples on following techniques/tools would be useful: Mention more static analysis tools; Binary instrumentation tools (like UBSan, TSan, MSan, ESan ; ..); Hardening (CFI ...); Fuzzing."
  },
  {
    "sub_topic_id": 306,
    "sub_topic": "C++ function 'call by value' vs. 'call by reference'",
    "title": "Remarks",
    "description": "The scope of this section is to explain the differences in theory and implementation for what happens with the parameters of a function upon calling. In detail the parameters can be seen as variables before the function call and inside the function, where the visible behaviour and accessibility to these variables differs with the method used to hand them over. Additionally, the reusability of variables and their respective values after the function call also is explained by this topic."
  },
  {
    "sub_topic_id": 307,
    "sub_topic": "C++ Streams",
    "title": "Remarks",
    "description": "Default constructor of std::istream_iterator constructs an iterator which represents the end of the stream. Thus, std::copy(std::istream_iterator<int>(ifs), std::istream_iterator<int>(), .... means to copy from the current position in ifs to the end. std::ostringstream is a class whose objects look like an output stream (that is, you can write to them via operator<<), but actually store the writing results, and provide them in the form of a stream."
  },
  {
    "sub_topic_id": 308,
    "sub_topic": "C++11 Memory Model",
    "title": "Remarks",
    "description": "Different threads trying to access the same memory location participate in a data race if at least one of the operations is a modification (also known as store operation). These data races cause undefined behavior. To avoid them one needs to prevent these threads from concurrently executing such conflicting operations. Synchronization primitives (mutex, critical section and the like) can guard such accesses. The Memory Model introduced in C++11 defines two new portable ways to synchronize access to memory in multi-threaded environment: atomic operations and fences. Atomic Operations : It is now possible to read and write to given memory location by the use of atomic load and atomic store operations. For convenience these are wrapped in the std::atomic<t> template class. This class wraps a value of type t but this time loads and stores to the object are atomic. The template is not available for all types. Which types are available is implementation specific, but this usually includes most (or all) available integral types as well as pointer types. So that std::atomic<unsigned> and std::atomic<std::vector<foo> *> should be available, while std::atomic<std::pair<bool,char>> most probably wont be."
  },
  {
    "sub_topic_id": 309,
    "sub_topic": "Callable Objects",
    "title": "Remarks",
    "description": "Callable objects are the collection of all C++ structures which can be used as a function. In practice, this are all things you can pass to the C++17 STL function invoke() or which can be used in the constructor of std::function, this includes: Function pointers, Classes with operator(), Classes with implicit conversions, References to functions, Pointers to member functions, Pointers to member data, lambdas. The callable objects are used in many STL algorithms as predicate. A very useful talk by Stephan T. Lavavej (<functional>: What's New, And Proper Use) (Slides) leads to the base of this documentation."
  },
  {
    "sub_topic_id": 310,
    "sub_topic": "Classes/Structures",
    "title": "Remarks",
    "description": "Note that the only difference between the struct and class keywords is that by default, the member variables, member functions, and base classes of a struct are public, while in a class they are private. C++ programmers tend to call it a class if it has constructors and destructors, and the ability to enforce its own invariants; or a struct if it's just a simple collection of values, but the C++ language itself makes no distinction. Syntax: variable.member_var = constant; variable.member_function(); variable_pointer->member_var = constant; variable_pointer->member_function()."
  },
  {
    "sub_topic_id": 311,
    "sub_topic": "Client server examples",
    "title": "Remarks",
    "description": "Let me start by saying you should first visit Beej's Guide to Network Programming and give it a quick read, which explains most of this stuff a bit more verbosely. We'll be creating a simple TCP server here which will say 'Hello World' to all incoming connections and then close them. Another thing to note is, the server will be communicating to clients iteratively, which means one client at a time. Make sure to check out relevant man pages as they might contain valuable information about each function call and socket structures. This program is complimentary to Hello TCP Server program, you can run either of them to check the validity of each other. The program flow is quite common with Hello TCP server, so make sure to take a look at that too."
  },
  {
    "sub_topic_id": 312,
    "sub_topic": "Common compile/linker errors (GCC)",
    "title": "Remarks",
    "description": "This linker error happens, if the linker can't find a used symbol. Most of the time, this happens if a used library is not linked against. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 313,
    "sub_topic": "Compiling and Building",
    "title": "Remarks",
    "description": "Programs written in C++ need to be compiled before they can be run. There is a large variety of compilers available depending on your operating system. Most operating systems ship without a compiler, and they have to be installed later. Some common compilers choices are: GCC, the GNU Compiler Collection g++; clang: a C language family frontend for LLVM clang++; MSVC, Microsoft Visual C++ (included in Visual Studio) visual-c++; C++Builder, Embarcadero C++Builder (included in RAD Studio) c++builder; Please consult the appropriate compiler manual, on how to compile a C++ program. Another option to use a specific compiler with its own specific build system, it is possible to let generic build systems configure the project for a specific compiler or for the default installed one."
  },
  {
    "sub_topic_id": 314,
    "sub_topic": "Concurrency With OpenMP",
    "title": "Remarks",
    "description": "his topic covers the basics of concurrency in C++ using OpenMP. OpenMP is documented in more detail in the OpenMP tag. Parallelism or concurrency implies the execution of code at the same time. OpenMP does not require any special headers or libraries as it is a built-in compiler feature. However, if you use any OpenMP API functions such as omp_get_thread_num(), you will need to include omp.h and its library. OpenMP pragma statements are ignored when the OpenMP option is not enabled during compilation. You may want to refer to the compiler option in your compiler's manual. GCC uses -fopenmp; Clang uses -fopenmp; MSVC uses /openmp."
  },
  {
    "sub_topic_id": 315,
    "sub_topic": "Const Correctness",
    "title": "Remarks",
    "description": "const correctness is a very useful troubleshooting tool, as it allows the programmer to quickly determine which functions might be inadvertently modifying code. It also prevents unintentional errors, such as the one shown in Const Correct Function Parameters, from compiling properly and going unnoticed. It is much easier to design a class for const correctness, than it is to later add const correctness to a pre-existing class. If possible, design any class that can be const correct so that it is const correct, to save yourself and others the hassle of later modifying it. Note that this can also be applied to volatile correctness if necessary, with the same rules as for const correctness, but this is used much less often."
  },
  {
    "sub_topic_id": 316,
    "sub_topic": "const keyword",
    "title": "Remarks",
    "description": "A variable marked as const cannot1 be changed. Attempting to call any non-const operations on it will result in a compiler error. Syntax: const Type myVariable = initial; // Declares a const variable; cannot be changed; const Type &myReference = myVariable; // Declares a reference to a const variable; const Type *myPointer = &myVariable; // Declares a pointer-to-const. The pointer can change, but the underlying data member cannot be changed through the pointer; Type * const myPointer = &myVariable; // Declares a const pointer. The pointer cannot be reassigned to point to something else, but the underlying data member can be changed; const Type * const myPointer = &myVariable; // Declares a const pointer-to-const."
  },
  {
    "sub_topic_id": 317,
    "sub_topic": "Constant class member functions",
    "title": "Remarks",
    "description": "What does 'const member functions' of a class really means. The simple definition seems to be that, a const member function cannot change the object. But what does 'can not change' really means here. It simply means that you cannot do an assignment for class data members. However, you can do other indirect operations like inserting an entry into a map as shown in the example. Allowing this might look like this const function is modifying the object (yes, it does in one sense), but it is allowed. So, the real meaning is that a const member function cannot do an assignment for the class data variables. But it can do other stuff like explained in the example."
  },
  {
    "sub_topic_id": 318,
    "sub_topic": "constexpr",
    "title": "Remarks",
    "description": "The constexpr keyword was added in C++11 but for a few years since the C++11 standard was published, not all major compilers supported it. at the time that the C++11 standard was published. As of the time of publication of C++14, all major compilers support constexpr. constexpr is a keyword that can be used to mark a variable's value as a constant expression, a function as potentially usable in constant expressions, or (since C++17) an if statement as having only one of its branches selected to be compiled."
  },
  {
    "sub_topic_id": 319,
    "sub_topic": "Copy Elision",
    "title": "Remarks",
    "description": "There are places in the standard where an object is copied or moved in order to initialize an object. Copy elision (sometimes called return value optimization) is an optimization whereby, under certain specific circumstances, a compiler is permitted to avoid the copy or move even though the standard says that it must happen. Consider the following function: std::string get_string() { return std::string(\"am a string.\"); } According to the strict wording of the standard, this function will initialize a temporary std::string, then copy/move that into the return value object, then destroy the temporary. The standard is very clear that this is how the code is interpreted. Copy elision is a rule that permits a C++ compiler to ignore the creation of the temporary and its subsequent copy/destruction. That is, the compiler can take the initializing expression for the temporary and initialize the function's return value from it directly. This obviously saves performance."
  },
  {
    "sub_topic_id": 320,
    "sub_topic": "Copying vs Assignment",
    "title": "Remarks",
    "description": "Syntax: Copy Constructor; MyClass( const MyClass& other ); MyClass( MyClass& other ); MyClass( volatile const MyClass& other ); MyClass( volatile MyClass& other ); Assignment ; onstructor; MyClass& operator=( const MyClass& rhs ); MyClass& operator=( MyClass& rhs ); MyClass& operator=( MyClass rhs ); const MyClass& operator=( const MyClass& rhs );  const MyClass& operator=( MyClass& rhs ); const MyClass& operator=( MyClass rhs ); MyClass operator=( const MyClass& rhs ); MyClass operator=( MyClass& rhs ); MyClass operator=( MyClass rhs );"
  },
  {
    "sub_topic_id": 321,
    "sub_topic": "Curiously Recurring Template Pattern (CRTP)",
    "title": "Remarks",
    "description": "A pattern in which a class inherits from a class template with itself as one of its template parameters. CRTP is usually used to provide static polymorphism in C++. CRTP is a powerful, static alternative to virtual functions and traditional inheritance that can be used to give types properties at compile time. It works by having a base class template which takes, as one of its template parameters, the derived class. This permits it to legally perform a static_cast of its this pointer to the derived class. Of course, this also means that a CRTP class must always be used as the base class of some other class. And the derived class must pass itself to the base class. C++14 Let's say you have a set of containers that all support the functions begin() and end(). The standard library's requirements for containers require more functionality. We can design a CRTP base class that provides that functionality, based solely on begin() and end()"
  },
  {
    "sub_topic_id": 322,
    "sub_topic": "Data Structures in C++",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 323,
    "sub_topic": "Date and time using header",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 324,
    "sub_topic": "decltype",
    "title": "Remarks",
    "description": "The keyword decltype can be used to get the type of a variable, function or an expression. Let's say we have vector: std::vector<int> intVector; And we want to declare an iterator for this vector. An obvious idea is to use auto. However, it may be needed just declare an iterator variable (and not to assign it to anything). We would do: vector<int>::iterator iter; However, with decltype it becomes easy and less error prone (if type of intVector changes). decltype(intVector)::iterator iter; Alternatively: decltype(intVector.begin()) iter; In second example, the return type of begin is used to determine the actual type, which is vector<int>::iterator. If we need a const_iterator, we just need to use cbegin: decltype(intVector.cbegin()) iter; // vector<int>::const_iterator"
  },
  {
    "sub_topic_id": 325,
    "sub_topic": "Design pattern implementation in C++",
    "title": "Remarks",
    "description": "On this page, you can find examples of how design patterns are implemented in C++. For the details on these patterns, you can check out the design patterns documentation. A design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. Convert the interface of a class into another interface clients expect. Adapter (or Wrapper) lets classes work together that couldn't otherwise because of incompatible interfaces. Adapter pattern's motivation is that we can reuse existing software if we can modify the interface.  Adapter pattern relies on object composition. Client calls operation on Adapter object. Adapter calls Adaptee to carry out the operation. In STL, stack adapted from vector: When stack executes push(), underlying vector does vector::push_back()."
  },
  {
    "sub_topic_id": 326,
    "sub_topic": "Digit separators",
    "title": "Remarks",
    "description": "Numeric literals of more than a few digits are hard to read.  Pronounce 7237498123. Compare 237498123 with 237499123 for equality. Decide whether 237499123 or 20249472 is larger. C++14 define Simple Quotation Mark ' as a digit separator, in numbers and user-defined literals. This can make it easier for human readers to parse large numbers. C++14 long long decn = 1'000'000'000ll; long long hexn = 0xFFFF'FFFFll;  long long octn = 00'23'00ll; long long binn = 0b1010'0011ll; Single quotes mark are ignored when determining its value."
  },
  {
    "sub_topic_id": 327,
    "sub_topic": "Enumeration",
    "title": "Remarks",
    "description": "Standard enumerations allow users to declare a useful name for a set of integers. The names are collectively referred to as enumerators. An enumeration and its associated enumerators are defined as follows:  enum myEnum { enumName1, enumName2,}; An enumeration is a type, one which is distinct from all other types. In this case, the name of this type is myEnum. Objects of this type are expected to assume the value of an enumerator within the enumeration. The enumerators declared within the enumeration are constant values of the type of the enumeration. Though the enumerators are declared within the type, the scope operator :: is not needed to access the name. So the name of the first enumerator is enumName1. C++11 The scope operator can be optionally used to access an enumerator within an enumeration. So enumName1 can also be spelled myEnum::enumName1. Enumerators are assigned integer values starting from 0 and increasing by 1 for each enumerator in an enumeration. So in the above case, enumName1 has the value 0, while enumName2 has the value 1. Enumerators can also be assigned a specific value by the user; this value must be an integral constant expression. Enumerators who's values are not explicitly provided will have their value set to the value of the previous enumerator + 1."
  },
  {
    "sub_topic_id": 328,
    "sub_topic": "Exceptions",
    "title": "Remarks",
    "description": "If you are sure that you are not going to do anything to change the exception (like add information or modify the message), catching by const reference allows the compiler to make optimizations and can improve performance. But this can still cause object splicing (as seen in the example above). Warning: Beware of throwing unintended exceptions in catch blocks, especially related to allocating extra memory or resources. For example, constructing logic_error, runtime_error or their subclasses might throw bad_alloc due to memory running out when copying the exception string, I/O streams might throw during logging with respective exception masks set, etc."
  },
  {
    "sub_topic_id": 329,
    "sub_topic": "Explicit type conversions",
    "title": "Remarks",
    "description": "An expression can be explicitly converted or cast to type T using dynamic_cast<T>, static_cast<T>, reinterpret_cast<T>, or const_cast<T>, depending on what type of cast is intended. C++ also supports function-style cast notation, T(expr), and C-style cast notation, (T)expr. All six cast notations have one thing in common: Casting to an lvalue reference type, as in dynamic_cast<Derived&>(base), yields an lvalue. Therefore, when you want to do something with the same object but treat it as a different type, you would cast to an lvalue reference type. Casting to an rvalue reference type, as in static_cast<string&&>(s), yields an rvalue. Casting to a non-reference type, as in (int)x, yields a prvalue, which may be thought of as a copy of the value being cast, but with a different type from the original. The reinterpret_cast keyword is responsible for performing two different kinds of 'unsafe' conversions: The 'type punning' conversions, which can be used to access memory of one type as though it is of a different type. Conversions between integer types and pointer types, in either direction. The static_cast keyword can perform a variety of different conversions: Base to derived conversions. Any conversion that can be done by a direct initialization, including both implicit conversions and conversions that call an explicit constructor or conversion function. See here and here for more details."
  },
  {
    "sub_topic_id": 330,
    "sub_topic": "Expression templates",
    "title": "Remarks",
    "description": "An expression template is a compile-time optimization technique used mostly in scientific computing. It's main purpose is to avoid unnecessary temporaries and optimize loop calculations using a single pass (typically when performing operations on numerical aggregates). Expression templates were initially devised in order to circumvent the inefficiencies of naïve operator overloading when implementing numerical Array or Matrix types. An equivalent terminology for expression templates has been introduced by Bjarne Stroustrup, who calls them 'fused operations' in the latest version of his book, 'The C++ Programming Language'."
  },
  {
    "sub_topic_id": 331,
    "sub_topic": "File I/O",
    "title": "Remarks",
    "description": "C++ file I/O is done via streams. The key abstractions are: std::istream for reading text. std::ostream for writing text. std::streambuf for reading or writing characters. Formatted input uses operator>>. Formatted output uses operator<<. Streams use std::locale, e.g., for details of the formatting and for translation between external encodings and the internal encoding."
  },
  {
    "sub_topic_id": 332,
    "sub_topic": "Floating Point Arithmetic",
    "title": "Remarks",
    "description": "The first mistake that nearly every single programmer makes is presuming that this code will work as intended: float total = 0; For(float a = 0; a != 2; a += 0.01f) {total += a;} The novice programmer assumes that this will sum up every single number in the range 0, 0.01, 0.02, 0.03, ..., 1.97, 1.98, 1.99, to yield the result 199—the mathematically correct answer. Two things happen that make this untrue: The program as written never concludes. a never becomes equal to 2, and the loop never terminates. If we rewrite the loop logic to check a < 2 instead, the loop terminates, but the total ends up being something different from 199. On IEEE754-compliant machines, it will often sum up to about 201 instead. The reason that this happens is that Floating Point Numbers represent Approximations of their assigned values."
  },
  {
    "sub_topic_id": 333,
    "sub_topic": "Flow Control",
    "title": "Remarks",
    "description": "Introduces a case label of a switch statement. The operand must be a constant expression and match the switch condition in type. When the switch statement is executed, it will jump to the case label with operand equal to the condition, if any. The catch keyword introduces an exception handler, that is, a block into which control will be transferred when an exception of compatible type is thrown. The catch keyword is followed by a parenthesized exception declaration, which is similar in form to a function parameter declaration: the parameter name may be omitted, and the ellipsis ... is allowed, which matches any type. The exception handler will only handle the exception if its declaration is compatible with the type of the exception. For more details, see catching exceptions. In a switch statement, introduces a label that will be jumped to if the condition's value is not equal to any of the case labels' values."
  },
  {
    "sub_topic_id": 334,
    "sub_topic": "Fold Expressions",
    "title": "Remarks",
    "description": "Binary folds are basically unary folds, with an extra argument.  There are 2 kinds of binary folds:  Binary Left Fold - (value op ... op pack) - Expands as follows: (((Value op Pack1) op Pack2) op ...) op PackN Binary Right Fold (pack op ... op value) - Expands as follows: Pack1 op (... op (Pack(N-1) op (PackN op Value))). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 335,
    "sub_topic": "Friend keyword",
    "title": "Remarks",
    "description": "Well-designed classes encapsulate their functionality, hiding their implementation while providing a clean, documented interface. This allows redesign or change so long as the interface is unchanged. In a more complex scenario, multiple classes that rely on each others' implementation details may be required. Friend classes and functions allow these peers access to each others' details, without compromising the encapsulation and information hiding of the documented interface."
  },
  {
    "sub_topic_id": 336,
    "sub_topic": "Function Overloading",
    "title": "Remarks",
    "description": "Function overloading is having multiple functions declared in the same scope with the exact same name exist in the same place (known as scope) differing only in their signature, meaning the arguments they accept. Suppose you are writing a series of functions for generalized printing capabilities, beginning with std::stringAmbiguities can occur when one type can be implicitly converted into more than one type and there is no matching function for that specific type. For example: void foo(double, double); void foo(long, long); //Call foo with 2 ints foo(1, 2); //Function call is ambiguous - int can be converted into a double/long at the same time Related Examples"
  },
  {
    "sub_topic_id": 337,
    "sub_topic": "Function Template Overloading",
    "title": "Remarks",
    "description": "A normal function is never related to a function template, despite same name, same type.A normal function call and a generated function template call are different even if they share the same name, same return type and same argument list. A function template can be overloaded under the rules for non-template function overloading (same name, but different parameter types) and in addition to that, the overloading is valid if The return type is different, or The template parameter list is different, except for the naming of parameters and the presence of default arguments (they are not part of the signature) For a normal function, comparing two parameter types is is easy for the compiler, since it has all informat. But a type within a template may not be determined yet. Therefore, the rule for when two parameter types are equal is approximative here and says that the non-depependend types and values need to match and the spelling of dependent types and expressions needs to be the same (more precisely, they need to conform to the so-called ODR-rules), except that template parameters may be renamed. However, if under such different spellings, two values within the types are deemed different, but will always instantiate to the same values, the overloading is invalid, but no diagnostic is required from the compiler."
  },
  {
    "sub_topic_id": 338,
    "sub_topic": "Futures and Promises",
    "title": "Remarks",
    "description": "Promises and Futures are used to ferry a single object from one thread to another. A std::promise object is set by the thread which generates the result. A std::future object can be used to retrieve a value, to test to see if a value is available, or to halt execution until the value is available. If constraints for std::promise and std::future are not met an exception of type std::future_error is thrown. The error code member in the exception is of type std::future_errc and values are as below, along with some test cases."
  },
  {
    "sub_topic_id": 339,
    "sub_topic": "Header Files",
    "title": "Remarks",
    "description": "In C++, as in C, the C++ compiler and compilation process makes use of the C preprocessor. As specified by the GNU C Preprocessor manual, a header file is defined as the following: A header file is a file containing C declarations and macro definitions (see Macros) to be shared between several source files. You request the use of a header file in your program by including it, with the C preprocessing directive ‘#include’. Header files serve two purposes. System header files declare the interfaces to parts of the operating system. You include them in your program to supply the definitions and declarations you need to invoke system calls and libraries. Your own header files contain declarations for interfaces between the source files of your program. Each time you have a group of related declarations and macro definitions all or most of which are needed in several different source files, it is a good idea to create a header file for them. However, to the C preprocessor itself, a header file is no different than a source file. The header/source file organization scheme is simply a strongly-held and standard convention set by various software projects in order to provide separation between interface and implementation. Although it is not formally enforced by the C++ Standard itself, following the header/source file convention is highly recommended, and, in practice, is already almost ubiquitous. Note that header files may be replaced as a project file structure convention by the upcoming feature of modules, which is still to be considered for inclusion in a future C++ Standard as of the time of writing (e.g. C++20)."
  },
  {
    "sub_topic_id": 340,
    "sub_topic": "Implementation-defined behavior",
    "title": "Remarks",
    "description": "In C++, a byte is the space occupied by a char object. The number of bits in a byte is given by CHAR_BIT, which is defined in climits and required to be at least 8. While most modern systems have 8-bit bytes, and POSIX requires CHAR_BIT to be exactly 8, there are some systems where CHAR_BIT is greater than 8 i.e a single byte may be comprised of 8, 16, 32 or 64 bits. On XSI-conformant (X/Open System Interfaces) systems, intptr_t and uintptr_t types are required, otherwise they are optional. Within the meaning of the C standard, functions aren't objects; it isn't guaranteed by the C standard that uintptr_t can hold a function pointer. Anyway POSIX (2.12.3) conformance requires that: All function pointer types shall have the same representation as the type pointer to void. Conversion of a function pointer to void * shall not alter the representation. A void * value resulting from such a conversion can be converted back to the original function pointer type, using an explicit cast, without loss of information. C99 §7.18.1: When typedef names differing only in the absence or presence of the initial u are defined, they shall denote corresponding signed and unsigned types as described in 6.2.5; an implementation providing one of these corresponding types shall also provide the other."
  },
  {
    "sub_topic_id": 341,
    "sub_topic": "Inline functions",
    "title": "Remarks",
    "description": "Usually if code generated for a function is sufficiently small then it's a good candidate to be inlined. Why so? If a function is large and is inlined in a loop, for all the calls made, the large function's code would be duplicated leading to the generated binary size bloat. But, how small is sufficient? While inline functions seem to be great way to avoid function calling overhead, it's to be noted that not all functions that are marked inline are inlined. In other words, when you say inline, it is only a hint to the compiler, not an order: the compiler isn't obliged to inline the function, it's free to ignore it - most of them do. Modern compilers are better at making such optimisations that this keyword is now a vestige of the past, when this suggestion of function inlining by the programmer was taken seriously by the compilers. Even functions not marked inline are inlined by the compiler when it sees benefit in doing so."
  },
  {
    "sub_topic_id": 342,
    "sub_topic": "Inline variables",
    "title": "Remarks",
    "description": "An inline variable is allowed to be defined in multiple translation units without violating the One Definition Rule. If it is multiply defined, the linker will merge all definitions into a single object in the final program. A static data member of the class may be fully defined within the class definition if it is declared inline. For example, the following class may be defined in a header. Prior to C++17, it would have been necessary to provide a .cpp file to contain the definition of Foo::num_instances so that it would be defined only once, but in C++17 the multiple definitions of the inline variable Foo::num_instances all refer to the same int object."
  },
  {
    "sub_topic_id": 343,
    "sub_topic": "Internationalization in C++",
    "title": "Remarks",
    "description": "The C++ language does not dictate any character-set, some compilers may support the use of UTF-8, or even UTF-16. However there is no certainty that anything beyond simple ANSI/ASCII characters will be provided. Thus all international language support is implementation defined, reliant on what platform, operating system, and compiler you may be using. Several third party libraries (such as the International Unicode Committee Library) that can be used to extend the international support of the platform."
  },
  {
    "sub_topic_id": 344,
    "sub_topic": "Iteration",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 345,
    "sub_topic": "Iterators",
    "title": "Remarks",
    "description": "Breaking It Down const int array[] = { 1, 2, 3, 4, 5 }; This line creates a new integer array with 5 values. C arrays are just pointers to memory where each value is stored together in a contiguous block. const int* first = array; const int* afterLast = first + sizeof(array) / sizeof(array[0]); These lines create two pointers. The first pointer is given the value of the array pointer, which is the address of the first element in the array. The sizeof operator when used on a C array returns the size of the array in bytes. Divided by the size of an element this gives the number of elements in the array. We can use this to find the address of the block after the array. for (const int* i = first; i < afterLast; ++i) {Here we create a pointer which we will use as an iterator. It is initialized with the address of the first element we want to iterate over, and we'll continue to iterate as long as i is less than afterLast, which means as long as i is pointing to an address within array. std::cout << *i << std::endl; Finally, within the loop we can access the value our iterator i is pointing to by dereferencing it. Here the dereference operator * returns the value at the address in i."
  },
  {
    "sub_topic_id": 346,
    "sub_topic": "Keywords",
    "title": "Remarks",
    "description": "Keywords have fixed meaning defined by the C++ standard and cannot be used as identifiers. It is illegal to redefine keywords using the preprocessor in any translation unit that includes a standard library header. However, keywords lose their special meaning inside attributes. The tokens final and override are not keywords. They may be used as identifiers and have special meaning only in certain contexts. The tokens and, and_eq, bitand, bitor, compl, not, not_eq, or, or_eq, xor, and xor_eq are alternative spellings of &&, &=, &, |, ~, !, !=, ||, |=, ^, and ^=, respectively. The standard does not treat them as keywords, but they are keywords for all intents and purposes, since it is impossible to redefine them or use them to mean anything other than the operators they represent. The following topics contain detailed explanations of many of the keywords in C++, which serve fundamental purposes such as naming basic types or controlling the flow of execution."
  },
  {
    "sub_topic_id": 347,
    "sub_topic": "Lambdas",
    "title": "Remarks",
    "description": "Syntax: [default-capture, capture-list] (argument-list) mutable throw-specification attributes -> return-type { lambda-body } // Order of lambda s pecifiers and attributes. [capture-list] (argument-list) { lambda-body } // Common lambda definition. [=] (argument-list) { lambda-body } // Captures all needed local variables by value. [&] (argument-list) { lambda-body } // Captures all needed local variables by reference. [capture-list] { lambda-body } // Argument list and specifiers can be omitted."
  },
  {
    "sub_topic_id": 348,
    "sub_topic": "Layout of object types",
    "title": "Remarks",
    "description": "Narrow character types: The unsigned char type uses all bits to represent a binary number. Therefore, for example, if unsigned char is 8 bits long, then the 256 possible bit patterns of a char object represent the 256 different values {0, 1, ..., 255}. The number 42 is guaranteed to be represented by the bit pattern 00101010. The signed char type has no padding bits, i.e., if signed char is 8 bits long, then it has 8 bits of capacity to represent a number. Note that these guarantees do not apply to types other than narrow character types. Integer types: The unsigned integer types use a pure binary system, but may contain padding bits. For example, it is possible (though unlikely) for unsigned int to be 64 bits long but only be capable of storing integers between 0 and 232 - 1, inclusive. The other 32 bits would be padding bits, which should not be written to directly. The signed integer types use a binary system with a sign bit and possibly padding bits. Values that belong to the common range of a signed integer type and the corresponding unsigned integer type have the same representation. For example, if the bit pattern 0001010010101011 of an unsigned short object represents the value 5291, then it also represents the value 5291 when interpreted as a short object. It is implementation-defined whether a two's complement, one's complement, or sign-magnitude representation is used, since all three systems satisfy the requirement in the previous paragraph. Floating point types: The value representation of floating point types is implementation-defined. Most commonly, the float and double types conform to IEEE 754 and are 32 and 64 bits long (so, for example, float would have 23 bits of precision which would follow 8 exponent bits and 1 sign bit). However, the standard does not guarantee anything. Floating point types often have 'trap representations', which cause errors when they are used in calculations."
  },
  {
    "sub_topic_id": 349,
    "sub_topic": "Linkage specifications",
    "title": "Remarks",
    "description": "A linkage specification tells the compiler to compile declarations in a way that allows them to be linked together with declarations written in another language, such as C. The standard requires all compilers to support extern \" C \" in order to allow C++ to be compatible with C, and extern \"C++ \", which may be used to override an enclosing linkage specification and restore the default. Other supported linkage specifications are implementation-defined."
  },
  {
    "sub_topic_id": 350,
    "sub_topic": "Literals",
    "title": "Remarks",
    "description": "Traditionally, a literal is an expression denoting a constant whose type and value are evident from its spelling. For example, 42 is a literal, while x is not since one must see its declaration to know its type and read previous lines of code to know its value. However, C++11 also added user-defined literals, which are not literals in the traditional sense but can be used as a shorthand for function calls."
  },
  {
    "sub_topic_id": 351,
    "sub_topic": "Loops",
    "title": "Remarks",
    "description": "A loop statement executes a group of statements repeatedly until a condition is met. There are 3 types of primitive loops in C++: for, while, and do...while. algorithm calls are generally preferable to hand-written loops. If you want something an algorithm already does (or something very similar), the algorithm call is clearer, often more efficient and less error prone. If you need a loop that does something fairly simple (but would require a confusing tangle of binders and adapters if you were using an algorithm), then just write the loop."
  },
  {
    "sub_topic_id": 352,
    "sub_topic": "Memory management",
    "title": "Remarks",
    "description": "A leading :: forces the new or delete operator to be looked up in global scope, overriding any overloaded class-specific new or delete operators. The optional arguments following the new keyword are usually used to call placement new, but can also be used to pass additional information to the allocator, such as a tag requesting that memory be allocated from a chosen pool. The type allocated is usually explicitly specified, e.g., new Foo, but can also be written as auto (since C++11) or decltype(auto) (since C++14) to deduce it from the initializer. Initialization of the object allocated occurs according to the same rules as initialization of local variables. In particular, the object will be default-initialized if the initializer iso omitted, and when dynamically allocating a scalar type or an array of scalar type, there is no guarantee that the memory will be zeroed out."
  },
  {
    "sub_topic_id": 353,
    "sub_topic": "Metaprogramming",
    "title": "Remarks",
    "description": "In C++ Metaprogramming refers to the use of macros or templates to generate code at compile-time.In general, macros are frowned upon in this role and templates are preferred, although they are not as generic. Template metaprogramming often makes use of compile-time computations, whether via templates or constexpr functions, to achieve its goals of generating code, however compile-time computations are not metaprogramming per se. Metaprogramming (or more specifically, Template Metaprogramming) is the practice of using templates to create constants, functions, or data structures at compile-time. This allows computations to be performed once at compile time rather than at each run time."
  },
  {
    "sub_topic_id": 354,
    "sub_topic": "More undefined behaviors in C++",
    "title": "Remarks",
    "description": "What is undefined behavior (UB)? According to the ISO C++ Standard (§1.3.24, N4296), it is 'behavior for which this International Standard imposes no requirements.' This means that when a program encounters UB, it is allowed to do whatever it wants. This often means a crash, but it may simply do nothing, make demons fly out of your nose, or even appear to work properly! Needless to say, you should avoid writing code that invokes UB. If a program contains undefined behavior, the C++ standard places no constraints on its behavior. It may appear to work as the developer intended, but it may also crash or produce strange results. The behavior may vary between runs of the same program. Any part of the program may malfunction, including lines that come before the line that contains undefined behavior. The implementation is not required to document the result of undefined behavior. An implementation may document the result of an operation that produces undefined behavior according to the standard, but a program that depends on such documented behavior is not portable. Why undefined behavior exists. Intuitively, undefined behavior is considered a bad thing as such errors can't be handled graciously through, say, exception handlers. But leaving some behavior undefined is actually an integral part of C++'s promise 'you don't pay for what you don't use'. Undefined behavior allows a compiler to assume the developer knows what he's doing and not introduce code to check for the mistakes highlighted in the above examples."
  },
  {
    "sub_topic_id": 355,
    "sub_topic": "Move Semantics",
    "title": "Remarks",
    "description": "Move semantics are a way of moving one object to another in C++. For this, we empty the old object and place everything it had in the new object. For this, we must understand what an rvalue reference is. An rvalue reference (T&& where T is the object type) is not much different than a normal reference (T&, now called lvalue references). But they act as 2 different types, and so, we can make constructors or functions that take one type or the other, which will be necessary when dealing with move semantics. The reason why we need two different types is to specify two different behaviors. Lvalue reference constructors are related to copying, while rvalue reference constructors are related to moving. To move an object, we will use std::move(obj). This function returns an rvalue reference to the object, so that we can steal the data from that object into a new one. There are several ways of doing this which are discussed below. Important to note is that the use of std::move creates just an rvalue reference. In other words the statement std::move(obj) does not change the content of obj, while auto obj2 = std::move(obj) (possibly) does."
  },
  {
    "sub_topic_id": 356,
    "sub_topic": "mutable keyword",
    "title": "Remarks",
    "description": "mutable modifier in this context is used to indicate that a data field of a const object may be modified without affecting the externally-visible state of the object. If you are thinking about caching a result of expensive computation, you should probably use this keyword. If you have a lock (for example, std::unique_lock) data field which is locked and unlocked inside a const method, this keyword is also what you could use. You should not use this keyword to break logical const-ness of an object."
  },
  {
    "sub_topic_id": 357,
    "sub_topic": "Mutexes",
    "title": "Remarks",
    "description": "It is better to use std::shared_mutex than std::shared_timed_mutex. The performance difference is more than double. If you want to use RWLock, you will find that there are two options. It is std::shared_mutex and shared_timed_mutex.  you may think std::shared_timed_mutex is just the version 'std::shared_mutex + time method'. But the implementation is totally different. C++1x offers a selection of mutex classes: std::mutex - offers simple locking functionality. std::timed_mutex - offers try_to_lock functionality std::recursive_mutex - allows recursive locking by the same thread. std::shared_mutex, std::shared_timed_mutex - offers shared and unique lock functionality."
  },
  {
    "sub_topic_id": 358,
    "sub_topic": "Namespaces",
    "title": "Remarks",
    "description": "Used to prevent name collisions when using multiple libraries, a namespace is a declarative prefix for functions, classes, types, etc. The keyword namespace has three different meanings depending on context: When followed by an optional name and a brace-enclosed sequence of declarations, it defines a new namespace or extends an existing namespace with those declarations. If the name is omitted, the namespace is an unnamed namespace. When followed by a name and an equal sign, it declares a namespace alias. When preceded by using and followed by a namespace name, it forms a using directive, which allows names in the given namespace to be found by unqualified name lookup (but does not redeclare those names in the current scope). A using-directive cannot occur at class scope."
  },
  {
    "sub_topic_id": 359,
    "sub_topic": "Non-Static Member Functions",
    "title": "Remarks",
    "description": "A non-static member function is a class/struct/union member function, which is called on a particular instance, and operates on said instance. Unlike static member functions, it cannot be called without specifying an instance. For information on classes, structures, and unions, please see the parent topic. A class or struct can have member functions as well as member variables. These functions have syntax mostly similar to standalone functions, and can be defined either inside or outside the class definition; if defined outside the class definition, the function's name is prefixed with the class' name and the scope (::) operator."
  },
  {
    "sub_topic_id": 360,
    "sub_topic": "One Definition Rule (ODR)",
    "title": "Remarks",
    "description": "A function declared inline may be defined in multiple translation units, provided that all definitions are identical. It also must be defined in every translation unit in which it is used. Therefore, inline functions should be defined in headers and there is no need to mention them in the implementation file. The most important consequence of the One Definition Rule is that non-inline functions with external linkage should only be defined once in a program, although they can be declared multiple times. Therefore, such functions should not be defined in headers, since a header can be included multiple times from different translation units."
  },
  {
    "sub_topic_id": 361,
    "sub_topic": "Operator Overloading",
    "title": "Remarks",
    "description": "In C++, it is possible to define operators such as + and -> for user-defined types. For example, the <string> header defines a + operator to concatenate strings. This is done by defining an operator function using the operator keyword. The operators for built-in types cannot be changed, operators can only be overloaded for user-defined types. That is, at least one of the operands has to be of a user-defined type. The following operators cannot be overloaded: The member access or \" dot \" operator . The pointer to member access operator .* The scope resolution operator, :: The ternary conditional operator, ?: dynamic_cast, static_cast, reinterpret_cast, const_cast, typeid, sizeof, alignof, and noexcept The preprocessing directives, # and ##, which are executed before any type information is available. There are some operators that you should not (99.98% of the time) overload: && and || (prefer, instead, to use implicit conversion to bool) , The address-of operator (unary &) Why? Because they overload operators that another programmer might never expect, resulting in different behavior than anticipated."
  },
  {
    "sub_topic_id": 362,
    "sub_topic": "operator precedence",
    "title": "Remarks",
    "description": "Operators are listed top to bottom, in descending precedence. Operators with the same number have equal precedence and the same associativity. The assignment, compound assignment, and ternary conditional operators are right-associative. All other binary operators are left-associative. The rules for the ternary conditional operator are a bit more complicated than simple precedence rules can express. An operand binds less tightly to a ? on its left or a : on its right than to any other operator. Effectively, the second operand of the conditional operator is parsed as though it is parenthesized. This allows an expression such as a ? b , c : d to be syntactically valid. An operand binds more tightly to a ? on its right than to an assignment operator or throw on its left, so a = b ? c : d is equivalent to a = (b ? c : d) and throw a ? b : c is equivalent to throw (a ? b : c). An operand binds more tightly to an assignment operator on its right than to : on its left, so a ? b : c = d is equivalent to a ? b : (c = d)."
  },
  {
    "sub_topic_id": 363,
    "sub_topic": "Optimization",
    "title": "Remarks",
    "description": "When compiling, the compiler will often modify the program to increase performance. This is permitted by the as-if rule, which allows any and all transformations that do not change observable behavior. The size of any object or member subobject is required to be at least 1 even if the type is an empty class type (that is, a class or struct that has no non-static data members), in order to be able to guarantee that the addresses of distinct objects of the same type are always distinct. Empty base optimization is commonly used by allocator-aware standard library classes (std::vector, std::function, std::shared_ptr, etc) to avoid occupying any additional storage for its allocator member if the allocator is stateless. This is achieved by storing one of the required data members (e.g., begin, end, or capacity pointer for the vector)."
  },
  {
    "sub_topic_id": 364,
    "sub_topic": "Optimization in C++",
    "title": "Remarks",
    "description": "C and C++ are well known as high-performance languages - largely due to the heavy amount of code customization, allowing a user to specify performance by choice of structure. When optimizing it is important to benchmark relevant code and completely understand how the code will be used. Common optimization mistakes include: Premature optimization: Complex code may perform worse after optimization, wasting time and effort. First priority should be to write correct and maintainable code, rather than optimized code. Optimization for the wrong use case: Adding overhead for the 1% might not be worth the slowdown for the other 99% Micro-optimization: Compilers do this very efficiently and micro-optimization can even hurt the compilers ability to further optimize the code"
  },
  {
    "sub_topic_id": 365,
    "sub_topic": "Overload resolution",
    "title": "Remarks",
    "description": "Overload resolution happens in several different situations Calls to named overloaded functions. The candidates are all the functions found by name lookup. Calls to class object. The candidates are usually all the overloaded function call operators of the class. Use of an operator. The candidates are the overloaded operator functions at namespace scope, the overloaded operator functions in the left class object (if any) and the built-in operators. Overload resolution to find the correct conversion operator function or constructor to invoke for an initialization For non-list direct initialization (Class c(value)), the candidates are constructors of Class. For non-list copy initialization (Class c = value) and for finding the user defined conversion function to invoke in a user defined conversion sequence. The candidates are the constructors of Class and if the source is a class object, its conversion operator functions. For initialization of a non-class from a class object (Nonclass c = classObject). The candidates are the conversion operator functions of the initializer object. For initializing a reference with a class object (R &r = classObject), when the class has conversion operator functions that yield values that can be bound directly to r. The candidates are such conversion operator functions. For list-initialization of a non-aggregate class object (Class c{1, 2, 3}), the candidates are the initializer list constructors for a first pass through overload resolution. If this doesn't find a viable candidate, a second pass through overload resolution is done, with the constructors of Class as candidates."
  },
  {
    "sub_topic_id": 366,
    "sub_topic": "Parameter packs",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 367,
    "sub_topic": "Perfect Forwarding",
    "title": "Remarks",
    "description": "Perfect forwarding requires forwarding references in order to preserve the ref-qualifiers of the arguments. Such references appear only in a deduced context. That is: template<class T> void f(T&& x) // x is a forwarding reference, because T is deduced from a call to f() { g(std::forward<T>(x)); // g() will receive an value or an rvalue, depending on x } The following does not involve perfect forwarding, because T is not deduced from the constructor call: template<class T> struct a { a(T&& x); // x is a rvalue reference, not a forwarding reference}; C++17 C++17 will allow deduction of class template arguments. The constructor of 'a' in the above example will become a user of a forwarding reference a example1(1);  // same as a<int> example1(1); int x = 1; a example2(x); // same as a<int&> example2(x);"
  },
  {
    "sub_topic_id": 368,
    "sub_topic": "Pimpl Idiom",
    "title": "Remarks",
    "description": "The pimpl idiom (pointer to implementation, sometimes referred to as opaque pointer or cheshire cat technique), reduces the compilation times of a class by moving all its private data members into a struct defined in the .cpp file. The class owns a pointer to the implementation. This way, it can be forward declared, so that the header file does not need to #include classes that are used in private member variables. When using the pimpl idiom, changing a private data member does not require recompiling classes that depend on it."
  },
  {
    "sub_topic_id": 369,
    "sub_topic": "Pointers",
    "title": "Remarks",
    "description": "A pointer is an address that refers to a location in memory. They're commonly used to allow functions or data structures to know of and modify memory without having to copy the memory referred to. Pointers are usable with both primitive (built-in) or user-defined types. Pointers make use of the 'dereference' * , 'address of' & , and 'arrow' -> operators. The '*' and '->' operators are used to access the memory being pointed at, and the & operator is used to get an address in memory."
  },
  {
    "sub_topic_id": 370,
    "sub_topic": "Pointers to members",
    "title": "Remarks",
    "description": "Syntax: Assuming a class named Class... type *ptr = &Class::member; // Point to static members only type Class::*ptr = &Class::member; // Point to non-static Class members For pointers to non-static class members, given the following two definitions: Class instance; Class *p = &instance; Pointers to Class member variables ptr = &Class::i; // Point to variable i within every Class instance.*ptr = 1; // Access instance's i p->*ptr = 1; // Access p's i Pointers to Class member functions ptr = &Class::F; // Point to function 'F' within every Class (instance.*ptr)(5); // Call instance's F (p->*ptr)(6); // Call p's F"
  },
  {
    "sub_topic_id": 371,
    "sub_topic": "Polymorphism",
    "title": "Remarks",
    "description": "The typical example is an abstract shape class, that can then be derived into squares, circles, and other concrete shapes. How to read this definition ? You can define polymorphic behavior by introduced member functions with the keyword virtual. Here get_surface() and describe_object() will obviously be implemented differently for a square than for a circle. When the function is invoked on an object, function corresponding to the real class of the object will be determined at runtime. It makes no sense to define get_surface() for an abstract shape. This is why the function is followed by = 0. This means that the function is pure virtual function. A polymorphic class should always define a virtual destructor. You may define non virtual member functions. When these function will be invoked for an object, the function will be chosen depending on the class used at compile-time. Here get_double_surface() is defined in this way. A class that contains at least one pure virtual function is an abstract class. Abstract classes cannot be instantiated. You may only have pointers or references of an abstract class type."
  },
  {
    "sub_topic_id": 372,
    "sub_topic": "Preprocessor",
    "title": "Remarks",
    "description": "The C preprocessor is a simple text parser/replacer that is run before the actual compilation of the code. Used to extend and ease the use of the C (and later C++) language, it can be used for: a. Including other files using #include b. Define a text-replacement macro using #define c. Conditional Compilation using#if #ifdef d. Platform/Compiler specific logic (as an extension of conditional compilation). Preprocessor statements are executed before your source files are handed to the compiler. They are capable of very low level conditional logic. Since preprocessor constructs (e.g. object-like macros) aren't typed like normal functions (the preprocessing step happens before compilation) the compiler cannot enforce type checks, they should therefore be carefully used."
  },
  {
    "sub_topic_id": 373,
    "sub_topic": "Profiling",
    "title": "Remarks",
    "description": "For more complex applications, flat execution profiles may be difficult to follow. This is why many profiling tools also generate some form of annotated callgraph information. gperf2dot converts text output from many profilers (Linux perf, callgrind, oprofile etc.) into a callgraph diagram. You can use it by running your profiler (example for gprof). The GNU gprof profiler, gprof, allows you to profile your code. To use it, you need to perform the following steps: Build the application with settings for generating profiling information Generate profiling information by running the built  application View the generated profiling information with gprof In order to build the application with settings for generating profiling information, we add the -pg flag. So, for example, we could use"
  },
  {
    "sub_topic_id": 374,
    "sub_topic": "RAII: Resource Acquisition Is Initialization",
    "title": "Remarks",
    "description": "RAII stands for Resource Acquisition Is Initialization. Also occasionally referred to as SBRM (Scope-Based Resource Management) or RRID (Resource Release Is Destruction), RAII is an idiom used to tie resources to object lifetime. In C++, the destructor for an object always runs when an object goes out of scope - we can take advantage of that to tie resource cleanup into object destruction. Any time you need to acquire some resource (e.g. a lock, a file handle, an allocated buffer) that you will eventually need to release, you should consider using an object to handle that resource management for you. Stack unwinding will happen regardless of exception or early scope exit, so the resource handler object will clean up the resource for you without you having to carefully consider all possible current and future code paths. It's worth noting that RAII doesn't completely free the developer of thinking about the lifetime of resources. One case is, obviously, a crash or exit() call, which will prevent destructors from being called. Since the OS will clean up process-local resources like memory after a process ends, this is not a problem in most cases. However with system resources (i.e. named pipes, lock files, shared memory) you still need facilities to deal with the case where a process didn't clean up after itself, i.e. on startup test if the lock file is there, if it is, verify the process with the pid actually exists, then act accordingly. Another situation is when a unix process calls a function from the exec-family, i.e. after a fork-exec to create a new process. Here, the child process will have a full copy of the parents memory (including the RAII objects) but once exec was called, none of the destructors will be called in that process. On the other hand, if a process is forked and neither of the processes call exec, all resources are cleaned up in both processes. This is correct only for all resources that were actually duplicated in the fork, but with system resources, both processes will only have a reference to the resource (i.e. the path to a lock file) and will both try to release it individually, potentially causing the other process to fail."
  },
  {
    "sub_topic_id": 375,
    "sub_topic": "Random number generation",
    "title": "Remarks",
    "description": "Random number generation in C++ is provided by the <random> header. This header defines random devices, pseudo-random generators and distributions. Random devices return random numbers provided by operating system. They should either be used for initialization of pseudo-random generators or directly for cryptographic purposes. Pseudo-random generators return integer pseudo-random numbers based on their initial seed. The pseudo-random number range typically spans all values of an unsigned type. All pseudo-random generators in the standard library will return the same numbers for the same initial seed for all platforms. Distributions consume random numbers from pseudo-random generators or random devices and produce random numbers with necessary distribution. Distributions are not platform-independent and can produce different numbers for the same generators with the same initial seeds on different platforms."
  },
  {
    "sub_topic_id": 376,
    "sub_topic": "Recursion in C++",
    "title": "Remarks",
    "description": "Recursive functions can get quite expensive. If they are pure functions (functions that always return the same value when called with the same arguments, and that neither depend on nor modify external state), they can be made considerably faster at the expense of memory by storing the values already calculated. Note that despite using the simple recursion formula, on first call this function is $O(n)$. On subsequent calls with the same value, it is of course $O(1)$. Note however that this implementation is not reentrant. Also, it doesn't allow to get rid of stored values. "
  },
  {
    "sub_topic_id": 377,
    "sub_topic": "Recursive Mutex",
    "title": "Remarks",
    "description": "Recursive mutex allows the same thread to recursively lock a resource - up to an unspecified limit. There are very few real-word justifications for this. Certain complex implementations might need to call an overloaded copy of a function without releasing the lock."
  },
  {
    "sub_topic_id": 378,
    "sub_topic": "Refactoring Techniques",
    "title": "Remarks",
    "description": "Refactoring refers to the modification of existing code into an improved version. Although refactoring is often done while changing code to add features or fix bugs, the term particularly refers improving code without necessarily adding features or fixing bugs. In C++ code bases which used to be C, one can find the pattern goto cleanup. As the goto command makes the workflow of a function harder to understand, this is often avoided. Often, it can be replaced by return statements, loops, functions. Though, with the goto cleanup one needs to get rid of cleanup logic."
  },
  {
    "sub_topic_id": 379,
    "sub_topic": "References",
    "title": "Remarks",
    "description": "A Reference in C++ is just an Alias or another name of a variable. Just like most of us can be referred using our passport name and nick name. References doesn't exist literally and they don't occupy any memory. If we print the address of reference variable it will print the same address as that of the variable its referring to. As we know by now that C++ References are just alias, and for an alias to be created, we need to have something which the Alias can refer to. That's the precise reason why the statement like this will throw a compiler error"
  },
  {
    "sub_topic_id": 380,
    "sub_topic": "Regular expressions",
    "title": "Remarks",
    "description": "Regular Expressions (sometimes called regexs or regexps) are a textual syntax which represents the patterns which can be matched in the strings operated upon. Regular Expressions, introduced in c++11, may optionally support a return array of matched strings or another textual syntax defining how to replace matched patterns in strings operated upon."
  },
  {
    "sub_topic_id": 381,
    "sub_topic": "Resource Management",
    "title": "Remarks",
    "description": "One of the hardest things to do in C and C++ is resource management. Thankfully, in C++, we have many ways to go about designing resource management in our programs. This article hopes to explain some of the idioms and methods used to manage allocated resources."
  },
  {
    "sub_topic_id": 382,
    "sub_topic": "Return Type Covariance",
    "title": "Remarks",
    "description": "Covariance of a parameter or a return value for a virtual member function m is where its type T gets more specific in a derived class' override of m. The type T then varies (variance) in specificity in the same way (co) as the classes providing m. C++ provides language support for covariant return types that are raw pointers or raw references – the covariance is for the pointee or referent type. The C++ support is limited to return types because function return values are the only pure out-arguments in C++, and covariance is only type safe for a pure out-argument. Otherwise calling code could supply an object of less specific type than the receiving code expects. MIT professor Barbara Liskov investigated this and related variance type safety issues, and it's now known as the Liskov Substitution Principle, or LSP. The covariance support essentially helps to avoid downcasting and dynamic type checking. Since smart pointers are of class type one cannot use the built-in support for covariance directly for smart pointer results, but one can define apparently covariant non-virtual smart pointer result wrapper functions for a covariant virtual function that produces raw pointers."
  },
  {
    "sub_topic_id": 383,
    "sub_topic": "Returning several values from a function",
    "title": "Remarks",
    "description": "There are many situations where it is useful to return several values from a function: for example, if you want to input an item and return the price and number in stock, this functionality could be useful. There are many ways to do this in C++, and most involve the STL. However, if you wish to avoid the STL for some reason, there are still several ways to do this, including structs/classes and arrays."
  },
  {
    "sub_topic_id": 384,
    "sub_topic": "RTTI: Run-Time Type Information",
    "title": "Remarks",
    "description": "Use dynamic_cast<>() as a function, which helps you to cast down through an inheritance hierarchy (main description). If you must do some non-polymorphic work on some derived classes B and C, but received the base class A. You can retrieve the implementation defined name of a type in runtime by using the .name() member function of the std::type_info object returned by typeid. The typeid keyword is a unary operator that yields run-time type information about its operand if the operand's type is a polymorphic class type. It returns an lvalue of type const std::type_info. Top-level cv-qualification are ignored."
  },
  {
    "sub_topic_id": 385,
    "sub_topic": "Scopes",
    "title": "Remarks",
    "description": "To declare a single instance of a variable which is accessible in different source files, it is possible to make it in the global scope with keyword extern. This keyword says the compiler that somewhere in the code there is a definition for this variable, so it can be used everywhere and all write/read will be done in one place of memory. The scope of a variable in a block { ... }, begins after declaration and ends at the end of the block. If there is nested block, the inner block can hide the scope of a variable which is declared in the outer block."
  },
  {
    "sub_topic_id": 386,
    "sub_topic": "Semaphore",
    "title": "Remarks",
    "description": "Semaphores are not available in C++ as of now, but can easily be implemented with a mutex and a condition variable. This example was taken from: C++0x has no semaphores? How to synchronize threads? The following function adds four threads. Three threads compete for the semaphore, which is set to a count of one. A slower thread calls notify_one(), allowing one of the waiting threads to proceed. The result is that s1 immediately starts spinning, causing the Semaphore's usage count to remain below 1. The other threads wait in turn on the condition variable until notify() is called."
  },
  {
    "sub_topic_id": 387,
    "sub_topic": "SFINAE (Substitution Failure Is Not An Error)",
    "title": "Remarks",
    "description": "SFINAE stands for Substitution Failure Is Not An Error. Ill-formed code that results from substituting types (or values) to instantiate a function template or a class template is not a hard compile error, it is only treated as a deduction failure.Deduction failures on instantiating function templates or class template specializations remove that candidate from the set of consideration - as if that failed candidate did not exist to begin with. Only substitution failures in the immediate context are considered deduction failures, all others are considered hard errors."
  },
  {
    "sub_topic_id": 388,
    "sub_topic": "Side by Side Comparisons of classic C++ examples solved via C++ vs C++11 vs C++14 vs C++17",
    "title": "Remarks",
    "description": "In C++, looping through a sequence container c can be done using indexes as follows: for(size_t i = 0; i <  c.size(); ++i) c[i] = 0; While simple, such writings are subject to common semantic errors, like wrong comparison operator, or wrong indexing variable: for(size_t i = 0; i <= c.size(); ++j) c[i] = 0; ^~~~~~~~~~~~~~^ Looping can also be achieved for all containers using iterators, with similar drawbacks: for(iterator it = c.begin(); it != c.end(); ++it) (*it) = 0; C++11 introduced range-based for loops and auto keyword, allowing the code to become: for(auto& x : c) x = 0; Here the only parameters are the container c, and a variable x to hold the current value. This prevents the semantics errors previously pointed. According to the C++11 standard, the underlying implementation is equivalent to: for(auto begin = c.begin(), end = c.end(); begin != end; ++begin) { // ...} In such implementation, the expression auto begin = c.begin(), end = c.end(); forces begin and end to be of the same type, while end is never incremented, nor dereferenced. So the range-based for loop only works for containers defined by a pair iterator/iterator. The C++17 standard relaxes this constraint by changing the implementation to: auto begin = c.begin(); auto end = c.end(); for(; begin != end; ++begin) { // ... } Here begin and end are allowed to be of different types, as long as they can be compared for inequality. This allows to loop through more containers, e.g. a container defined by a pair iterator/sentinel."
  },
  {
    "sub_topic_id": 389,
    "sub_topic": "Singleton Design Pattern",
    "title": "Remarks",
    "description": "A Singleton is designed to ensure a class only has one instance and provides a global point of access to it. If you only require one instance or a convenient global point of access, but not both, consider other options before turning to the singleton. Global variables can make it harder to reason about code. For example, if one of the calling functions isn't happy with the data it's receiving from a Singleton, you now have to track down what is first giving the singleton bad data in the first place. Singletons also encourage coupling, a term used to describe two components of code that are joined together thus reducing each components own measure of self-containment. Singletons aren't concurrency friendly. When a class has a global point of access, every thread has the ability to access it which can lead to deadlocks and race conditions. Lastly, lazy initialization can cause performance issues if initialized at the wrong time. Removing lazy initialization also removes some of the features that do make Singleton's interesting in the first place, such as polymorphism (see Subclasses)."
  },
  {
    "sub_topic_id": 390,
    "sub_topic": "Smart Pointers",
    "title": "Remarks",
    "description": "C++ is not a memory-managed language. Dynamically allocated memory (i.e. objects created with new) will be 'leaked' if it is not explicitly deallocated (with delete). It is the programmer's responsibility to ensure that the dynamically allocated memory is freed before discarding the last pointer to that object. Smart pointers can be used to automatically manage the scope of dynamically allocated memory (i.e. when the last pointer reference goes out of scope it is deleted). Smart pointers are preferred over 'raw' pointers in most cases. They make the ownership semantics of dynamically allocated memory explicit, by communicating in their names whether an object is intended to be shared or uniquely owned. Use #include <memory> to be able to use smart pointers."
  },
  {
    "sub_topic_id": 391,
    "sub_topic": "Sorting",
    "title": "Remarks",
    "description": "The std::sort function family is found in the algorithm library. std::sort, found in the standard library header algorithm, is a standard library algorithm for sorting a range of values, defined by a pair of iterators. std::sort takes as the last parameter a functor used to compare two values; this is how it determines the order. Note that std::sort is not stable. The comparison function must impose a Strict, Weak Ordering on the elements. A simple less-than (or greater-than) comparison will suffice. std::sort requires that its iterators are random access iterators. The sequence containers std::list and std::forward_list (requiring C++11) do not provide random access iterators, so they cannot be used with std::sort. However, they do have sort member functions which implement a sorting algorithm that works with their own iterator types."
  },
  {
    "sub_topic_id": 392,
    "sub_topic": "Special Member Functions",
    "title": "Remarks",
    "description": "If you're writing a class that manages resources, you need to implement all the special member functions (see Rule of Three/Five/Zero). But this approach has some problems. It fails the strong exception guarantee - if new[] throws, we've already cleared the resources owned by this and cannot recover. We're duplicating a lot of the logic of copy construction in copy assignment. And we have to remember the self-assignment check, which usually just adds overhead to the copy operation, but is still critical. First, we copy-construct rhs from p2 (which we didn't have to duplicate here). If that operation throws, we don't do anything in operator= and p1 remains untouched. Next, we swap the members between *this and rhs, and then rhs goes out of scope. When operator=, that implicitly cleans the original resources of this (via the destructor, which we didn't have to duplicate). Self-assignment works too - it's less efficient with copy-and-swap (involves an extra allocation and deallocation), but if that's the unlikely scenario, we don't slow down the typical use case to account for it."
  },
  {
    "sub_topic_id": 393,
    "sub_topic": "Standard Library Algorithms",
    "title": "Remarks",
    "description": "Effects Finds the first element in a range for which the predicate function pred returns true. Parameters first => iterator pointing to the beginning of the range last => iterator pointing to the end of the range pred => predicate function(returns true or false) Return An iterator that points to the first element within the range the predicate function pred returns true for. The iterator points to last if val is not found"
  },
  {
    "sub_topic_id": 394,
    "sub_topic": "static_assert",
    "title": "Remarks",
    "description": "Unlike runtime assertions, static assertions are checked at compile-time and are also enforced when compiling optimized builds. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 395,
    "sub_topic": "std::any",
    "title": "Remarks",
    "description": "The class std::any provides a type-safe container to which we can put single values of any type. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 396,
    "sub_topic": "std::array",
    "title": "Remarks",
    "description": "Use of a std::array requires the inclusion of the <array> header using #include <array>. One of the main advantage of std::array as compared to C style array is that we can check the size of the array using size() member function. Returns a reference to the element at position pos with bounds checking. If pos is not within the range of the container, an exception of type std::out_of_range is thrown. std::array being a STL container, can use range-based for loop similar to other containers like vector."
  },
  {
    "sub_topic_id": 397,
    "sub_topic": "std::atomics",
    "title": "Remarks",
    "description": "Each instantiation and full specialization of the std::atomic template defines an atomic type. If one thread writes to an atomic object while another thread reads from it, the behavior is well-defined (see memory model for details on data races) In addition, accesses to atomic objects may establish inter-thread synchronization and order non-atomic memory accesses as specified by std::memory_order. std::atomic may be instantiated with any TriviallyCopyable type T. std::atomic is neither copyable nor movable."
  },
  {
    "sub_topic_id": 398,
    "sub_topic": "std::forward_list",
    "title": "Remarks",
    "description": "std::forward_list is a container that supports fast insertion and removal of elements from anywhere in the container. Fast random access is not supported. It is implemented as a singly-linked list and essentially does not have any overhead compared to its implementation in C. Compared to std::list this container provides more space efficient storage when bidirectional iteration is not needed. Adding, removing and moving the elements within the list, or across several lists, does not invalidate the iterators currently referring to other elements in the list. However, an iterator or reference referring to an element is invalidated when the corresponding element is removed (via erase_after) from the list. std::forward_list meets the requirements of Container (except for the size member function and that operator=='s complexity is always linear), AllocatorAwareContainer and SequenceContainer."
  },
  {
    "sub_topic_id": 399,
    "sub_topic": "std::function: To wrap any element that is callable",
    "title": "Remarks",
    "description": "std::function can cause significant overhead. Because std::function has [value semantics][1], it must copy or move the given callable into itself. But since it can take callables of an arbitrary type, it will frequently have to allocate memory dynamically to do this. Some function implementations have so-called 'small object optimization', where small types (like function pointers, member pointers, or functors with very little state) will be stored directly in the function object. But even this only works if the type is noexcept move constructible. Furthermore, the C++ standard does not require that all implementations provide one."
  },
  {
    "sub_topic_id": 400,
    "sub_topic": "std::integer_sequence",
    "title": "Remarks",
    "description": "The class template std::integer_sequence<Type, Values...> represents a sequence of values of type Type where Type is one of the built-in integer types. These sequences are used when implementing class or function templates which benefit from positional access. The standard library also contains 'factory' types which create ascending sequences of integer values just from the number of elements."
  },
  {
    "sub_topic_id": 401,
    "sub_topic": "std::iomanip",
    "title": "Remarks",
    "description": "When used in an expression out << setiosflags(mask) or in >> setiosflags(mask), sets all format flags of the stream out or in as specified by the mask. When used in an expression out << setprecision(n) or in >> setprecision(n), sets the precision parameter of the stream out or in to exactly n. Parameter of this function is integer, which is new value for precision. Sometimes we need to set the width of the output field, usually when we need to get the output in some structured and proper layout. That can be done using std::setw of std::iomanip. The syntax for std::setw is: std::setw(int n) where n is the length of the output field to be set."
  },
  {
    "sub_topic_id": 402,
    "sub_topic": "std::map",
    "title": "Remarks",
    "description": "To use any of std::map or std::multimap the header file <map> should be included. std::map and std::multimap both keep their elements sorted according to the ascending order of keys. In case of std::multimap, no sorting occurs for the values of the same key. The basic difference between std::map and std::multimap is that the std::map one does not allow duplicate values for the same key where std::multimap does. Maps are implemented as binary search trees. So search(), insert(), erase() takes Θ(log n) time in average. For constant time operation use std::unordered_map. size() and empty() functions have Θ(1) time complexity, number of nodes is cached to avoid walking through tree each time these functions are called."
  },
  {
    "sub_topic_id": 403,
    "sub_topic": "std::optional",
    "title": "Remarks",
    "description": "Optionals (also known as Maybe types) are used to represent a type whose contents may or may not be present. They are implemented in C++17 as the std::optional class. For example, an object of type std::optional<int> may contain some value of type int, or it may contain no value. Optionals are commonly used either to represent a value that may not exist or as a return type from a function that can fail to return a meaningful result. There are many other approach to solving the problem that std::optional solves, but none of them are quite complete: using a pointer, using a sentinel, or using a pair<bool, T>. In some cases, we can provide a pointer to an existing object or nullptr to indicate failure. But this is limited to those cases where objects already exist - optional, as a value type, can also be used to return new objects without resorting to memory allocation."
  },
  {
    "sub_topic_id": 404,
    "sub_topic": "std::pair",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 405,
    "sub_topic": "std::set and std::multiset",
    "title": "Remarks",
    "description": "set is a type of container whose elements are sorted and unique.  multiset is similar, but, in the case of multiset, multiple elements can have the same value. Different styles of C++ have been used in those examples.  Be careful that if you are using a C++98 compiler; some of this code may not be usable."
  },
  {
    "sub_topic_id": 406,
    "sub_topic": "std::string",
    "title": "Remarks",
    "description": "Strings are objects that represent sequences of characters. The standard string class provides a simple, safe and versatile alternative to using explicit arrays of chars when dealing with text and other sequences of characters. The C++ string class is part of the std namespace and was standardized in 1998 Before using std::string, you should include the header string, as it includes functions/operators/overloads that other headers (for example iostream) do not include. Using const char* constructor with a nullptr leads to undefined behavior.."
  },
  {
    "sub_topic_id": 407,
    "sub_topic": "std::variant",
    "title": "Remarks",
    "description": "Variant is a replacement for raw union use. It is type-safe and knows what type it is, and it carefully constructs and destroys the objects within it when it should. It is almost never empty: only in corner cases where replacing its content throws and it cannot back out safely does it end up being in an empty state. It behaves somewhat like a std::tuple, and somewhat like an std::optional. Using std::get and std::get_if is usually a bad idea. The right answer is usually std::visit, which lets you deal with every possibility right there. if constexpr can be used within the visit if you need to branch your behavior, rather than doing a sequence of runtime checks that duplicate what visit will do more efficiently."
  },
  {
    "sub_topic_id": 408,
    "sub_topic": "std::vector",
    "title": "Remarks",
    "description": "A vector is a dynamic array with automatically handled storage. The elements in a vector can be accessed just as efficiently as those in an array with the advantage being that vectors can dynamically change in size. In terms of storage the vector data is (usually) placed in dynamically allocated memory thus requiring some minor overhead; conversely C-arrays and std::array use automatic storage relative to the declared location and thus do not have any overhead. Use of an std::vector requires the inclusion of the <vector> header using #include <vector>. Elements in a std::vector are stored contiguously on the free store. It should be noted that when vectors are nested as in std::vector<std::vector<int> >, the elements of each vector are contiguous, but each vector allocates its own underlying buffer on the free store."
  },
  {
    "sub_topic_id": 409,
    "sub_topic": "Storage class specifiers",
    "title": "Remarks",
    "description": "Storage class specifiers are keywords that can be used in declarations. They do not affect the type of the declaration, but typically modify the way in which the entity is stored. There are six storage class specifiers, although not all in the same version of the language: auto (until C++11), register (until C++17), static, thread_local (since C++11), extern, and mutable. According to the standard, At most one storage-class-specifier shall appear in a given decl-specifier-seq, except that thread_local may appear with static or extern. A declaration may contain no storage class specifier. In that case, the language specifies a default behaviour. For example, by default, a variable declared at block scope implicitly has automatic storage duration."
  },
  {
    "sub_topic_id": 410,
    "sub_topic": "Stream manipulators",
    "title": "Remarks",
    "description": "Manipulators are special helper functions that help controlling input and output streams using operator >> or operator <<. They all can be included by #include <iomanip>. std::get_money(mon[, intl]) [C++11]. In an expression in >> std::get_money(mon, intl) parses the character input as a monetary value, as specified by the std::money_get facet of the locale currently imbued in in, and stores the value in mon (of long double or std::basic_string type). Manipulator expects required international currency strings if intl is true, expects optional currency symbols otherwise. std::left, std::right and std::internal - modify the default position of the fill characters by setting std::ios_base::adjustfield to std::ios_base::left, std::ios_base::right and std::ios_base::internal correspondingly. std::left and std::right apply to any output, std::internal - for integer, floating-point and monetary output. Have no effect on input streams."
  },
  {
    "sub_topic_id": 411,
    "sub_topic": "Templates",
    "title": "Remarks",
    "description": "Classes, functions, and (since C++14) variables can be templated. A template is a piece of code with some free parameters that will become a concrete class, function, or variable when all parameters are specified. Parameters can be types, values, or themselves templates. A well-known template is std::vector, which becomes a concrete container type when the element type is specified, e.g., std::vector<int>. The word template is a keyword with five different meanings in the C++ language, depending on the context."
  },
  {
    "sub_topic_id": 412,
    "sub_topic": "The ISO C++ Standard",
    "title": "Remarks",
    "description": "When C++ is mentioned, often a reference is made to 'the Standard'. But what is exactly that standard? C++ has a long history. Started as a small project by Bjarne Stroustrup within Bell Labs, by the early 90's it had become quite popular. Multiple companies were creating C++ compilers so that users could run their C++ compilers on a wide range of computers. But in order to facilitate this, all these competing compilers should share a single definition of the language. At that point, the C language had successfully been standardized. This means that a formal description of the language was written. This was submitted to the American National Standards Institute (ANSI), which opened up the document for review and subsequently published it in 1989. One year later, the International Organization for Standards (Because it would have different acronyms in different languages they chose one form, ISO, derived from the Greek isos, meaning equal.) adopted the American standard as an International Standard. For C++, it was clear from the beginning that there was an international interest. A workgroup within ISO was started (known as WG21, within SubCommittee 22). This workgroup drafted a first standard around 1995. But as we programmers know, there's nothing more dangerous to a planned delivery than last minute features, and that happened to C++ as well. In 1995, a cool new library named the STL surfaced, and the people working in WG21 decided to add a slimmed-down version to the C++ draft standard. Naturally, this caused the deadlines to be missed and only 3 years later did the document become final. ISO is a very formal organization, so the C++ Standard was christened with the not very marketable name of ISO/IEC 14882. As standards can be updated, this exact version became known as 14882:1998. And indeed there was a demand to update the Standard. The Standard is a very thick document, which aims to exactly describe how C++ compilers should work. Even a slight ambiguity can be worth fixing, so by 2003 an update was released as 14882:2003. However, this did not add any feature to C++; the new features were scheduled for the second update. Informally, this second update was known as C++0x, because it wasn't known whether this would take until 2008 or 2009. Well - that version also got a slight delay, which is why it became 14882:2011. Luckily, WG21 decided not to let that happen again. C++11 was well-received and let to a renewed interest in C++. So, to keep the momentum, the third update went from planning to publishing in 3 years, to become 14882:2014. The work didn't stop there, either. The C++17 standard has been proposed and the work for C++20 has been started."
  },
  {
    "sub_topic_id": 413,
    "sub_topic": "The Rule of Three, Five, And Zero",
    "title": "Remarks",
    "description": "C++11 C++11 introduces two new special member functions: the move constructor and the move assignment operator. For all the same reasons that you want to follow the Rule of Three in C++03, you usually want to follow the Rule of Five in C++11: If a class requires ONE of five special member functions, and if move semantics are desired, then it most likely requires ALL FIVE of them. Note, however, that failing to follow the Rule of Five is usually not considered an error, but a missed optimisation opportunity, as long as the Rule of Three is still followed. If no move constructor or move assignment operator is available when the compiler would normally use one, it will instead use copy semantics if possible, resulting in a less efficient operation due to unnecessary copy operations. If move semantics aren't desired for a class, then it has no need to declare a move constructor or assignment operator."
  },
  {
    "sub_topic_id": 414,
    "sub_topic": "The This Pointer",
    "title": "Remarks",
    "description": "The this pointer is a keyword for C++ therfore there is no library needed to implement this. And do not forget this is a pointer! So you cannot do:  this.someMember(); As you access member functions or member variables from pointers using the arrow symbol -> : this->someMember(); Other helpful links to the better understanding of the this pointer : What is the 'this' pointer? http://www.geeksforgeeks.org/this-pointer-in-c/ https://www.tutorialspoint.com/cplusplus/cpp_this_pointer.htm"
  },
  {
    "sub_topic_id": 415,
    "sub_topic": "Thread synchronization structures",
    "title": "Remarks",
    "description": "Working with threads might need some synchronization techniques if the threads interact. In this topic, you can find the different structures which are provided by the standard library to solve these issues. Often you want to lock the entire object while you perform multiple operations on it. For example, if you need to examine or modify the object using iterators. Whenever you need to call multiple member functions it is generally more efficient to lock the whole object rather than individual member functions."
  },
  {
    "sub_topic_id": 416,
    "sub_topic": "Threading",
    "title": "Remarks",
    "description": "Some notes: Two std::thread objects can never represent the same thread. A std::thread object can be in a state where it doesn't represent any thread (i.e. after a move, after calling join, etc.). Syntax: thread(); thread(thread&& other); explicit thread(Function&& func, Args&&... args). In C++, threads are created using the std::thread class. A thread is a separate flow of execution; it is analogous to having a helper perform one task while you simultaneously perform another. When all the code in the thread is executed, it terminates. When creating a thread, you need to pass something to be executed on it. A few things that you can pass to a thread: Free functions; Member functions; Functor objects; Lambda expressions."
  },
  {
    "sub_topic_id": 417,
    "sub_topic": "Trailing return type",
    "title": "Remarks",
    "description": "The above syntax shows a full function declaration using a trailing type, where square brackets indicate an optional part of the function declaration (like the argument list if a no-arg function). Additionally, the syntax of the trailing return type prohibits defining a class, union, or enum type inside a trailing return type (note that this is not allowed in a leading return type either). Other than that, types can be spelled the same way after the -> as they would be elsewhere. The trailing return type is looked up in the scope of the class, while a leading return type is looked up in the enclosing namespace scope and can therefore require 'redundant' qualification."
  },
  {
    "sub_topic_id": 418,
    "sub_topic": "type deduction",
    "title": "Remarks",
    "description": "In November 2014, the C++ Standardization Committee adopted proposal N3922, which eliminates the special type deduction rule for auto and braced initializers using direct initialization syntax. This is not part of the C++ standard but has been implemented by some compilers. Prior to C++17, template deduction cannot deduce the class type for you in a constructor. It must be explicitly specified. Sometimes, however, these types can be very cumbersome or (in the case of lambdas) impossible to name, so we got a proliferation of type factories (like make_pair(), make_tuple(), back_inserter(), etc.).  C++17 This is no longer necessary:"
  },
  {
    "sub_topic_id": 419,
    "sub_topic": "Type Erasure",
    "title": "Remarks",
    "description": "Type erasure is a set of techniques for creating a type that can provide a uniform interface to various underlying types, while hiding the underlying type information from the client. std::function<R(A...)>, which has the ability to hold callable objects of various types, is perhaps the best known example of type erasure in C++. std::function type erases down to a few operations. One of the things it requires is that the stored value be copyable. This causes problems in a few contexts, like lambdas storing unique ptrs. If you are using the std::function in a context where copying doesn't matter, like a thread pool where you dispatch tasks to threads, this requirement can add overhead. In particular, std::packaged_task<Sig> is a callable object that is move-only. You can store a std::packaged_task<R(Args...)> in a std::packaged_task<void(Args...)>, but that is a pretty heavy-weight and obscure way to create a move-only callable type-erasure class. Thus the task. This demonstrates how you could write a simple std::function type. I omitted the copy constructor (which would involve adding a clone method to details::task_pimpl<...> as well)."
  },
  {
    "sub_topic_id": 420,
    "sub_topic": "Type Inference",
    "title": "Remarks",
    "description": "This topic discusses about type inferencing that involves the keyword auto type that is available from C++11. It is usually better to declare const, & and constexpr whenever you use auto if it is ever required to prevent unwanted behaviors such as copying or mutations. Those additional hints ensures that the compiler does not generate any other forms of inference. It is also not advisible to over use auto and should be used only when the actual declaration is very long, especially with STL templates."
  },
  {
    "sub_topic_id": 421,
    "sub_topic": "Type Keywords",
    "title": "Remarks",
    "description": "Interchangeable with class, except for the following differences: If a class type is defined using the keyword struct, then the default accessibility of bases and members is public rather than private. struct cannot be used to declare a template type parameter or template template parameter; only class can. In C++11, enum may optionally be followed by class or struct to define a scoped enum. Furthermore, both scoped and unscoped enums can have their underlying type explicitly specified by : T following the enum name, where T refers to an integer type."
  },
  {
    "sub_topic_id": 422,
    "sub_topic": "Type Traits",
    "title": "Remarks",
    "description": "Type traits are templated constructs used to compare and test the properties of different types at compile time. They can be used to provide conditional logic at compile time that can limit or extend the functionality of your code in a specific manner. The type traits library was brought in with the c++11 standard which provides a number different functionalities. It is also possible to create your own type trait comparison templates."
  },
  {
    "sub_topic_id": 423,
    "sub_topic": "Typedef and type aliases",
    "title": "Remarks",
    "description": "The typedef and (since C++11) using keywords can be used to give a new name to an existing type. A typedef declaration has the same syntax as a variable or function declaration, but it contains the word typedef. The presence of typedef causes the declaration to declare a type instead of a variable or function. The typedef keyword is a specifier, so it applies separately to each declarator. Therefore, each name declared refers to the type that that name would have in the absence of typedef. The rule that typedef declarations have the same syntax as ordinary variable and function declarations can be used to read and write more complex declarations."
  },
  {
    "sub_topic_id": 424,
    "sub_topic": "Undefined Behavior",
    "title": "Remarks",
    "description": "What is undefined behavior (UB)? According to the ISO C++ Standard (§1.3.24, N4296), it is 'behavior for which this International Standard imposes no requirements.' This means that when a program encounters UB, it is allowed to do whatever it wants. This often means a crash, but it may simply do nothing, make demons fly out of your nose, or even appear to work properly! Needless to say, you should avoid writing code that invokes UB. If a program contains undefined behavior, the C++ standard places no constraints on its behavior. It may appear to work as the developer intended, but it may also crash or produce strange results. The behavior may vary between runs of the same program. Any part of the program may malfunction, including lines that come before the line that contains undefined behavior. The implementation is not required to document the result of undefined behavior.An implementation may document the result of an operation that produces undefined behavior according to the standard, but a program that depends on such documented behavior is not portable."
  },
  {
    "sub_topic_id": 425,
    "sub_topic": "Unions",
    "title": "Remarks",
    "description": "Unions are very useful tools, but come with a few important caveats: It is undefined behavior, per the C++ standard, to access an element of a union that was not the most recently modified member. Although a lot of C++ compilers permit this access in well defined ways, these are extensions and cannot be guaranteed across compilers. A std::variant (since C++17) is like a union, only it tells you what it currently contains (part of its visible state is the type of the value it holds at a given moment: it enforces value access happening only to that type). Implementations do not necessarily align members of different sizes to the same address."
  },
  {
    "sub_topic_id": 426,
    "sub_topic": "Unit Testing in C++",
    "title": "Remarks",
    "description": "Unit testing is a level in software testing that validates the behavior and correctness of units of code. In C++, \"units of code\" often refer to either classes, functions, or groups of either. Unit testing is often performed using specialized 'testing frameworks' or 'testing libraries' that often use non-trivial syntax or usage patterns. This topic will review different strategies and unit testing libraries or frameworks."
  },
  {
    "sub_topic_id": 427,
    "sub_topic": "Unnamed types",
    "title": "Remarks",
    "description": "Member names of an anonymous union belong to the scope of the union declaration an must be distinct to all other names of this scope. The example here has the same construction as example Anonymous Members using 'struct' but is standard conform. Unlike a named class or struct, unnamed classes and structs must be instantiated where they are defined, and cannot have constructors or destructors. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download C++ (PDF) Language (PDF): https://riptutorial.com/ebook/cplusplus."
  },
  {
    "sub_topic_id": 428,
    "sub_topic": "Unspecified behavior",
    "title": "Remarks",
    "description": "If the behavior of a construct is unspecified, then the standard places some constraints on the behavior, but leaves some freedom to the implementation, which is not required to document what happens in a given situation. It contrasts with implementation-defined behavior, in which the implementation is required to document what happens, and undefined behavior, in which anything can happen."
  },
  {
    "sub_topic_id": 429,
    "sub_topic": "User-Defined Literals",
    "title": "Remarks",
    "description": "Despite you can write a binary number in C++14 like: int number =0b0001'0101; // ==21 here comes a famous example with a self-made implementation for binary numbers: Note: The whole template expanding program is running at compile time. Those following complex user literals are declared in the namespace std::literals::complex_literals, where both literals and complex_literals are inline namespaces. Access to these operators can be gained with using namespace std::literals, using namespace std::complex_literals, and using namespace std::literals::complex_literals."
  },
  {
    "sub_topic_id": 430,
    "sub_topic": "Using declaration",
    "title": "Remarks",
    "description": "A using declaration introduces a single name into the current scope that was previously declared elsewhere. A using-declaration is distinct from a using directive, which tells the compiler to look in a particular namespace when looking up any name. A using-directive begins with using namespace. A using-declaration is also distinct from an alias declaration, which gives a new name to an existing type in the same manner as typedef. An alias declaration contains an equals sign."
  },
  {
    "sub_topic_id": 431,
    "sub_topic": "Using std::unordered_map",
    "title": "Remarks",
    "description": "std::unordered_map is just an associative container. It works on keys and their maps. Key as the names goes, helps to have uniqueness in the map. While the mapped value is just a content that is associated with the key. The data types of this key and map can be any of the predefined data type or user-defined. As the name goes, the elements in unordered map are not stored in sorted sequence. They are stored according to their hash values and hence, usage of unordered map has many benefits such as it only takes O(1) to search any item from it. It is also faster than other map containers. It is also visible from the example that it is very easy to implement as the operator ( [] ) helps us to directly access the mapped value."
  },
  {
    "sub_topic_id": 432,
    "sub_topic": "Value and Reference Semantics",
    "title": "Remarks",
    "description": "A type has value semantics if the object's observable state is functionally distinct from all other objects of that type. This means that if you copy an object, you have a new object, and modifications of the new object will not be in any way visible from the old object. A type is said to have reference semantics if an instance of that type can share its observable state with another object (external to it), such that manipulating one object will cause the state to change within another object."
  },
  {
    "sub_topic_id": 433,
    "sub_topic": "Value Categories",
    "title": "Remarks",
    "description": "Expressions in C++ are assigned a particular value category, based on the result of those expressions. Value categories for expressions can affect C++ function overload resolution. Value categories determines two important-but-separate properties about an expression. One property is whether the expression has identity. An expression has identity if it refers to an object that has a variable name. The variable name may not be involved in the expression, but the object can still have one. The other property is whether it is legal to implicitly move from the expression's value. Or more specifically, whether the expression, when used as a function parameter, will bind to r-value parameter types or not. C++ defines 3 value categories which represent the useful combination of these properties: lvalue (expressions with identity but not movable from), xvalue (expressions with identity that are moveable from), and prvalue (expressions without identity that are moveable from). C++ does not have expressions which have no identity and cannot be moved from. C++ defines two other value categories, each based solely on one of these properties: glvalue (expressions with identity) and rvalue (expressions that can be moved from). These act as useful groupings of the prior categories."
  },
  {
    "sub_topic_id": 434,
    "sub_topic": "Variable Declaration Keywords",
    "title": "Remarks",
    "description": "A type specifier; when applied to a type, produces the const-qualified version of the type. See const keyword for details on the meaning of const. Yields the type of its operand, which is not evaluated. If the operand e is a name without any additional parentheses, then decltype(e) is the declared type of e. The special form decltype(auto) deduces the type of a variable from its initializer or the return type of a function from the return statements in its definition, using the type deduction rules of decltype rather than those of auto."
  },
  {
    "sub_topic_id": 435,
    "sub_topic": "Virtual Member Functions",
    "title": "Remarks",
    "description": "Only non-static, non-template member functions can be virtual. If you are using C++11 or later, it is recommended to use override when overriding a virtual member function from a base class. Polymorphic base classes often have virtual destructors to allow a derived object to be deleted through a pointer to the base class. If the destructor were not virtual, such an operation leads to undefined behavior[expr.delete] §5.3.5/3 ."
  },
  {
    "sub_topic_id": 436,
    "sub_topic": "Getting started with VBA",
    "title": "Remarks",
    "description": "This section provides an overview of what vba is, and why a developer might want to use it. It should also mention any large subjects within vba, and link out to the related topics. Since the Documentation for vba is new, you may need to create initial versions of those related topics. You can open the VB editor in any of the Microsoft Office applications by pressing Alt+F11 or going to the Developer tab and clicking on the 'Visual Basic' button. If you don't see the Developer tab in the Ribbon, check if this is enabled. By default the Developer tab is disabled. To enable the Developer tab go to File -> Options, select Customize Ribbon in the list on the left. In the right 'Customize the Ribbon' treeview find the Developer tree item and set the check for the Developer checkbox to checked. Click Ok to close the Options dialog."
  },
  {
    "sub_topic_id": 437,
    "sub_topic": "API Calls",
    "title": "Remarks",
    "description": "API stands for Application Programming Interface. API's for VBA imply a set of methods that allow direct interaction with the operating system. System calls can be made by executing procedures defined in DLL files. Microsoft doesn't officially support APIs but with some research more declarations can be found online Office 2016 for Mac is sandboxed Unlike other versions of Office apps that support VBA, Office 2016 for Mac apps are sandboxed. Sandboxing restricts the apps from accessing resources outside the app container. This affects any add-ins or macros that involve file access or communication across processes. You can minimize the effects of sandboxing by using the new commands described in the following section. New VBA commands for Office 2016 for Mac The following VBA commands are new and unique to Office 2016 for Mac."
  },
  {
    "sub_topic_id": 438,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "Declaring an array is very similar to declaring a variable, except you need to declare the dimension of the Array right after its name: Dim myArray(9) As String 'Declaring an array that will contain up to 10 strings By default, Arrays in VBA are indexed from ZERO, thus, the number inside the parenthesis doesn't refer to the size of the array, but rather to the index of the last element. You can change Arrays indexing by placing this line at the top of a module: Option Base 1 With this line, all Arrays declared in the module will be indexed from ONE."
  },
  {
    "sub_topic_id": 439,
    "sub_topic": "Assigning strings with repeated characters",
    "title": "Remarks",
    "description": "There are times you need to assign a string variable with a specific character repeated a specific number of times. VBA provides two main functions for this purpose: String/String$ Space/Space$. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 440,
    "sub_topic": "Attributes",
    "title": "Remarks",
    "description": "Syntax: Attribute VB_Name = 'ClassOrModuleName'; Attribute VB_GlobalNameSpace = False ' Ignored; Attribute VB_Creatable = False ' Ignored; Attribute VB_PredeclaredId = {True | False}; Attribute VB_Exposed = {True | False}; Attribute variableName.VB_VarUserMemId = 0 ' Zero indicates that this is the default member of the class. Attribute variableName.VB_VarDescription = 'some string' ' Adds the text to the Object Browser information for this variable. Attribute procName.VB_Description = 'some string' ' Adds the text to the Object Browser information for the procedure. Attribute procName.VB_UserMemId = {0 | -4} ' 0: Makes the function the default member of the class. ' -4: Specifies that the function returns an Enumerator."
  },
  {
    "sub_topic_id": 441,
    "sub_topic": "Automation or Using other applications Libraries",
    "title": "Remarks",
    "description": "If you use the objects in other applications as part of your Visual Basic application, you may want to establish a reference to the object libraries of those applications. This Documentation provides a list, sources and examples of how to use libraries of different softwares, like Windows Shell, Internet Explorer, XML HttpRequest, and others. MSDN-Understanding Automation: When an application supports Automation, the objects the application exposes can be accessed by Visual Basic. Use Visual Basic to manipulate these objects by invoking methods on the object or by getting and setting the object's properties. MSDN-Check or Add an Object Library Reference: If you use the objects in other applications as part of your Visual Basic application, you may want to establish a reference to the object libraries of those applications. Before you can do that, you must first be sure that the application provides an object library. MSDN-References Dialog Box: Allows you to select another application's objects that you want available in your code by setting a reference to that application's object library. MSDN-CreateObject Method : Creates an Automation object of the specified class. If the application is already running, CreateObject will create a new instance."
  },
  {
    "sub_topic_id": 442,
    "sub_topic": "Collections",
    "title": "Remarks",
    "description": "A Collection is a container object that is included in the VBA runtime. No additional references are required in order to use it. A Collection can be used to store items of any data type and allows retrieval by either the ordinal index of the item or by using an optional unique key. 1 Only dynamic arrays can be resized, and only the last dimension of multi-dimensional arrays. 2 The underlying .Keys and .Items are ordered. 3 Determined by the .CompareMode property."
  },
  {
    "sub_topic_id": 443,
    "sub_topic": "Comments",
    "title": "Remarks",
    "description": "Comment Blocks: If you need to comment or uncomment several lines at once, you can use the IDE's Edit Toolbar buttons: Comment Block - Adds a single apostrophe to the start of all selected lines Comment Block Uncomment Block - Removes the first apostrophe from the start of all selected lines Uncomment Block Multi-line Comments Many other languages support multi-line block comments, but VBA only allows single-line comments. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 444,
    "sub_topic": "Concatenating strings",
    "title": "Remarks",
    "description": "Strings can be concatenated, or joined together, using one or more concatenation operator &. String arrays can also be concatenated using the Join function and providing a string (which can be zero-length) to be used between each array element. Related Examples. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 445,
    "sub_topic": "Conditional Compilation",
    "title": "Remarks",
    "description": "The #Const directive is used to define a custom preprocessor constant. These can later be used by #If to control which blocks of code get compiled and executed. #Const DEBUGMODE = 1 #If DEBUGMODE Then Const filepath As String = 'C:\\Users\\UserName\\Path\\To\\File.txt' Else Const filepath As String =  \\server\\share\\path\to\file.txt' #End If This results in the value of filepath being set to 'C:\\Users\\UserName\\Path\\To\\File.txt'. Removing the Const line, or changing it to #Const DEBUGMODE = 0 would result in the filepath being set to '\\server\\share\\path\to\file.txt'. #Const Scope The #Const directive is only effective for a single code file (module or class). It must be declared for each and every file you wish to use your custom constant in. Alternatively, you can declare a #Const globally for your project by going to Tools >> [Your Project Name] Project Properties. This will bring up the project properties dialog box where we’ll enter the constant declaration. In the “Conditional Compilation Arguments” box, type in [constName] = [value]. You can enter more than 1 constant by separating them with a colon, like [constName1] = [value1] : [constName2] = [value2]."
  },
  {
    "sub_topic_id": 446,
    "sub_topic": "Converting other types to strings",
    "title": "Remarks",
    "description": "VBA will implicitly convert some types to string as necessary and without any extra work on the part of the programmer, but VBA also provides a number of explicit string conversion functions, and you can also write your own. Three of the most frequently used functions are CStr, Format and StrConv. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 447,
    "sub_topic": "Copying, returning and passing arrays",
    "title": "Remarks",
    "description": "You can copy a VBA array into an array of the same type using the = operator. The arrays must be of the same type otherwise the code will throw a 'Can't assign to array' compilation error. Dim source(0 to 2) As Long Dim destinationLong() As Long Dim destinationDouble() As Double destinationLong = source  copies contents of source into destinationLong  destinationDouble = source does not compile The source array can be fixed or dynamic, but the destination array must be dynamic. Trying to copy to a fixed array will throw a Cant assign to array compilation error. Any preexisting data in the receiving array is lost and its bounds and dimenions are changed to the same as the source array."
  },
  {
    "sub_topic_id": 448,
    "sub_topic": "CreateObject vs. GetObject",
    "title": "Remarks",
    "description": "At its simplest, CreateObject creates an instance of an object whereas GetObject gets an existing instance of an object. Determining whether an object can be created or gotten will depend on it's Instancing property. Some objects are SingleUse (eg, WMI) and cannot be created if they already exist. Other objects (eg, Excel) are MultiUse and allow multiple instances to run at once. If an instance of an object does not already exist and you attempt GetObject, you will receive the following trappable message: Run-time error '429': ActiveX component can't create object."
  },
  {
    "sub_topic_id": 449,
    "sub_topic": "Creating a Custom Class",
    "title": "Remarks",
    "description": "This article will show how to create a complete custom class in VBA. It uses the example of a DateRange object, because a starting and ending date are often passed together to functions. A Property procedure is a series of statement that retrieves or modifies a custom property on a module. There are three types of property accessors: A Get procedure that returns the value of a property. A Let procedure that assigns a (non-Object) value to an object. A Set procedure that assigns an Object reference. Property accessors are often defined in pairs, using both a Get and Let/Set for each property. A property with only a Get procedure would be read-only, while a property with only a Let/Set procedure would be write-only."
  },
  {
    "sub_topic_id": 450,
    "sub_topic": "Creating a procedure",
    "title": "Remarks",
    "description": "As stated above Functions are smaller procedures that contain small pieces of code which may be repetitive inside a Procedure. Functions are used to reduce redundancy in code. Similar to a Procedure, A function can be declared with or without an arguments list. Function is declared as a return type, as all functions return a value. The Name and the Return Variable of a function are the Same. The Function can be called in various ways inside a function. Since a Function declared with a return type is basically a variable. it is used similar to a variable. A Sub is a procedure that performs a specific task but does not return a specific value. Sub ProcedureName ([argument_list]) [statements] End Sub If no access modifier is pecified, a procedure is Public by default. A Function is a procedure that is given data and returns a value, ideally without global or module-scope side-effects."
  },
  {
    "sub_topic_id": 451,
    "sub_topic": "Data Structures",
    "title": "Remarks",
    "description": "[TODO: This topic should be an example of all the basic CS 101 data structures along with some explanation as an overview of how data structures can be implemented in VBA. This would be a good opportunity to tie in and reinforce concepts introduced in Class-related topics in VBA documentation.]. A binary tree is structured conceptually as a hierarchy of nodes descending downward from a common root, where each node has two children: left and right. For example, suppose the numbers 7, 5, 9, 3, 11, 6, 12, 14 and 15 were inserted into a BinaryTree. The structure would be as below. Note that this binary tree is not balanced, which can be a desirable characteristic for guaranteeing the performance of lookups - see AVL trees for an example of a self-balancing binary search tree."
  },
  {
    "sub_topic_id": 452,
    "sub_topic": "Data Types and Limits",
    "title": "Remarks",
    "description": "Data types: Boolean; Byte; Currency; Date; Decimal; Double; Integer; Long; LongLong; LongPtr; Single; String; Variant. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 453,
    "sub_topic": "Date Time Manipulation",
    "title": "Remarks",
    "description": "The Timer function returns a Single representing the number of seconds elapsed since midnight. The precision is one hundredth of a second. Sub TimerExample() Debug.Print Time    ' prints 10:36:31  (time at execution) Debug.Print Timer   ' prints 38191,13  (seconds since midnight) End Sub Because Now and Time functions are only precise to seconds, Timer offers a convenient way to increase accuracy of time measurement. DateDiff() returns a Long representing the number of time intervals between two specified dates. The Calendar property is used to modify or display the current calendar. DatePart() is also a function returning a portion of a date, but works differently and allow more possibilities than the functions above. It can for instance return the Quarter of the year or the Week of the year."
  },
  {
    "sub_topic_id": 454,
    "sub_topic": "Declaring and assigning strings",
    "title": "Remarks",
    "description": "Strings are a Reference type and are central to most programming tasks. Strings are assigned text, even if the text happens to be numeric. Strings can be zero-length, or any length up to 2GB. Modern versions of VBA store Strings internally using a Byte array of Multi-Byte Character Set bytes (an alternative to Unicode). VBA offers a Mid function for returning substrings within a string, but it also offers the Mid Statement which can be used to assign substrings or individual characters withing a string. The Mid function will typically appear on the right-hand-side of an assignment statement or in a condition, but the Mid Statement typically appears on the left hand side of an assignment statement."
  },
  {
    "sub_topic_id": 455,
    "sub_topic": "Declaring Variables",
    "title": "Remarks",
    "description": "The Dim statement should be reserved for local variables. At module-level, prefer explicit access modifiers: Private for private fields, which can only be accessed within the module they're declared in. Public for public fields and global variables, which can be accessed by any calling code. Friend for variables public within the project, but inaccessible to other referencing VBA projects (relevant for add-ins) Global can also be used for Public fields in standard modules, but is illegal in class modules and is obsolete anyway - prefer the Public modifier instead. This modifier isn't legal for procedures either. If you have a value that never changes in your application, you can define a named constant and use it in place of a literal value. You can use Const only at module or procedure level. This means the declaration context for a variable must be a class, structure, module, procedure, or block, and cannot be a source file, namespace, or interface."
  },
  {
    "sub_topic_id": 456,
    "sub_topic": "Error Handling",
    "title": "Remarks",
    "description": "When a runtime error occurs, good code should handle it. The best error handling strategy is to write code that checks for error conditions and simply avoids executing code that results in a runtime error. One key element in reducing runtime errors, is writing small procedures that do one thing. The fewer reasons procedures have to fail, the easier the code as a whole is to debug. Often when writing a specialized class, you'll want it to raise its own specific errors, and you'll want a clean way for user/calling code to handle these custom errors. A neat way to achieve this is by defining a dedicated Enum type. Using the vbObjectError built-in constant ensures the custom error codes don't overlap with reserved/existing error codes. Only the first enum value needs to be explicitly specified, for the underlying value of each Enum member is 1 greater than the previous member, so the underlying value of Err_BarNotInitialized is implicitly vbObjectError + 1025."
  },
  {
    "sub_topic_id": 457,
    "sub_topic": "Events",
    "title": "Remarks",
    "description": "An event can only be Public. The modifier is optional because class module members (including events) are implicitly Public by default. A WithEvents variable can be Private or Public, but not Friend. The modifier is mandatory because WithEvents isn't a keyword that declares a variable, but a modifier keyword part of the variable declaration syntax. Hence the Dim keyword must be used if an access modifier isn't present. VBA is event-driven: VBA code runs in response to events raised by the host application or the host document - understanding events is fundamental to understanding VBA. APIs often expose objects that raise a number of events in response to various states. For example an Excel.Application object raises an event whenever a new workbook is created, opened, activated, or closed. Or whenever a worksheet gets calculated. Or just before a file is saved. Or immediately after. A button on a form raises a Click event when the user clicks it, the user form itself raises an event just after it's activated, and another just before it's closed."
  },
  {
    "sub_topic_id": 458,
    "sub_topic": "Flow control structures",
    "title": "Remarks",
    "description": "The For loop is used to repeat the enclosed section of code a given number of times. The following simple example illustrates the basic syntax: Dim i as Integer Declaration of i For i = 1 to 10 'Declare how many times the loop shall be executed Debug.Print i 'The piece of code which is repeated Next i 'The end of the loop The code above declares an Integer i. The For loop assigns every value between 1 and 10 to i and then executes Debug.Print i - i.e. the code prints the numbers 1 through 10 to the immediate window. Note that the loop variable is incremented by the Next statement, that is after the enclosed code executes as opposed to before it executes. By default, the counter will be incremented by 1 each time the loop executes. However, a Step can be specified to change the amount of the increment as either a literal or the return value of a function. If the starting value, ending value, or Step value is a floating point number, it will be rounded to the nearest integer value. Step can be either a positive or negative value."
  },
  {
    "sub_topic_id": 459,
    "sub_topic": "Frequently used string manipulation",
    "title": "Remarks",
    "description": "Quick examples for MID LEFT and RIGHT string functions using INSTR FIND and LEN. How do you find the text between two search terms (Say: after a colon and before a comma)? How do you get the remainder of a word (using MID or using RIGHT)? Which of these functions use Zero-based params and return codes vs One-based? What happens when things go wrong? How do they handle empty strings, unfound results and negative numbers?"
  },
  {
    "sub_topic_id": 460,
    "sub_topic": "Interfaces",
    "title": "Remarks",
    "description": "An Interface is a way to define a set of behaviors that a class will perform. The definition of an interface is a list of method signatures (name, parameters, and return type). A class having all of the methods is said to 'implement' that interface. In VBA, using interfaces lets the compiler check that a module implements all of its methods. A variable or parameter can be defined in terms of an interface instead of a specific class."
  },
  {
    "sub_topic_id": 461,
    "sub_topic": "Macro security and signing of VBA-projects/-modules",
    "title": "Remarks",
    "description": "To run macros and maintain the security Office applications provide against malicious code, it is necessary to digitally sign the VBAProject.OTM from the VBA editor > Tools > Digital Signature. Office comes with a utility to create a self-signed digital certificate that you can employ on the PC to sign your projects. This utility SELFCERT.EXE is in the Office program folder, Click on Digital Certificate for VBA Projects to open the certificate wizard. In the dialog enter a suitable name for the certificate and click OK."
  },
  {
    "sub_topic_id": 462,
    "sub_topic": "Measuring the length of strings",
    "title": "Remarks",
    "description": "A string's length can be measured in two ways: The most frequently used measure of length is the number of characters using the Len functions, but VBA can also reveal the number of bytes using LenB functions. A double-byte or Unicode character is more than one byte long. When checking if a string is zero-length, it is better practice, and more efficient, to inspect the length of the string rather than comparing the string to an empty string."
  },
  {
    "sub_topic_id": 463,
    "sub_topic": "Naming Conventions",
    "title": "Remarks",
    "description": "Procedures do something. Name them after what they're doing, using a verb. If accurately naming a procedure is not possible, likely the procedure is doing too many things and needs to be broken down into smaller, more specialized procedures. Event handlers are usually automatically named by the VBE; renaming them without renaming the object and/or the handled event will break the code - the code will run and compile, but the handler procedure will be orphaned and will never be executed. Consider using prefixes such as Can, Is or Has in front of Boolean-returning members (functions and properties), but only when it adds value. This conforms with the current Microsoft naming guidelines."
  },
  {
    "sub_topic_id": 464,
    "sub_topic": "Non-Latin Characters",
    "title": "Remarks",
    "description": "VBA can read and write strings in any language or script using Unicode. However, there are stricter rules in place for Identifier Tokens. VBA Identifiers (variable and function names) can use the Latin script and may also be able to use Japanese, Korean, Simplified Chinese, and Traditional Chinese scripts. The extended Latin script has full coverage for many languages: English, French, Spanish, German, Italian, Breton, Catalan, Danish, Estonian, Finnish, Icelandic, Indonesian, Irish, Lojban, Mapudungun, Norwegian, Portuguese, Scottish Gaelic, Swedish, Tagalog. Some languages are only partially covered: Azeri, Croatian, Czech, Esperanto, Hungarian, Latvian, Lithuanian, Polish, Romanian, Serbian, Slovak, Slovenian, Turkish, Yoruba, Welsh."
  },
  {
    "sub_topic_id": 465,
    "sub_topic": "Object-Oriented VBA",
    "title": "Remarks",
    "description": "Abstraction is achieved by implementing functionality with increasingly detailed code. The entry point of a macro should be a small procedure with a high abstraction level that makes it easy to grasp at a glance what's going on. The Handling QueryClose example demonstrates encapsulation: the form has a checkbox control, but its client code doesn't work with it directly - the checkbox is an implementation detail, what the client code needs to know is whether the setting is enabled or not. The ability to implement interfaces allows completely decoupling the application logic from the UI, or from the database, or from this or that worksheet."
  },
  {
    "sub_topic_id": 466,
    "sub_topic": "Operators",
    "title": "Remarks",
    "description": "Operators are evaluated in the following order: Mathematical operators; Bitwise operators; Concatenation operators; Comparison operators; Logical operators; Operators with matching precedence are evaluated from left to right. The default order can be overridden by using parentheses ( and ) to group expressions. All of the logical operators in VBA can be thought of as 'overrides' of the bitwise operators of the same name. Technically, they are always treated as bitwise operators. All of the comparison operators in VBA return a Boolean, which will always have none of its bits set (False) or all of its bits set (True). But it will treat a value with any bit set as True. This means that the result of the casting the bitwise result of an expression to a Boolean (see Comparison Operators) will always be the same as treating it as a logical expression."
  },
  {
    "sub_topic_id": 467,
    "sub_topic": "Passing Arguments ByRef or ByVal",
    "title": "Remarks",
    "description": "The ByRef and ByVal modifiers are part of a procedure's signature and indicate how an argument is passed to a procedure. In VBA a parameter is passed ByRef unless specified otherwise (i.e. ByRef is implicit if absent). Note In many other programming languages (including VB.NET), parameters are implicitly passed by value if no modifier is specified: consider specifying ByRef modifiers explicitly to avoid possible confusion."
  },
  {
    "sub_topic_id": 468,
    "sub_topic": "Procedure Calls",
    "title": "Remarks",
    "description": "The first two syntaxes are for calling Sub procedures; notice the first syntax involves no parentheses. See This is confusing. Why not just always use parentheses? for a thorough explanation of the differences between the first two syntaxes. The third syntax is for calling Function and Property Get procedures; when there are parameters, the parentheses are always mandatory. The Let keyword is optional when assigning a value, but the Set keyword is required when assigning a reference. Fourth syntax is for calling Property Let and Property Set procedures; the expression on the right-hand side of the assignment is passed to the property's value parameter."
  },
  {
    "sub_topic_id": 469,
    "sub_topic": "Reading 2GB+ files in binary in VBA and File Hashes",
    "title": "Remarks",
    "description": "There is a built in easy way to read files in binary within VBA, however it has a restriction of 2GB (2,147,483,647 bytes - max of Long data type). As technology evolves, this 2GB limit is easily breached. e.g. an ISO image of Operating System install DVD disc. Microsoft does provide a way to overcome this via low level Windows API and here is a backup of it. Also demonstrate (Read part) for calculating File Hashes without external program like fciv.exe from Microsoft."
  },
  {
    "sub_topic_id": 470,
    "sub_topic": "Recursion",
    "title": "Remarks",
    "description": "A function that calls itself is said to be recursive. Recursive logic can often be implemented as a loop, too. Recursion must be controlled with a parameter, so that the function knows when to stop recursing and deepening the call stack. Infinite recursion eventually causes a run-time error '28': 'Out of stack space'. Recursion allows for repeated, self-referencing calls of a procedure."
  },
  {
    "sub_topic_id": 471,
    "sub_topic": "Scripting.Dictionary object",
    "title": "Remarks",
    "description": "You must add Microsoft Scripting Runtime to the VBA project through the VBE's Tools → References command in order to implement early binding of the Scripting Dictionary object. This library reference is carried with the project; it does not have to be re-referenced when the VBA project is distributed and run on another computer. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba. "
  },
  {
    "sub_topic_id": 472,
    "sub_topic": "Scripting.FileSystemObject",
    "title": "Remarks",
    "description": "Microsoft Scripting Runtime to the VBA project through the VBE's Tools → References command in order to implement early binding of the Scripting Dictionary object. This library reference is carried with the project; it does not have to be re-referenced when the VBA project is distributed and run on another computer. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 473,
    "sub_topic": "Searching within strings for the presence of substrings",
    "title": "Remarks",
    "description": "When you need to check for the presence or position of a substring within a string, VBA offers the InStr and InStrRev functions that return the character position of the substring in the string, if it is present. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 474,
    "sub_topic": "Sorting",
    "title": "Remarks",
    "description": "Unlike the .NET framework, the Visual Basic for Applications library does not include routines to sort arrays. There are two types of workarounds: 1) implementing a sorting algorithm from scratch, or 2) using sorting routines in other commonly-available libraries. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download VBA (PDF) Language (PDF): https://riptutorial.com/ebook/vba."
  },
  {
    "sub_topic_id": 475,
    "sub_topic": "String Literals - Escaping, non-printable characters and line-continuations",
    "title": "Remarks",
    "description": "The assignment of string-literals in VBA is confined by the limitations of the IDE and the codepage of the current user's language settings. The examples above demonstrate the special-cases of escaped strings, special, non-printable strings and long string-literals. When assigning string-literals that contain characters that are specific to a certain codepage, you may need to consider internationalization concerns by assigning a string from a separate unicode resource file."
  },
  {
    "sub_topic_id": 476,
    "sub_topic": "Substrings",
    "title": "Remarks",
    "description": "VBA has built-in functions for extracting specific parts of strings, including: Left/Left$; Right/Right$; Mid/Mid$; Trim/Trim$; To avoid implicit type conversion onverhead (and therefore for better performance), use the $-suffixed version of the function when a string variable is passed to the function, and/or if the result of the function is assigned to a string variable. Passing a Null parameter value to a $-suffixed function will raise a runtime error (\"invalid use of null\") - this is especially relevant for code involving a database. Related Examples"
  },
  {
    "sub_topic_id": 477,
    "sub_topic": "User Forms",
    "title": "Remarks",
    "description": "A UserForm is a class module with a designer and a default instance. The designer can be accessed by pressing Shift+F7 while viewing the code-behind, and the code-behind can be accessed by pressing F7 while viewing the designer. A form should be concerned with nothing but presentation: a button Click handler that connects to a database and runs a parameterized query based on user input, is doing too many things. Instead, implement the applicative logic in the code that's responsible for displaying the form, or even better, in dedicated modules and procedures. Write the code in such a way that the UserForm is only ever responsible for knowing how to display and collect data: where the data comes from, or what happens with the data afterwards, is none of its concern."
  },
  {
    "sub_topic_id": 478,
    "sub_topic": "VBA Option Keyword",
    "title": "Remarks",
    "description": "It is much easier to control the boundaries of arrays by declaring the boundaries explicitly rather than letting the compiler fall back on an Option Base {0|1} declaration. This can be done like so: Dim myStringsA(0 To 5) As String '// This has 6 elements (0 - 5); Dim myStringsB(1 To 5) As String '// This has 5 elements (1 - 5); Dim myStringsC(6 To 9) As String '// This has 3 elements (6 - 9). Option Base is used to declare the default lower bound of array elements. It is declared at module level and is valid only for the current module. By default (and thus if no Option Base is specified), the Base is 0. Which means that the first element of any array declared in the module has an index of 0."
  },
  {
    "sub_topic_id": 479,
    "sub_topic": "VBA Run-Time Errors",
    "title": "Remarks",
    "description": "Code that compiles can still run into errors, at run-time. This topic lists the most common ones, their causes, and how to avoid them. VBA is trying really hard to convert the '42?' argument into a Date value. When it fails, the call to DoSomethingElse cannot be executed, because VBA doesn't know what date to pass, so it raises run-time error 13 type mismatch, because the type of the argument doesn't match the expected type (and can't be implicitly converted either). If the DoSomethingElse procedure raises an error, execution jumps to the CleanFail line label, prints the error number, and the Resume Next instruction jumps back to the instruction that immediately follows the line where the error occurred, which in this case is the Debug.Print instruction: the error-handling subroutine is executing without an error context, and when the Resume Next instruction is reached, run-time error 20 is raised because there is nowhere to resume to."
  },
  {
    "sub_topic_id": 480,
    "sub_topic": "Working with ADO",
    "title": "Remarks",
    "description": "The examples shown in this topic use early binding for clarity, and require a reference to the Microsoft ActiveX Data Object x.x Library. They can be converted to late binding by replacing the strongly typed references with Object and replacing object creation using New with CreateObject where appropriate. Any time SQL executed through an ADO connection needs to contain user input, it is considered best practice to parameterize it in order to minimize the chance of SQL injection. This method is also more readable than long concatenations and facilitates more robust and maintainable code (i.e. by using a function that returns an array of Parameter). In standard ODBC syntax, parameters are given ? 'placeholders' in the query text, and then parameters are appended to the Command in the same order that they appear in the query. Note that the example below uses the OpenDatabaseConnection function from the Making a connection to a data source for brevity. "
  },
  {
    "sub_topic_id": 481,
    "sub_topic": "Working With Files and Directories Without Using FileSystemObject",
    "title": "Remarks",
    "description": "The Scripting.FileSystemObject is much more robust that the legacy methods in this topic. It should be preferred in almost all cases. The MkDir statement can be used to create a new folder. It accepts paths containing drive letters (C:\\Foo), UNC names (\\Server\\Foo), relative paths (..\\Foo), or the current working directory (Foo). If the drive or UNC name is omitted (i.e. \\Foo), the folder is created on the current drive. This may or may not be the same drive as the current working directory. The RmDir statement can be used to delete existing folders. It accepts paths in the same forms as MkDir and uses the same relationship to the current working directory and drive. Note that the statement is similar to the Windows rd shell command, so will throw a run-time error 75: 'Path/File access error' if the target directory is not empty."
  },
  {
    "sub_topic_id": 482,
    "sub_topic": "Getting started with Java Language",
    "title": "Remarks",
    "description": "The Java programming language is... General-purpose: It is designed to be used for writing software in a wide variety of application domains, and lacks specialized features for any specific domain. Class-based: Its object structure is defined in classes. Class instances always have those fields and methods specified in their class definitions (see Classes and Objects). This is in contrast to non-class-based languages such as JavaScript. Statically-typed: the compiler checks at compile time that variable types are respected. For example, if a method expects an argument of type String, that argument must in fact be a string when the method is called. Object-oriented: most things in a Java program are class instances, i.e. bundles of state (fields) and behavior (methods which operate on data and form the object's interface to the outside world). Portable: It can be compiled on any platform with javac and the resultant class files can run on any platform that has a JVM. Java is intended to let application developers 'write once, run anywhere' (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java code is compiled to bytecode (the .class files) which in turn get interpreted by the Java Virtual Machine (JVM). In theory, bytecode created by one Java compiler should run the same way on any JVM, even on a different kind of computer. The JVM might (and in real-world programs will) choose to compile into native machine commands the parts of the bytecode that are executed often. This is called 'Just-in-time (JIT) compilation'."
  },
  {
    "sub_topic_id": 483,
    "sub_topic": "2D Graphics in Java",
    "title": "Remarks",
    "description": "Graphics are visual images or designs on some surface, such as a wall, canvas, screen, paper, or stone to inform, illustrate, or entertain. It includes: pictorial representation of data, as in computer-aided design and manufacture, in typesetting and the graphic arts, and in educational and recreational software. Images that are generated by a computer are called computer graphics. The Java 2D API is powerful and complex. There are multiple ways to do 2D graphics in Java. Most methods of the Graphics class can be divided into two basic groups: Draw and fill methods, enabling you to render basic shapes, text, and images Attributes setting methods, which affect how that drawing and filling appears Code Example: Let us start this with a little example of drawing a rectangle and filling color in it. There we declare two classes, one class is MyPanel and other Class is Test. In class MyPanel we use drawRect( ) & fillRect( ) mathods to draw rectangle and fill Color in it. We set the color by setColor(Color.blue) method. In Second Class we Test our graphic which is Test Class we make a Frame and put MyPanel with p=new MyPanel() object in it.By running Test Class we see a Rectangle and a Blue Color Filled Rectangle."
  },
  {
    "sub_topic_id": 484,
    "sub_topic": "Alternative Collections",
    "title": "Remarks",
    "description": "This topic about Java collections from guava, apache, eclipse: Multiset, Bag, Multimap, utils function from this lib and so on. A Bag/ultiset stores each object in the collection together with a count of occurrences. Extra methods on the interface allow multiple copies of an object to be added or removed at once. JDK analog is HashMap<T, Integer>, when values is count of copies this key. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 485,
    "sub_topic": "Annotations",
    "title": "Remarks",
    "description": "In Java, an annotation is a form of syntactic metadata that can be added to Java source code. It provides data about a program that is not part of the program itself. Annotations have no direct effect on the operation of the code they annotate. Classes, methods, variables, parameters and packages are allowed to be annotated. Syntax: @AnnotationName // 'Marker annotation' (no parameters) @AnnotationName(someValue) // sets parameter with the name 'value' @AnnotationName(param1 = value1) // named parameter @AnnotationName(param1 = value1, param2 = value2) // multiple named parameters @AnnotationName(param1 = {1, 2, 3}) // named array parameter @AnnotationName({value1}) // array with single element as parameter with the name 'value'"
  },
  {
    "sub_topic_id": 486,
    "sub_topic": "Apache Commons Lang",
    "title": "Remarks",
    "description": "To implement the equals method of an object easily you could use the EqualsBuilder class. To implement the hashCode method of an object easily you could use the HashCodeBuilder class. To implement the toString method of an object easily you could use the ToStringBuilder class. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 487,
    "sub_topic": "AppDynamics and TIBCO BusinessWorks Instrumentation for Easy Integration",
    "title": "Remarks",
    "description": "As AppDynamics aims to provide a way to measure application performance, speed of development, delivery (deployment) of applications is an essential factor in making DevOps efforts a true success. Monitoring a TIBCO BW application with AppD is generally simple and not time consuming but when deploying large sets of applications rapid instrumentation is key. This guide shows how to instrument all of your BW applications in a single step without modifying each application before deploying."
  },
  {
    "sub_topic_id": 488,
    "sub_topic": "Applets",
    "title": "Remarks",
    "description": "Applets have been part of Java since its official release and have been used to teach Java and programming for a number of years. Recent years have seen an active push to move away from Applets and other browser plugins, with some browsers blocking them or actively not supporting them. In 2016, Oracle announced their plans to deprecate the plugin, Moving to a Plugin-Free Web Newer and better APIs are now available. An applet is a Java application that normally runs inside a web browser. The basic idea is to interact with the user without the need to interact with the server and transfer information. This concept was very successful around the year 2000 when internet communication was slow and expensive."
  },
  {
    "sub_topic_id": 489,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "Arrays allow for the storage and retrieval of an arbitrary quantity of values. They are analogous to vectors in mathematics. Arrays of arrays are analogous to matrices, and act as multidimensional arrays. Arrays can store any data of any type: primitives such as int or reference types such as Object. Object arrays are covariant, which means that just as Integer is a subclass of Number, Integer[] is a subclass of Number[]. Arrays are zero-based indexed, so the index of the first element is 0 and the index of the last element is the array capacity minus 1 (i.e. array.length - 1). Array types inherit their equals() (and hashCode()) implementations from java.lang.Object, so equals() will only return true when comparing against the exact same array object. To compare arrays for equality based on their values, use java.util.Arrays.equals, which is overloaded for all array types."
  },
  {
    "sub_topic_id": 490,
    "sub_topic": "Asserting",
    "title": "Remarks",
    "description": "By default, assertions are disabled at runtime. To enable assertions, you must run java with -ea flag. java -ea com.example.AssertionExample Assertions are statements that will throw an error if their expression evaluates to false. Assertions should only be used to test code; they should never be used in production. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 491,
    "sub_topic": "Atomic Types",
    "title": "Remarks",
    "description": "Java Atomic Types are simple mutable types that provide basic operations that are thread-safe and atomic without resorting to locking. They are intended for use in cases where locking would be a concurrency bottleneck, or where there is risk of deadlock or livelock. Many on essentially combinations of volatile reads or writes and CAS operations. Best way to understand this is to look at the source code directly. E.g. AtomicInteger, Unsafe.getAndSet. For simple multi-threaded code, using synchronization is acceptable. However, using synchronization does have a liveness impact, and as a codebase becomes more complex, the likelihood goes up that you will end up with Deadlock, Starvation, or Livelock. In cases of more complex concurrency, using Atomic Variables is often a better alternative, as it allows an individual variable to be accessed in a thread-safe manner without the overhead of using synchronized methods or code blocks."
  },
  {
    "sub_topic_id": 492,
    "sub_topic": "Audio",
    "title": "Remarks",
    "description": "Instead of using the javax.sound.sampled Clip, you can also use the AudioClip which is from the applet API. It is however recommended to use Clip since AudioClip is just older and presents limited functionalities. You can also go almost bare-metal when producing sound with java. This code will write raw binary data into the OS audio buffer to generate sound. It's extremely important to understand the limitations and necessary calculations to generating sound like this. Since playback is basically instantaneous, calculations need to be performed at almost real-time. As such this method is unusable for more complicated sound-sampling. For such purposes using specialized tools is the better approach. The following method generates and directly outputs a rectangle-wave of a given frequency in a given volume for a given duration."
  },
  {
    "sub_topic_id": 493,
    "sub_topic": "Autoboxing",
    "title": "Remarks",
    "description": "Autoboxing is the automatic conversion that Java compiler makes between primitive types and their corresponding object wrapper classes. Example, converting int -> Integer, double -> Double... If the conversion goes the other way, this is called unboxing. Typically, this is used in Collections that cannot hold other than Objects, where boxing primitive types is needed before setting them in the collection. Autoboxing can have performance issues when used frequently in your code.  http://docs.oracle.com/javase/1.5.0/docs/guide/language/autoboxing.html Integer auto-unboxing and auto-boxing gives performance issues?"
  },
  {
    "sub_topic_id": 494,
    "sub_topic": "Basic Control Structures",
    "title": "Remarks",
    "description": "All control structures, unless otherwise noted, make use of block statements. These are denoted by curly braces {}. This differs from normal statements, which do not require curly braces, but also come with a stiff caveat in that only the line immediately following the previous statement would be considered. Thus, it is perfectly valid to write any of these control structures without curly braces, so long as only one statement follows the beginning, but it is strongly discouraged, as it can lead to buggy implementations, or broken code."
  },
  {
    "sub_topic_id": 495,
    "sub_topic": "Benchmarks",
    "title": "Remarks",
    "description": "Writing performance benchmarks in java is not as simple as getting System.currentTimeMillis() in the beginning and in the end and calculating the difference. To write valid performance benchmarks, one should use proper tools. One of the tools for writing proper benchmark tests is JMH. Let's say we want to compare performance of searching an element in HashSet vs TreeSet. The easiest way to get JHM into your project - is to use maven and shade plugin. Also you can see pom.xml from JHM examples."
  },
  {
    "sub_topic_id": 496,
    "sub_topic": "BigDecimal",
    "title": "Remarks",
    "description": "The BigDecimal class provides operations for arithmetic (add, subtract, multiply, divide), scale manipulation, rounding, comparison, hashing, and format conversion. The BigDecimal represents immutable, arbitrary-precision signed decimal numbers. This class shall be used in a necessity of high-precision calculation. The BigDecimal class contains an internal cache of frequently used numbers e.g. 0 to 10. The BigDecimal.valueOf() methods are provided in preference to constructors with similar type parameters i.e. in the below example a is preferred to b."
  },
  {
    "sub_topic_id": 497,
    "sub_topic": "BigInteger",
    "title": "Remarks",
    "description": "The BigInteger class is used for mathematical operations involving large integers with magnitudes too large for primitive data types. For example 100-factorial is 158 digits - much larger than a long can represent. BigInteger provides analogues to all of Java's primitive integer operators, and all relevant methods from java.lang.Math as well as few other operations. BigInteger is immutable. Therefore you can't change its state. For example, the following won't work as sum won't be updated due to immutability."
  },
  {
    "sub_topic_id": 498,
    "sub_topic": "Bit Manipulation",
    "title": "Remarks",
    "description": "Unlike C/C++, Java is completely endian-neutral with respect to the underlying machine hardware. You do not get big or little endian behavior by default; you have to explicitly specify which behavior you want. The byte type is signed, with the range -128 to +127. To convert a byte value to its unsigned equivalent, mask it with 0xFF like this: (b & 0xFF). If an integer x is a power of 2, only one bit is set, whereas x-1 has all bits set after that. For example: 4 is 100 and 3 is 011 as binary number, which satisfies the aforementioned condition. Zero is not a power of 2 and has to be checked explicitly."
  },
  {
    "sub_topic_id": 499,
    "sub_topic": "BufferedWriter",
    "title": "Remarks",
    "description": "If you try to write from a BufferedWriter (using BufferedWriter.write()) after closing the BufferedWriter (using BufferedWriter.close()), it will throw an IOException. The BufferedWriter(Writer) constructor does NOT throw an IOException. However, the FileWriter(File) constructor throws a FileNotFoundException, which extends IOException. So catching IOException will also catch FileNotFoundException, there is never a need for a second catch statement unless you plan on doing something different with the FileNotFoundException."
  },
  {
    "sub_topic_id": 500,
    "sub_topic": "ByteBuffer",
    "title": "Remarks",
    "description": "The ByteBuffer class was introduced in java 1.4 to ease working on binary data. It's especially suited to use with primitive type data. It allows the creation, but also subsequent manipulation of a byte[]s on a higher abstraction level. DirectByteBuffer is special implementation of ByteBuffer that has no byte[] laying underneath. We can allocate such ByteBuffer by calling: ByteBuffer directBuffer = ByteBuffer.allocateDirect(16); This operation will allocate 16 bytes of memory. The contents of direct buffers may reside outside of the normal garbage-collected heap. We can verify whether ByteBuffer is direct by calling: directBuffer.isDirect(); // true The main characteristics of DirectByteBuffer is that JVM will try to natively work on allocated memory without any additional buffering so operations performed on it may be faster then those performed on ByteBuffers with arrays lying underneath. It is recomended to use DirectByteBuffer with heavy IO operations that rely on speed of execution, like real time communication."
  },
  {
    "sub_topic_id": 501,
    "sub_topic": "Bytecode Modification",
    "title": "Remarks",
    "description": "What's the logic behind this? getstatic - Retreives the value of a static field of a class. In this case, the PrintStream \"Out\" of System. ldc - Push a constant onto the stack. In this case, the String 'Hello World' invokevirtual - Invokes a method on a loaded reference on the stack and puts the result on the stack. Parameters of the method are also ta ken from the stack. Well, there has to be more right? There are 255 opcodes, but not all of them are implemented yet. A table with all of the current opcodes can be found here: Java bytecode instruction listings. How can I write / edit bytecode? There's multiple ways to write and edit bytecode. You can use a compiler, use a library, or use a program."
  },
  {
    "sub_topic_id": 502,
    "sub_topic": "C++ Comparison",
    "title": "Remarks",
    "description": "Java and C++ are similar languages. This topic serves as a quick reference guide for Java and C++ Engineers. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 503,
    "sub_topic": "Calendar and its Subclasses",
    "title": "Remarks",
    "description": "As of Java 8, Calendar and its subclasses have been superseded by the java.time package and its subpackages. They should be preferred, unless a legacy API requires Calendar. Calendar objects can be created by using getInstance() or by using the constructor GregorianCalendar. It's important to notice that months in Calendar are zero based, which means that JANUARY is represented by an int value 0. In order to provide a better code, always use Calendar constants, such as Calendar.JANUARY to avoid misunderstandings."
  },
  {
    "sub_topic_id": 504,
    "sub_topic": "Character encoding",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 505,
    "sub_topic": "Choosing Collections",
    "title": "Remarks",
    "description": "Java offers a wide variety of Collections. Choosing which Collection to use can be tricky. See the Examples section for an easy-to-follow flowchart to choose the right Collection for the job. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 506,
    "sub_topic": "Class - Java Reflection",
    "title": "Remarks",
    "description": "The java.lang.Class class provides many methods that can be used to get metadata, examine and change the run time behavior of a class. The java.lang and java.lang.reflect packages provide classes for java reflection. Where it is used The Reflection API is mainly used in: IDE (Integrated Development Environment) e.g. Eclipse, MyEclipse, NetBeans etc. Debugger Test Tools etc. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 507,
    "sub_topic": "Classes and Objects",
    "title": "Remarks",
    "description": "Objects have states and behaviors. Example: A dog has states - color, name, breed as well as behaviors – wagging the tail, barking, eating. An object is an instance of a class. Class − A class can be defined as a template/blueprint that describes the behavior/state that the object of its type support. Constructors are special methods named after the class and without a return type, and are used to construct objects. Constructors, like methods, can take input parameters. Constructors are used to initialize objects. Abstract classes can have constructors also. Sometimes the same functionality has to be written for different kinds of inputs. At that time, one can use the same method name with a different set of parameters. Each different set of parameters is known as a method signature. As seen per the example, a single method can have multiple signatures."
  },
  {
    "sub_topic_id": 508,
    "sub_topic": "Classloaders",
    "title": "Remarks",
    "description": "A classloader is a class whose primary purpose is to mediate the location and loading of classes used by an application. A class loader can also find and loaded resources. The standard classloader classes can load classes and resources from directories in the file system and from JAR and ZIP files. They can also download and cache JAR and ZIP files from a remote server. Classloaders are normally chained, so that the JVM will try to load classes from the standard class libraries in preference to application-provided sources. Custom classloaders allow the programmer to alter this. The also can do such things as decrypting bytecode files and bytecode modification."
  },
  {
    "sub_topic_id": 509,
    "sub_topic": "Collection Factory Methods",
    "title": "Remarks",
    "description": "The arrival of Java 9 brings many new features to Java's Collections API, one of which being collection factory methods. These methods allow for easy initialization of immutable collections, whether they be empty or nonempty. Note that these factory methods are only available for the following interfaces: List<E>, Set<E>, and Map<K, V>"
  },
  {
    "sub_topic_id": 510,
    "sub_topic": "Collections",
    "title": "Remarks",
    "description": "The collections framework in java.util provides a number of generic classes for sets of data with functionality that can't be provided by regular arrays.Collections framework contains interfaces for Collection<O>, with main sub-interfaces List<O> and Set<O>, and mapping collection Map<K,V>. Collections are the root interface and are being implemented by many other collection frameworks. Collections are objects that can store collections of other objects inside of them. You can specify the type of data stored in a collection using Generics. Collections generally use the java.util or java.util.concurrent namespaces. Java SE 1.4 Java 1.4.2 and below do not support generics. As such, you can not specify the type parameters that a collection contains. In addition to not having type safety, you must also use casts to get the correct type back from a collection. In addition to Collection<E>, there are multiple major types of collections, some of which have subtypes. List<E> is an ordered collection of objects. It is similar to an array, but does not define a size limit. Implementations will usually grow in size internally to accomodate new elements. Set<E> is a collection of objects that does not allow duplicates. SortedSet<E> is a Set<E> that also specifies element ordering. Map<K,V> is a collection of key/value pairs. SortedMap<K,V> is a Map<K,V> that also specifies element ordering."
  },
  {
    "sub_topic_id": 511,
    "sub_topic": "Command line Argument Processing",
    "title": "Remarks",
    "description": "When a regular Java application is launched using the java command (or equivalent), a main method will be called, passing the arguments from the command line in the args array. Unfortunately, the Java SE class libraries do not provide any direct support for command argument processing. This leaves you two alternatives: Implement the argument processing by hand in Java. Make use of a 3rd-party library. This Topic will attempt to cover some of the more popular 3rd-party libraries. For an extensive list of the alternatives, see this answer to the StackOverflow Question 'How to parse command line arguments in Java?'."
  },
  {
    "sub_topic_id": 512,
    "sub_topic": "Common Java Pitfalls",
    "title": "Remarks",
    "description": "This topic outlines some of the common mistakes made by beginners in Java. This includes any common mistakes in use of the Java language or understanding of the run-time environment. Mistakes associated with specific APIs can be described in topics specific to those APIs. Strings are a special case; they're covered in the Java Language Specification. Details other than common mistakes can be described in this topic on Strings."
  },
  {
    "sub_topic_id": 513,
    "sub_topic": "Comparable and Comparator",
    "title": "Remarks",
    "description": "When implementing a compareTo(..) method which depends upon a double, do not do the following:  public int comareTo(MyClass other) { return (int)(doubleField - ther.doubleField); //THIS IS BAD } The truncation caused by the (int) cast will cause the method to sometimes incorrectly return 0 instead of a positive or negative number, and can thus lead to comparison and sorting bugs. Instead, the simplest correct implementation is to use Double.compare, as such: public int comareTo(MyClass other) {return Double.compare(doubleField,other.doubleField); //THIS IS GOOD} A non-generic version of Comparable<T>, simply Comparable, has existed since Java 1.2. Other than for interfacing with legacy code, it's always better to implement the generic version Comparable<T>, as it doesn't require casting upon comparison. It is very standard for a class to be comparable to itself, as in: public class A implements Comparable<A> While it is possible to break from this paradigm, be cautious when doing so. A Comparator<T> can still be used on instances of a class if that class implements Comparable<T>. In this case, the Comparator's logic will be used; the natural ordering specified by the Comparable implementation will be ignored."
  },
  {
    "sub_topic_id": 514,
    "sub_topic": "CompletableFuture",
    "title": "Remarks",
    "description": "CompletableFuture is a class added to Java SE 8 which implements the Future interface from Java SE 5. In addition to supporting the Future interface it adds many methods that allow asynchronous callback when the future is completed. The following method will take a second or two depending on your connection to retrieve a web page and count the text length. Whatever thread calls it will block for that period of time. Also it rethrows an exception which is useful later on."
  },
  {
    "sub_topic_id": 515,
    "sub_topic": "Concurrent Collections",
    "title": "Remarks",
    "description": "A concurrent collection is a [collection][1] which permits access by more than one thread at the same time. Different threads can typically iterate through the contents of the collection and add or remove elements. The collection is responsible for ensuring that the collection doesn't become corrupt. [1]: http://stackoverflow.com/documentation/java/90/collections#t=201612221936497298484"
  },
  {
    "sub_topic_id": 516,
    "sub_topic": "Concurrent Programming (Threads)",
    "title": "Remarks",
    "description": "Concurrent computing is a form of computing in which several computations are executed concurrently instead of sequentially. Java language is designed to support concurrent programming through the usage of threads. Objects and resources can be accessed by multiple threads; each thread can potentially access any object in the program and the programmer must ensure read and write access to objects is properly synchronized between threads."
  },
  {
    "sub_topic_id": 517,
    "sub_topic": "Console I/O",
    "title": "Remarks",
    "description": "The method PrintWriter.format (called through System.out.format) can be used to print aligned strings in console. The method receives a String with the format information and a series of objects to format. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 518,
    "sub_topic": "Constructors",
    "title": "Remarks",
    "description": "While not required, constructors in Java are methods recognized by the compiler to instantiate specific values for the class which may be essential to the role of the object. This topic demonstrates proper usage of Java class constructors. The Java Language Specification talks at length about the exact nature of constructor semantics. They can be found in JLS §8.8. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 519,
    "sub_topic": "Converting to and from Strings",
    "title": "Remarks",
    "description": "To encode a string into a byte array, you can simply use the String#getBytes() method, with one of the standard character sets available on any Java runtime. You can get the value of other primitive data types as a String using one the String class's valueOf methods. You can also get any other Object (any instance of any class) as a String by calling .toString on it. For this to give useful output, the class must override toString(). Most of the standard Java library classes do, such as Date and others. The unchecked NumberFormatException exception will be thrown if a numeric valueOf(String) or parseXxx(...) method is called for a string that is not an acceptable numeric representation, or that represents a value that is out of range."
  },
  {
    "sub_topic_id": 520,
    "sub_topic": "Creating Images Programmatically",
    "title": "Remarks",
    "description": "BufferedImage.getGraphics() always returns Graphics2D. Using a VolatileImage may significantly improve the speed of drawing operations, but also has its drawbacks: its contents may be lost at any moment and they may have to be redrawn from scratch. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 521,
    "sub_topic": "Currency and Money",
    "title": "Remarks",
    "description": "Required JARs on classpath: javax.money:money-api:1.0 (JSR354 money and currency api) org.javamoney:moneta:1.0 (Reference implementation) javax:annotation-api:1.2. (Common annotations used by reference implementation). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 522,
    "sub_topic": "Date Class",
    "title": "Remarks",
    "description": "Internally, a Java Date object is represented as a long; it is the number of milliseconds since a specific time (referred to as the epoch). The original Java Date class had methods for dealing with time zones, etc., but these were deprecated in favor of the then-new Calendar class. So if all you want to do in your code is represent a specific time, you can create a Date class and store it, etc. If you want to print out a human-readable version of that date, however, you create a Calendar class and use its formatting to produce hours, minutes, seconds, days, time zones, etc. Keep in mind that a specific millisecond is displayed as different hours in different time zones; normally you want to display one in the 'local' time zone, but the formatting methods have to take into account that you may want to display it for some other one. Also be aware that the clocks used by JVMs do not usually have millisecond accuracy; the clock might only 'tick' every 10 milliseconds, and therefore, if timing things, you cannot rely on measuring things accurately at that level."
  },
  {
    "sub_topic_id": 523,
    "sub_topic": "Dates and Time (java.time.*)",
    "title": "Remarks",
    "description": "Before Java 8, there was DateFormat and SimpleDateFormat classes in the package java.text and this legacy code will be continued to be used for sometime. But, Java 8 offers a modern approach to handling Formatting and Parsing. In formatting and parsing first you pass a String object to DateTimeFormatter, and in turn use it for formatting or parsing. An important notice, instead of using Custom patterns, it is good practice to use predefined formatters. Your code look more clear and usage of ISO8061 will definitely help you in the long run."
  },
  {
    "sub_topic_id": 524,
    "sub_topic": "Default Methods",
    "title": "Remarks",
    "description": "Default Method introduced in Java 8, allows developers to add new methods to an interface without breaking the existing implementations of this interface. It provides flexibility to allow the interface to define an implementation which will be used as default when a class which implements that interface fails to provide an implementation of that method. Can be used within an interface, to introduce a behaviour without forcing existing subclasses to implement it. Can be overridden by subclasses or by a sub-interface. Are not allowed to override methods in java.lang.Object class. If a class implementing more than one interface, inherits default methods with identical method signatures from each of the intefaces, then it must override and provide its own interface as if they were not default methods (as part of resolving multiple inheritance). Although are intended to introduce a behaviour without breaking existing implementations, existing subclasses with a static method with same method signature as the newly introduced default method will still be broken. However this is true even in case of introducing an instance method in a superclass. Can be used within an interface, primarily intended to be used as a utility method for default methods. Cannot be overridden by subclasses or by a sub-interface (is hidden to them). However as is the case with static methods even now, each class or interface can have its own. Are not allowed to override instance methods in java.lang.Object class (as is presently the case for subclasses as well)."
  },
  {
    "sub_topic_id": 525,
    "sub_topic": "Dequeue Interface",
    "title": "Remarks",
    "description": "A Deque is linear collection that supports element insertion and removal at both ends. The name deque is short for 'double ended queue' and is usually pronounced 'deck'. Most Deque implementations place no fixed limits on the number of elements they may contain, but this interface supports capacity-restricted deques as well as those with no fixed size limit. The Deque interface is a richer abstract data type than both Stack and Queue because it implements both stacks and queues at same time. Generics can be used with Deque. Deque<Object> deque = new LinkedList<Object>(); When a deque is used as a queue, FIFO (First-In-First-Out) behavior results. Deques can also be used as LIFO (Last-In-First-Out) stacks. For more information about methods, go through this Documentation."
  },
  {
    "sub_topic_id": 526,
    "sub_topic": "Disassembling and Decompiling",
    "title": "Remarks",
    "description": "If you want to see the generated bytecode for a Java program, you can use the provided javap command to view it. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 527,
    "sub_topic": "Documenting Java Code",
    "title": "Remarks",
    "description": "Documentation for java code is often generated using javadoc. Javadoc was created by Sun Microsystems for the purpose of generating API documentation in HTML format from java source code. Using the HTML format gives the convenience of being able to hyperlink related documents together. Javadoc is a tool included with the JDK that allows in-code comments to be converted to an HTML documentation. The Java API Specification was generated using Javadoc. The same is true for much of the documentation of 3rd-party libraries."
  },
  {
    "sub_topic_id": 528,
    "sub_topic": "Dynamic Method Dispatch",
    "title": "Remarks",
    "description": "Dynamic Method Dispatch is a process in which the call to an overridden method is resolved at runtime rather than at compile-time. When an overridden method is called by a reference, Java determines which version of that method to execute based on the type of object it refer to. This is also know as runtime polymorphism. Dynamic Binding = Late binding; Abstract classes cannot be instantiated, but they can be sub-classed (Base for a child class); An abstract method is a method that is declared without an implementation; Abstract class may contain a mix of methods declared with or without an implementation; When an abstract class is sub-classed, the subclass usually provides implementations for all of the abstract methods in its parent class. However, if it does not, then the subclass must also be declared abstract; Dynamic method dispatch is a mechanism by which a call to an overridden method is resolved at runtime. This is how java implements runtime polymorphism. Upcasting : Casting a subtype to a supertype, upward to the inheritance tree. Runtime Polymorphism = Dynamic Polymorphism"
  },
  {
    "sub_topic_id": 529,
    "sub_topic": "Encapsulation",
    "title": "Remarks",
    "description": "Imagine you had a class with some pretty important variables and they were set (by other programmers from their code) to unacceptable values.Their code brought errors in your code. As a solution, In OOP, you allow the state of an object (stored in its variables) to be modified only through methods. Hiding the state of an object and providing all interaction through an objects methods is known as Data Encapsulation. It is much easier to start with marking a variable private and expose it if necessary than to hide an already public variable. There is one exception where encapsulation may not be beneficial: 'dumb' data structures (classes whose sole purpose is to hold variables)."
  },
  {
    "sub_topic_id": 530,
    "sub_topic": "Enum Map",
    "title": "Remarks",
    "description": "Java EnumMap class is the specialized Map implementation for enum keys. It inherits Enum and AbstractMap classes. the Parameters for java.util.EnumMap class. K: It is the type of keys maintained by this map. V: It is the type of mapped values. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 531,
    "sub_topic": "Enum starting with number",
    "title": "Remarks",
    "description": "Java does not allow the name of enum to start with number like 100A, 25K. In that case, we can append the code with _ (underscore) or any allowed pattern and make check of it. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 532,
    "sub_topic": "Enums",
    "title": "Remarks",
    "description": "Java enums (declared using the enum keyword) are shorthand syntax for sizable quantities of constants of a single class. Enums always extend java.lang.Enum, so it is impossible for an enum to extend a class. However, they can implement many interfaces. Because of their specialized representation, there are more efficient maps and sets that can be used with enums as their keys. These will often run quicker than their non-specialized counterparts. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 533,
    "sub_topic": "EnumSet class",
    "title": "Remarks",
    "description": "Java EnumSet class is the specialized Set implementation for use with enum types. It inherits AbstractSet class and implements the Set interface. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 534,
    "sub_topic": "Exceptions and exception handling",
    "title": "Remarks",
    "description": "Objects of type Throwable and its subtypes can be sent up the stack with the throw keyword and caught with try…catch statements. An exception can be caught and handled using the try...catch statement. (In fact try statements take other forms, as described in other examples about try...catch...finally and try-with-resources.). The primary use of exception stacktraces is to provide information about an application error and its context so that the programmer can diagnose and fix the problem. Sometimes it can be used for other things. For example, a SecurityManager class may need to examine the call stack to decide whether the code that is making a call should be trusted."
  },
  {
    "sub_topic_id": 535,
    "sub_topic": "Executor, ExecutorService and Thread pools",
    "title": "Remarks",
    "description": "The Executor interface in Java provides a way of decoupling task submission from the mechanics of how each task will be run, including details of thread use, scheduling, etc. An Executor is normally used instead of explicitly creating threads. With Executors, developers won't have to significantly rewrite their code to be able to easily tune their program's task-execution policy. When you schedule a task for repeated execution, depending on the ScheduledExecutorService used, your task might be suspended from any further execution, if an execution of your task causes an exception which isn't handled. See Mother F**k the ScheduledExecutorService!"
  },
  {
    "sub_topic_id": 536,
    "sub_topic": "Expressions",
    "title": "Remarks",
    "description": "Expressions in Java are the primary construct for doing calculations. For a reference on the operators that can be used in expressions, see Operators. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 537,
    "sub_topic": "File I/O",
    "title": "Remarks",
    "description": "Java I/O (Input and Output) is used to process the input and produce the output. Java uses the concept of stream to make I/O operation fast. The java.io package contains all the classes required for input and output operations. Handling files is also done in java by Java I/O API. The FileSystem API of Java 7 allows to read and add entries from or to a Zip file using the Java NIO file API in the same way as operating on any other filesystem. The FileSystem is a resource that should be properly closed after use, therefore the try-with-resources block should be used."
  },
  {
    "sub_topic_id": 538,
    "sub_topic": "FileUpload to AWS",
    "title": "Remarks",
    "description": "Upload File to AWS s3 bucket using spring rest API. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 539,
    "sub_topic": "Fluent Interface",
    "title": "Remarks",
    "description": "The primary goal of a Fluent Interface is increased readability. When used for constructing objects, the choices available to the caller can be made clearly and enforced via compile-time checks. For example, consider the following tree of options representing steps along the path to construct some complex object: A -> B   -> C -> D -> Done -> E -> Done -> F -> Done. -> G -> H -> I -> Done. A builder using a fluent interface would allow the caller to easily see what options are available at each step. For example, A -> B is possible, but A -> C is not and would result in a compile-time error."
  },
  {
    "sub_topic_id": 540,
    "sub_topic": "FTP (File Transfer Protocol)",
    "title": "Remarks",
    "description": "Syntax: FTPClient connect(InetAddress host, int port); FTPClient login(String username, String password); FTPClient disconnect(); FTPReply getReplyStrings(); boolean storeFile(String remote, InputStream local); OutputStream storeFileStream(String remote); boolean setFileType(int fileType); boolean completePendingCommand(). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 541,
    "sub_topic": "Functional Interfaces",
    "title": "Remarks",
    "description": "In Java 8+, a functional interface is an interface that has just one abstract method (aside from the methods of Object). See JLS §9.8. Functional Interfaces. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 542,
    "sub_topic": "Generating Java Code",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 543,
    "sub_topic": "Generics",
    "title": "Remarks",
    "description": "Generics are a facility of generic programming that extend Java's type system to allow a type or method to operate on objects of various types while providing compile-time type safety. In particular, the Java collections framework supports generics to specify the type of objects stored in a collection instance. Generics are implemented in Java through Type erasure, which means that during runtime the Type information specified in the instantiation of a generic class is not available. For example, the statement List<String> names = new ArrayList<>(); produces a list object from which the element type String cannot be recovered at runtime. However, if the list is stored in a field of type List<String>, or passed to a method/constructor parameter of this same type, or returned from a method of that return type, then the full type information can be recovered at runtime through the Java Reflection API. This also means that when casting to a generic type (e.g.: (List<String>) list), the cast is an unchecked cast. Because the parameter <String> is erased, the JVM cannot check if a cast from a List<?> to a List<String> is correct; the JVM only sees a cast for List to List at runtime."
  },
  {
    "sub_topic_id": 544,
    "sub_topic": "Getters and Setters",
    "title": "Remarks",
    "description": "This article discusses getters and setters; the standard way to provide access to data in Java classes. Encapsulation is a basic concept in OOP. It is about wrapping data and code as a single unit. In this case, it is a good practice to declare the variables as private and then access them through Getters and Setters to view and/or modify them. These private variables cannot be accessed directly from outside the class. Hence they are protected from unauthorized access. But if you want to view or modify them, you can use Getters and Setters. getXxx() method will return the current value of the variable xxx, while you can set the value of the variable xxx using setXxx(). So it begs the question; are public variables ever a good thing (or, at least, not evil)? I'm unsure. On one hand, you can see examples of public variables that have stood the test of time (IE: the out variable referenced in System.out). On the other, providing a public variable gives no benefit outside of extremely minimal overhead and potential reduction in wordiness. My guideline here would be that, if you're planning on making a variable public, you should judge it against these criteria with extreme prejudice: The variable should have no conceivable reason to ever change in its implementation. This is something that's extremely easy to screw up (and, even if you do get it right, requirements can change), which is why getters/setters are the common approach. If you're going to have a public variable, this really needs to be thought through, especially if released in a library/framework/API. The variable needs to be referenced frequently enough that the minimal gains from reducing verbosity warrants it. I don't even think the overhead for using a method versus directly referencing should be considered here. It's far too negligible for what I'd conservatively estimate to be 99.9% of applications. There's probably more than I haven't considered off the top of my head. If you're ever in doubt, always use getters/setters."
  },
  {
    "sub_topic_id": 545,
    "sub_topic": "Hashtable",
    "title": "Remarks",
    "description": "Hashtable is a class in Java collections which implements Map interface and extends the Dictionary Class Contains only unique elements and its synchronized. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 546,
    "sub_topic": "HttpURLConnection",
    "title": "Remarks",
    "description": "Using HttpUrlConnection on Android requires that you add the Internet permission to your app (in the AndroidManifest.xml). There are also other Java HTTP clients and libraries, such as Square's OkHttp, which are easier to use, and may offer better performance or more features. If you are just checking if a resource exists, it better to use a HEAD request than a GET. This avoids the overhead of transferring the resource. Note that the method only returns true if the response code is 200. If you anticipate redirect (i.e. 3XX) responses, then the method may need to be enhanced to honor them."
  },
  {
    "sub_topic_id": 547,
    "sub_topic": "Immutable Class",
    "title": "Remarks",
    "description": "Some immutable classes in Java: java.lang.String; The wrapper classes for the primitive types: java.lang.Integer, java.lang.Byte, java.lang.Character, java.lang.Short, java.lang.Boolean, java.lang.Long, java.lang.Double, java.lang.Float; Most enum classes are immutable, but this in fact depends on the concrete case.java.math.BigInteger and java.math.BigDecimal (at least objects of those classes themselves); java.io.File. Note that this represents an object external to the VM (a file on the local system), which may or may not exist, and has some methods modifying and querying the state of this external object. But the File object itself stays immutable."
  },
  {
    "sub_topic_id": 548,
    "sub_topic": "Immutable Objects",
    "title": "Remarks",
    "description": "Immutable objects have fixed state (no setters), so all state must be known at object creation time. Although not technically required, it is best practice to make all fields final. This will make the immutable class thread-safe (cf. Java Concurrency in Practice, 3.4.1). The examples show several patterns that can assist with achieving this. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 549,
    "sub_topic": "Inheritance",
    "title": "Remarks",
    "description": "Inheritance is a basic object oriented feature in which one class acquires and extends upon the properties of another class, using the keyword extends. For Interfaces and the keyword implements, see interfaces. Inheritance is often combined with generics so that the base class has one or more type parameters. See Creating a Generic Class. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 550,
    "sub_topic": "InputStreams and OutputStreams",
    "title": "Remarks",
    "description": "Note that most of the time you do NOT use InputStreams directly but use BufferedStreams, or similar. This is because InputStream reads from the source every time the read method is called. This can cause significant CPU usage in context switches into and out of the kernel. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 551,
    "sub_topic": "Installing Java (Standard Edition)",
    "title": "Remarks",
    "description": "This documentation page gives access to instructions for installing java standard edition on Windows, Linux, and macOS computers. Many Linux distributions use the alternatives command for switching between different versions of a command. You can use this for switching between different versions of Java installed on a machine. JDK and/or JRE releases for OpenJDK or Oracle can be installed using the package manager on most mainstream Linux distribution. (The choices that are available to you will depend on the distro.) As a general rule, the procedure is to open terminal window and run the commands shown below. (It is assumed that you have sufficient access to run commands as the 'root' user ... which is what the sudo command does. If you do not, then please talk to your system's administrators.) Using the package manager is recommended because it (generally) makes it easier to keep your Java installation up to date."
  },
  {
    "sub_topic_id": 552,
    "sub_topic": "Interfaces",
    "title": "Remarks",
    "description": "An interface is a reference type, similar to a class, which can be declared by using interface keyword. Interfaces can contain only constants, method signatures, default methods, static methods, and nested types. Method bodies exist only for default methods and static methods. Like abstract classes, Interfaces cannot be instantiated—they can only be implemented by classes or extended by other interfaces. Interface is a common way to achieve full abstraction in Java."
  },
  {
    "sub_topic_id": 553,
    "sub_topic": "Iterator and Iterable",
    "title": "Remarks",
    "description": "The java.util.Iterator is the standard Java SE interface for object that implement the Iterator design pattern. The java.lang.Iterable interface is for objects that can provide an iterator. It is possible to iterate over an array using the for-each loop, though java arrays do not implement Iterable; iterating is done by JVM using a non-accessible index in the background. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 554,
    "sub_topic": "Java Agents",
    "title": "Remarks",
    "description": "Agents can be added to a JVM at runtime. To load an agent you will need to use the Attach API's VirtualMachine.attatch(String id). This will not call premain((String agentArgs, Instrumentation inst) in the loaded agent, but instead will call agentmain(String agentArgs, Instrumentation inst). This requires Agent-Class to be set in the agent Manifest.mf. Starting a java agent will let the agent access the class Instrumentation. With Instrumentation you can call addTransformer(ClassFileTransformer transformer). ClassFileTransformers will let you rewrite the bytes of classes. The class has only a single method which supplies the ClassLoader that loads the class, the class's name, a java.lang.Class instance of it, it's ProtectionDomain, and lastly the bytes of the class itself."
  },
  {
    "sub_topic_id": 555,
    "sub_topic": "Java Compiler - 'javac'",
    "title": "Remarks",
    "description": "The javac command is used for compiling Java source files to bytecode files. Bytecode files are platform independent. This means that you can compile your code on one kind of hardware and operating system, and then run the code on any other platform that supports Java. The javac command is included in the Java Development Kit (JDK) distributions. The Java compiler and the rest of the standard Java toolchain places the following restrictions on the code: Source code is held in files with the suffix 'java' Bytecodes are held in files with the suffix '.class' For source and bytecode files in the file system, the file pathnames must reflect the package and class naming. Note: The javac compiler should not be confused with the Just in Time (JIT) compiler which compiles bytecodes to native code."
  },
  {
    "sub_topic_id": 556,
    "sub_topic": "Java deployment",
    "title": "Remarks",
    "description": "At the most fundamental level, a Java program can be deployed by copying a compiled class (i.e. a \".class\" file) or a directory tree containing compiled classes. However Java is normally deployed in one of the following ways: By copying a JAR file or collection of JAR files to the system where they will be executed; e.g. using javac. By copying or uploading a WAR, EAR or similar file to a 'servlet container' or 'application server'. By running some kind of application installer that automates the above. The installer might also install an embedded JRE. By putting the JAR files for the application onto a web server to allow them to be launched using Java WebStart. The Creating JAR, WAR and EAR files example summarizes the different ways to create these files. There are numerous open source and commercial 'installer generator' and 'EXE generator' tools for Java. Similarly, there are tools for obfuscating Java class files (to make reverse engineering harder) and for adding runtime license checking. These are all out of scope for the 'Java Programming Language' documentation."
  },
  {
    "sub_topic_id": 557,
    "sub_topic": "Java Editions, Versions, Releases and Distributions",
    "title": "Remarks",
    "description": "Java technology is both a programming language and a platform. The Java programming language is a high-level object-oriented language that has a particular syntax and style. A Java platform is a particular environment in which Java programming language applications run. There are several Java platforms. Many developers, even long-time Java programming language developers, do not understand how the different platforms relate to each other. All Java platforms consist of a Java Virtual Machine (VM) and an application programming interface (API). The Java Virtual Machine is a program, for a particular hardware and software platform, that runs Java technology applications. An API is a collection of software components that you can use to create other software components or applications. Each Java platform provides a virtual machine and an API, and this allows applications written for that platform to run on any compatible system with all the advantages of the Java programming language: platform-independence, power, stability, ease-of-development, and security."
  },
  {
    "sub_topic_id": 558,
    "sub_topic": "Java Floating Point Operations",
    "title": "Remarks",
    "description": "Floating-point numbers are numbers that have fractional parts (usually expressed with a decimal point). In Java, there is two primitive types for floating-point numbers which are float (uses 4 bytes), and double (uses 8 bytes). This documentation page is for detailing with examples operations that can be done on floating points in Java. The floating point representations used in Java for the float and double types have limited number of digits of precision. For the float type, the precision is 23 binary digits or about 8 decimal digits. For the double type, it is 52 bits or about 15 decimal digits. On top of that, some arithmetical operations will introduce rounding errors. Therefore, when a program compares floating point values, it standard practice to define an acceptable delta for the comparison. If the difference between the two numbers is less than the delta, they are deemed to be equal."
  },
  {
    "sub_topic_id": 559,
    "sub_topic": "Java Memory Management",
    "title": "Remarks",
    "description": "In Java, objects are allocated in the heap, and heap memory is reclaimed by automatic garbage collection. An application program cannot explicitly delete a Java object. The basic principles of Java garbage collection are described in the Garbage collection example. Other examples describe finalization, how to trigger the garbage collector by hand, and the problem of storage leaks. In the Garbage collection example, we implied that Java solves the problem of memory leaks. This is not actually true. A Java program can leak memory, though the causes of the leaks are rather different."
  },
  {
    "sub_topic_id": 560,
    "sub_topic": "Java Memory Model",
    "title": "Remarks",
    "description": "The Java Memory Model is the section of the JLS that specifies the conditions under which one thread is guaranteed to see the effects of memory writes made by another thread. The relevant section in recent editions is 'JLS 17.4 Memory Model' (in Java 8, Java 7, Java 6) There was a major overhaul of the Java Memory Model in Java 5 which (among other things) changed the way that volatile worked. Since then, the memory model been essentially unchanged."
  },
  {
    "sub_topic_id": 561,
    "sub_topic": "Java Native Access",
    "title": "Remarks",
    "description": "What is JNA? Java Native Access (JNA) is a community-developed library providing Java programs an easy access to native shared libraries (.dll files on windows, .so files on Unix ...) How can I use it? Firstly, download the latest release of JNA and reference its jna.jar in your project's CLASSPATH. Secondly, copy, compile and run the Java code below For the purpose of this introduction, we suppose the native platform in use is Windows. If you're running on another platform simply replace the string 'msvcrt' with the string 'c' in the code below. The small Java program below will print a message on the console by calling the C printf function."
  },
  {
    "sub_topic_id": 562,
    "sub_topic": "Java Native Interface",
    "title": "Remarks",
    "description": "Setting up JNI requires both a Java and a native compiler. Depending on the IDE and OS, there is some setting up required. A guide for Eclipse can be found here. A full tutorial can be found here. These are the steps for setting up the Java-C++ linkage on windows: Compile the Java source files (.java) into classes (.class) using javac. Create header (.h) files from the Java classes containing native methods using javah. These files 'instruct' the native code which methods it is responsible for implementing. Include the header files (#include) in the C++ source files (.cpp) implementing the native methods. Compile the C++ source files and create a library (.dll). This library contains the native code implementation. Specify the library path (-Djava.library.path) and load it in the Java source file (System.loadLibrary(...)). Callbacks (Calling Java methods from native code) requires to specify a method descriptor. If the descriptor is incorrect, a runtime error occurs. Because of this, it is helpful to have the descriptors made for us, this can be done with javap -s."
  },
  {
    "sub_topic_id": 563,
    "sub_topic": "Java Performance Tuning",
    "title": "Remarks",
    "description": "The internet is packed with tips for performance improvement of Java programs. Perhaps the number one tip is awareness. That means: Identify possible performance problems and bottlenecks. Use analyzing and testing tools. Know good practices and bad practices. The first point should be done during the design stage if speaking about a new system or module. If speaking about legacy code, analyzing and testing tools come into the picture. The most basic tool for analyzing your JVM performance is JVisualVM, which is included in the JDK. The third point is mostly about experience and extensive research, and of course raw tips that will show up on this page and others, like this."
  },
  {
    "sub_topic_id": 564,
    "sub_topic": "Java Pitfalls - Exception usage",
    "title": "Remarks",
    "description": "Several Java programming language misusage might conduct a program to generate incorrect results despite being compiled correctly. This topic main purpose is to list common pitfalls related to exception handling, and to propose the correct way to avoid having such pitfalls. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 565,
    "sub_topic": "Java Pitfalls - Language syntax",
    "title": "Remarks",
    "description": "Several Java programming language misusage might conduct a program to generate incorrect results despite being compiled correctly. This topic main purpose is to list common pitfalls with their causes, and to propose the correct way to avoid falling in such problems. This topic is about specific aspects of the Java language syntax that are either error prone or that that should not be used in certain ways. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 566,
    "sub_topic": "Java Pitfalls - Nulls and NullPointerException",
    "title": "Remarks",
    "description": "The value null is the default value for an uninitialized value of a field whose type is a reference type. NullPointerException (or NPE) is the exception that is thrown when you attempt to perform an inappropriate operation on the null object reference. Such operations include: calling an instance method on a null target object, accessing a field of a null target object, attempting to index a null array object or access its length, using a null object reference as the mutex in a synchronized block, casting a null object reference, unboxing a null object reference, and throwing a null object reference. The most common root causes for NPEs: forgetting to initialize a field with a reference type, forgetting to initialize elements of an array of a reference type, or not testing the results of certain API methods that are specified as returning null in certain circumstances. Examples of commonly used methods that return null include: The get(key) method in the Map API will return a null if you call it with a key that doesn't have a mapping. The getResource(path) and getResourceAsStream(path) methods in the ClassLoader and Class APIs will return null if the resource cannot be found. The get() method in the Reference API will return null if the garbage collector has cleared the reference. Various getXxxx methods in the Java EE servlet APIs will return null if you attempt fetch a non-existent request parameter, session or session attribute and so on. There are strategies for avoiding unwanted NPEs, such as explicitly testing for null or using 'Yoda Notation', but these strategies often have the undesirable result of hiding problems in your code that really ought to be fixed."
  },
  {
    "sub_topic_id": 567,
    "sub_topic": "Java Pitfalls - Performance Issues",
    "title": "Remarks",
    "description": "This topic describes a number of 'pitfalls' (i.e. mistakes that novice java programmers make) that relate to Java application performance. This topic describes some 'micro' Java coding practices that are inefficient. In most cases, the inefficiencies are relatively small, but it is still worth avoiding them is possible. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 568,
    "sub_topic": "Java Pitfalls - Threads and Concurrency",
    "title": "Remarks",
    "description": "A lot of people who are new to multi-threading think that using threads automatically make an application go faster. In fact, it is a lot more complicated than that. But one thing that we can state with certainty is that for any computer there is a limit on the number of threads that can be run at the same time: A computer has a fixed number of cores (or hyperthreads). A Java thread has to be scheduled to a core or hyperthread in order to run. If there are more runnable Java threads than (available) cores / hyperthreads, some of them must wait. This tells us that simply creating more and more Java threads cannot make the application go faster and faster. But there are other considerations as well: Each thread requires an off-heap memory region for its thread stack. The typical (default) thread stack size is 512Kbytes or 1Mbytes. If you have a significant number of threads, the memory usage can be significant. Each active thread will refer to a number of objects in the heap. That increases the working set of reachable objects, which impacts on garbage collection and on physical memory usage. The overheads of switching between threads is non-trivial. It typically entails a switch into the OS kernel space to make a thread scheduling decision. The overheads of thread synchronization and inter-thread signaling (e.g. wait(), notify() / notifyAll) can be significant. Depending on the details of your application, these factors generally mean that there is a 'sweet spot' for the number of threads. Beyond that, adding more threads gives minimal performance improvement, and can make performance worse. If your application create for each new task, then an unexpected increase in the workload (e.g. a high request rate) can lead to catastrophic behavior. A better way to deal with this is to use bounded thread pool whose size you can control (statically or dynamically). When there is too much work to do, the application needs to queue the requests. If you use an ExecutorService, it will take care of the thread pool management and task queuing."
  },
  {
    "sub_topic_id": 569,
    "sub_topic": "Java plugin system implementations",
    "title": "Remarks",
    "description": "If you use an IDE and/or build system, it is much easier to set up this kind of project. You create a main application module, then API module, then create a plugin module and make it dependent on the API module or both. Next, you configure where the project artifacts are to be put - in our case the compiled plugin jars can be sent straight to 'plugins' directory, thus avoiding doing manual movement."
  },
  {
    "sub_topic_id": 570,
    "sub_topic": "Java Print Service",
    "title": "Remarks",
    "description": "The Java Print Service API provides functionalities to discover print services and send print requests for them. It includes extensible print attributes based on the standard attributes specified in the Internet Printing Protocol (IPP) 1.1 from the IETF Specification, RFC 2911. For the most printing clients, is extremely useful to know if a print job has finished or failed. The Java Print Service API provide some functionalities to get informed about these scenarios. All we have to do is: provide an implementation for PrintJobListener interface and register this implementation at the print job."
  },
  {
    "sub_topic_id": 571,
    "sub_topic": "Java SE 7 Features",
    "title": "Remarks",
    "description": "In this topic you'll find a summary of the new features added to the Java programming language in Java SE 7. There are many other new features in other fields such as JDBC and Java Virtual Machine (JVM) that are not going to be covered in this topic. Binary Literals: The integral types (byte, short, int, and long) can also be expressed using the binary number system. To specify a binary literal, add the prefix 0b or 0B to the number. Strings in switch Statements: You can use a String object in the expression of a switch statement The try-with-resources Statement: The try-with-resources statement is a try statement that declares one or more resources. A resource is as an object that must be closed after the program is finished with it. The try-with-resources statement ensures that each resource is closed at the end of the statement. Any object that implements java.lang.AutoCloseable, which includes all objects which implement java.io.Closeable, can be used as a resource. Catching Multiple Exception Types and Rethrowing Exceptions with Improved Type Checking: a single catch block can handle more than one type of exception. This feature can reduce code duplication and lessen the temptation to catch an overly broad exception. Underscores in Numeric Literals: Any number of underscore characters (_) can appear anywhere between digits in a numerical literal. This feature enables you, for example, to separate groups of digits in numeric literals, which can improve the readability of your code. Type Inference for Generic Instance Creation: You can replace the type arguments required to invoke the constructor of a generic class with an empty set of type parameters (<>) as long as the compiler can infer the type arguments from the context. This pair of angle brackets is informally called the diamond. Improved Compiler Warnings and Errors When Using Non-Reifiable Formal Parameters with Varargs Methods"
  },
  {
    "sub_topic_id": 572,
    "sub_topic": "Java SE 8 Features",
    "title": "Remarks",
    "description": "In this topic you'll find a summary of the new features added to the Java programming language in Java SE 8. There are many other new features in other fields such as JDBC and Java Virtual Machine (JVM) that are not going to be covered in this topic. Lambda Expressions, a new language feature, has been introduced in this release. They enable you to treat functionality as a method argument, or code as data. Lambda expressions let you express instances of single-method interfaces (referred to as functional interfaces) more compactly. Method references provide easy-to-read lambda expressions for methods that already have a name. Default methods enable new functionality to be added to the interfaces of libraries and ensure binary compatibility with code written for older versions of those interfaces. New and Enhanced APIs That Take Advantage of Lambda Expressions and Streams in Java SE 8 describe new and enhanced classes that take advantage of lambda expressions and streams. Improved Type Inference - The Java compiler takes advantage of target typing to infer the type parameters of a generic method invocation. The target type of an expression is the data type that the Java compiler expects depending on where the expression appears. For example, you can use an assignment statement's target type for type inference in Java SE 7. However, in Java SE 8, you can use the target type for type inference in more contexts. Target Typing in Lambda Expressions Type Inference Repeating Annotations provide the ability to apply the same annotation type more than once to the same declaration or type use. Type Annotations provide the ability to apply an annotation anywhere a type is used, not just on a declaration. Used with a pluggable type system, this feature enables improved type checking of your code. Method parameter reflection - You can obtain the names of the formal parameters of any method or constructor with the method java.lang.reflect.Executable.getParameters. (The classes Method and Constructor extend the class Executable and therefore inherit the method Executable.getParameters) However, .class files do not store formal parameter names by default. To store formal parameter names in a particular .class file, and thus enable the Reflection API to retrieve formal parameter names, compile the source file with the -parameters option of the javac compiler. Date-time-api - Added new time api in java.time. If used this, you don't need to designate timezone."
  },
  {
    "sub_topic_id": 573,
    "sub_topic": "Java Sockets",
    "title": "Remarks",
    "description": "There are two types of Internet Protocol Traffic 1. TCP - Transmission Control Protocol 2. UDP - User Datagram Protocol TCP is a connection-oriented protocol. UDP is a connectionless protocol. TCP is suited for applications that require high reliability, and transmission time is relatively less critical. UDP is suitable for applications that need fast, efficient transmission, such as games. UDP's stateless nature is also useful for servers that answer small queries from huge numbers of clients. In simpler words - Use TCP when you cannot afford to loose data and when time to send and receive data doesn't matter. Use UDP when you cannot afford to loose time and when loss of data doesn't matter. There is an absolute guarantee that the data transferred remains intact and arrives in the same order in which it was sent in case of TCP. whereas there is no guarantee that the messages or packets sent would reach at all in UDP."
  },
  {
    "sub_topic_id": 574,
    "sub_topic": "Java Virtual Machine (JVM)",
    "title": "Remarks",
    "description": "JVM is an abstract computing machine or Virtual machine that resides in your RAM. It has a platform-independent execution environment that interprets Java bytecode into native machine code. (Javac is Java Compiler which compiles your Java code into Bytecode) Java program will be running inside the JVM which is then mapped onto the underlying physical machine. It is one of programming tool in JDK. (Byte code is platform-independent code which is run on every platform and Machine code is platform-specific code which is run in only specific platform such as windows or linux; it depend on execution.) Some of the components:- Class Loder - load the .class file into RAM. Bytecode verifier - check whether there are any access restriction violations in your code. Execution engine - convert the byte code into executable machine code. JIT(just in time) - JIT is part of JVM which used to improves the performance of JVM.It will dynamically compile or translate java bytecode into native machine code during execution time."
  },
  {
    "sub_topic_id": 575,
    "sub_topic": "JavaBean",
    "title": "Remarks",
    "description": "JavaBeans (TM) is a pattern for designing Java class APIs that allows instances (beans) to be used in various contexts and using various tools without explicitly writing Java code. The patterns consists of conventions for defining getters and setters for properties, for defining constructors, and for defining event listener APIs. In order for a class to be a Java Bean must follow this standard - in summary: All of its properties must be private and only accessible through getters and setters. It must have a public no-argument constructor. Must implement the java.io.Serializable interface."
  },
  {
    "sub_topic_id": 576,
    "sub_topic": "JAXB",
    "title": "Remarks",
    "description": "JAXB or Java Architecture for XML Binding (JAXB) is a software framework that allows Java developers to map Java classes to XML representations. This Page will introduce readers to JAXB using detailed examples about its functions provided mainly for marshaling and un-marshaling Java Objects into xml format and vice-versa. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 577,
    "sub_topic": "JAX-WS",
    "title": "Remarks",
    "description": "The way to do a JAX-WS call with basic authentication is a little unobvious. Here is an example where Service is the service class representation and Port is the service port you want to access. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 578,
    "sub_topic": "JMX",
    "title": "Remarks",
    "description": "The JMX technology provides the tools for building distributed, Web-based, modular and dynamic solutions for managing and monitoring devices, applications, and service-driven networks. By design, this standard is suitable for adapting legacy systems, implementing new management and monitoring solutions, and plugging into those of the future. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 579,
    "sub_topic": "JNDI",
    "title": "Remarks",
    "description": "The RMI Registry is part of RMI, not JNDI. To make this simple, we will use java.rmi.registry.CreateRegistry() to create the RMI Registry. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 580,
    "sub_topic": "JShell",
    "title": "Remarks",
    "description": "JShell is an interactive REPL for Java added in JDK 9. It allows developers to instantly evaluate expressions, test classes, and experiment with the Java language. Early access for jdk 9 can be obtained from: http://jdk.java.net/9/. JShell requires the Java 9 JDK, which can currently (March 2017) be downloaded as early access snapshots from jdk9.java.net. If, when you try to run the jshell command, you get an error beginning with Unable to locate an executable, make sure JAVA_HOME is set correctly."
  },
  {
    "sub_topic_id": 581,
    "sub_topic": "JSON in Java",
    "title": "Remarks",
    "description": "JSON (JavaScript Object Notation) is a lightweight, text-based, language-independent data exchange format that is easy for humans and machines to read and write. JSON can represent two structured types: objects and arrays. JSON is often used in Ajax applications, configurations, databases, and RESTful web services. The Java API for JSON Processing provides portable APIs to parse, generate, transform, and query JSON. This example focuses on parsing and creating JSON in Java using various libraries such as the Google Gson library, Jackson Object Mapper, and others.. Examples using other libraries could be found here: How to parse JSON in Java"
  },
  {
    "sub_topic_id": 582,
    "sub_topic": "Just in Time (JIT) compiler",
    "title": "Remarks",
    "description": "The Symantec JIT compiler was available in the Sun Java from 1.1.5 onwards, but it had problems. The Hotspot JIT compiler was added to Sun Java in 1.2.2 as a plugin. In Java 1.3, JIT was enabled by default. The Just-In-Time (JIT) compiler is a component of the Java™ Runtime Environment that improves the performance of Java applications at run time. Java programs consists of classes, which contain platform-neutral bytecodes that can be interpreted by a JVM on many different computer architectures. At run time, the JVM loads the class files, determines the semantics of each individual bytecode, and performs the appropriate computation. The additional processor and memory usage during interpretation means that a Java application performs more slowly than a native application. The JIT compiler helps improve the performance of Java programs by compiling bytecodes into native machine code at run time. The JIT compiler is enabled by default, and is activated when a Java method is called. The JIT compiler compiles the bytecodes of that method into native machine code, compiling it 'just in time' to run."
  },
  {
    "sub_topic_id": 583,
    "sub_topic": "JVM Flags",
    "title": "Remarks",
    "description": "It is strongly recommended that you use these options only: If you have a thorough understanding of your system. Are aware that, if used improperly, these options can have negative effect on the stability or performance of your system. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 584,
    "sub_topic": "JVM Tool Interface",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 585,
    "sub_topic": "Lambda Expressions",
    "title": "Remarks",
    "description": "Lambda expressions provide a clear and concise way of implementing a single-method interface using an expression. They allow you to reduce the amount of code you have to create and maintain. While similar to anonymous classes, they have no type information by themselves. Type inference needs to happen. Method references implement functional interfaces using existing methods rather than expressions. They belong to the lambda family as well. Lambdas can only operate on a functional interface, which is an interface with just one abstract method. Functional interfaces can have any number of default or static methods. (For this reason, they are sometimes referred to as Single Abstract Method Interfaces, or SAM Interfaces)."
  },
  {
    "sub_topic_id": 586,
    "sub_topic": "LinkedHashMap",
    "title": "Remarks",
    "description": "LinkedHashMap class is Hash table and Linked list implementation of the Map interface, with predictable iteration order. It inherits HashMap class and implements the Map interface. The important points about Java LinkedHashMap class are: A LinkedHashMap contains values based on the key. It contains only unique elements. It may have one null key and multiple null values. It is same as HashMap instead maintains insertion order."
  },
  {
    "sub_topic_id": 587,
    "sub_topic": "List vs SET",
    "title": "Remarks",
    "description": "What are differences between List and Set collection at the top level and How to choose when to use List in java and when to use Set in Java. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 588,
    "sub_topic": "Lists",
    "title": "Remarks",
    "description": "A list is an ordered collection of values. In Java, lists are part of the Java Collections Framework. Lists implement the java.util.List interface, which extends java.util.Collection. A list is an object which stores a an ordered collection of values. 'Ordered' means the values are stored in a particular order--one item comes first, one comes second, and so on. The individual values are commonly called 'elements'. Java lists typically provide these features: Lists may contain zero or more elements. Lists may contain duplicate values. In other words, an element can be inserted into a list more than once. Lists store their elements in a particular order, meaning one element comes first, one comes next, and so on. Each element has an index indicating its position within the list. The first element has index 0, the next has index 1, and so on. Lists permit inserting elements at the beginning, at the end, or at any index within the list. Testing whether a list contains a particular value generally means examining each element in the list. This means that the time to perform this check is O(n), proportional to the size of the list."
  },
  {
    "sub_topic_id": 589,
    "sub_topic": "Literals",
    "title": "Remarks",
    "description": "A Java literal is a syntactic element (i.e. something you find in the source code of a Java program) that represents a value. Examples are 1, 0.333F, false, 'X' and 'Hello world\n'. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 590,
    "sub_topic": "Local Inner Class",
    "title": "Remarks",
    "description": "A class i.e. created inside a method is called local inner class in java. If you want to invoke the methods of local inner class, you must instantiate this class inside the method. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 591,
    "sub_topic": "Localization and Internationalization",
    "title": "Remarks",
    "description": "Java comes with a powerful and flexible mechanism for localizing your applications, but it's also easy to misuse and wind up with a program that disregards or mangles the user's locale, and therefore how they expect your program to behave. Your users will expect to see data localized to the formats they're used to, and attempting to support this manually is a fools errand. Here is just a small example of the different ways users expect to see content you might assume is 'always' displayed a certain way. The java.util.Locale class is used to represent a 'geographical, political or cultural' region to localize a given text, number, date or operation to. A Locale object may thus contain a country, region, language, and also a variant of a language, for instance a dialect spoken in a certain region of a country, or spoken in a different country than the country from which the language originates. The Locale instance is handed to components that need to localize their actions, whether it is converting the input, output, or just need it for internal operations. The Locale class cannot do any internationalization or localization by itself."
  },
  {
    "sub_topic_id": 592,
    "sub_topic": "LocalTime",
    "title": "Remarks",
    "description": "As class name denotes, LocalTime represents a time without a time-zone. It doesn't represent a date. It's a simple label for a given time. The class is value-based and the equals method should be used when doing comparisons. This class is from the package java.time. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 593,
    "sub_topic": "log4j / log4j2",
    "title": "Remarks",
    "description": "Apache Log4j is a Java-based logging utility, it is one of several Java logging frameworks. This topic is to show how to setup and configure Log4j in Java with detailed examples on all of its possible aspects of usage. On August 5, 2015 the Logging Services Project Management Committee announced that Log4j 1.x had reached end of life. For complete text of the announcement please see the Apache Blog. Users of Log4j 1 are recommended to upgrade to Apache Log4j 2. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 594,
    "sub_topic": "Logging (java.util.logging)",
    "title": "Remarks",
    "description": "Java Logging Api has 7 levels. The levels in descending order are: SEVERE (highest value); WARNING; INFO; CONFIG; FINE; FINER; FINEST (lowest value). The default level is INFO (but this depends on the system and used a virtual machine). Note: There are also levels OFF (can be used to turn logging off) and ALL (the oposite of OFF). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 595,
    "sub_topic": "Maps",
    "title": "Remarks",
    "description": "A map is an object which store keys with an associated value for each key. A key and its value are sometimes called a key/value pair or an entry. Maps typically provide these features: Data is stored into the map in key/value pairs. The map may contain only one entry for a particular key. If a map contains an entry with a particular key, and you try to store a second entry with the same key, then the second entry will replace the first. In other words, this will change the value associated with the key. Maps provide fast operations to test whether a key exists in the map, to fetch the value associated with a key, and to remove a key/value pair. The most commonly used map implementation is HashMap. It works well with keys that are strings or numbers. Plain maps such as HashMap are unordered. Iterating through key/value pairs may return individual entries in any order. If you need to iterate through map entries in a controlled fashion, you should look at the following: Sorted maps such as TreeMap will iterate through keys in their natural order (or in an order that you can specify, by providing a Comparator). For example, a sorted map using numbers as keys would be expected to iterate through its entries in numeric order. LinkedHashMap permits iterating through entries in the same order that they were inserted into the map, or by the order of most recently accessed."
  },
  {
    "sub_topic_id": 596,
    "sub_topic": "Modules",
    "title": "Remarks",
    "description": "The use of modules is encouraged but not required, this allows existing code to continue working in Java 9. It also allows for a gradual transition to modular code. Any non-modular code is put in an unnamed module when it is compiled. This is a special module that is able to use types from all other modules but only from packages which have an exports declaration. All packages in the unnamed module are exported automatically. Keywords, e.g. module etc..., are restricted in use within the module declaration but can be continue to be used as identifiers elsewhere."
  },
  {
    "sub_topic_id": 597,
    "sub_topic": "Multi-Release JAR Files",
    "title": "Remarks",
    "description": "One of the features introduced in Java 9 is the multi-release Jar (MRJAR) which allows bundling code targeting multiple Java releases within the same Jar file. The feature is specified in JEP 238. The jar command can be used to create a multi-release Jar containing two versions of the same class compiled for both Java 8 and Java 9, albeit with a warning telling that the classes are identical. By setting Multi-Release: true in the MANIFEST.MF file, the Jar file becomes a multi-release Jar and the Java runtime (as long as it supports the MRJAR format) will pick the appropriate versions of classes depending on the current major version."
  },
  {
    "sub_topic_id": 598,
    "sub_topic": "Nashorn JavaScript engine",
    "title": "Remarks",
    "description": "Nashorn is a JavaScript engine developed in Java by Oracle, and has been released with Java 8. Nashorn allows embedding Javascript in Java applications via JSR-223 and allows to develop standalone Javascript applications, and it provides better runtime performance and better compliance with the ECMA normalized Javascript specification. Nashorn is a JavaScript engine written in Java and included in Java 8. Everything you need is bundled in the javax.script package. Note that the ScriptEngineManager provides a generic API allowing you to obtain script engines for various scripting languages (i.e. not only Nashorn, not only JavaScript)."
  },
  {
    "sub_topic_id": 599,
    "sub_topic": "Nested and Inner Classes",
    "title": "Remarks",
    "description": "Using Java, developers have the ability to define a class within another class. Such a class is called a Nested Class. Nested Classes are called Inner Classes if they were declared as non-static, if not, they are simply called Static Nested Classes. This page is to document and provide details with examples on how to use Java Nested and Inner Classes. The Java Language Specification (JLS) classifies the different kinds of Java class as follows: A top level class is a class that is not a nested class. A nested class is any class whose declaration occurs within the body of another class or interface. An inner class is a nested class that is not explicitly or implicitly declared static. An inner class may be a non-static member class, a local class, or an anonymous class. A member class of an interface is implicitly static so is never considered to be an inner class. In practice programmers refer to a top level class that contains an inner class as the 'outer class'. Also, there is a tendency to use 'nested class' to refer to only to (explicitly or implicitly) static nested classes. Note that there is a close relationship between anonymous inner classes and the lambdas, but lambdas are classes."
  },
  {
    "sub_topic_id": 600,
    "sub_topic": "Networking",
    "title": "Remarks",
    "description": "Syntax: new Socket('localhost', 1234); //Connects to a server at address \"localhost\" and port 1234; new SocketServer(\"localhost\", 1234); //Creates a socket server that can listen for new sockets at address localhost and port 1234; socketServer.accept(); //Accepts a new Socket object which can be used to communicate with the client. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 601,
    "sub_topic": "New File I/O",
    "title": "Remarks",
    "description": "The Path class is used to programmaticaly represent a path in the file system (and can therefore point to files as well as directories, even to non-existent ones). A path can be obtained using the helper class Paths. Paths can be joined using the resolve() method. The path passed has to be a partial path, which is a path that doesn't include the root element. Paths may contain the elements . (which points to the directory you're currently in) and ..(which points to the parent directory). When used in a path, . can be removed at any time without changing the path's destination, and .. can be removed together with the preceding element."
  },
  {
    "sub_topic_id": 602,
    "sub_topic": "NIO - Networking",
    "title": "Remarks",
    "description": "SelectionKey defines the different selectable operations and information between its Selector and Channel. In particular, the attachment can be used to store connection-related information. Handling OP_READ is pretty straight-forward. However, care should be taken when dealing with OP_WRITE: most of the time, data can be written to sockets so the event will keep firing. Make sure to register OP_WRITE only before you want to write data (see that answer). Also, OP_CONNECT should be cancelled once the Channel has connected (because, well, it is connected. See this and that answers on SO). Hence the OP_CONNECT removal after finishConnect() succeeded."
  },
  {
    "sub_topic_id": 603,
    "sub_topic": "Non-Access Modifiers",
    "title": "Remarks",
    "description": "Non-Access Modifiers do not change the accessibility of variables and methods, but they do provide them special properties. Example: abstract: final; static; strictfp; synchronized; transient; volatile. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 604,
    "sub_topic": "NumberFormat",
    "title": "Remarks",
    "description": "Different countries have different number formats and considering this we can have different formats using Locale of java. Using locale can help in formatting Locale locale = new Locale('en', 'IN'); NumberFormat numberFormat = NumberFormat.getInstance(locale); using above format you can perform various tasks Format Number numberFormat.format(10000000.99); Format Currency NumberFormat currencyFormat = NumberFormat.getCurrencyInstance(locale); currencyFormat.format(10340.999); Format Percentage NumberFormat percentageFormat = NumberFormat.getPercentInstance(locale); percentageFormat.format(10929.999); Control Number of Digits  numberFormat.setMinimumIntegerDigits(int digits) numberFormat.setMaximumIntegerDigits(int digits) numberFormat.setMinimumFractionDigits(int digits) numberFormat.setMaximumFractionDigits(int digits)"
  },
  {
    "sub_topic_id": 605,
    "sub_topic": "Object Class Methods and Constructor",
    "title": "Remarks",
    "description": "This documentation page is for showing details with example about java class constructors and about Object Class Methods which are automatically inherited from the superclass Object of any newly created class. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 606,
    "sub_topic": "Object Cloning",
    "title": "Remarks",
    "description": "Cloning can be tricky, especially when the object's fields hold other objects. There are situations where you want to perform a deep copy, instead of only copying the field values (i.e. references to the other objects). The bottom line is clone is broken, and you should think twice before implementing the Cloneable interface and overriding the clone method. The clone method is declared in the Object class and not in the Cloneable interface, so Cloneable fails to function as an interface because it lacks a public clone method. The result is the contract for using clone is thinly documented and weakly enforced. For example, a class that overrides clone sometimes relies on all its parent classes also overriding clone. They are not enforced to do so, and if they do not your code may throw exceptions. A much better solution for providing cloning functionality is to provide a copy constructor or copy factory. Refer to Joshua Bloch's Effective Java Item 11: Override clone judiciously."
  },
  {
    "sub_topic_id": 607,
    "sub_topic": "Object References",
    "title": "Remarks",
    "description": "This should help you understand a 'Null Pointer Exception' -- one gets one of those because an object reference is null, but the program code expects the program to use something in that object reference. However, that deserves its own topic... This topic explains the concept of an object reference; it is targeted at people who are new to programming in Java. You should already be familiar with some terms and meanings: class definition, main method, object instance, and the calling of methods 'on' an object, and passing parameters to methods."
  },
  {
    "sub_topic_id": 608,
    "sub_topic": "Operators",
    "title": "Remarks",
    "description": "An operator is a symbol (or symbols) that tells a Java program to perform an operation on one, two or three operands. An operator and its operands form an expression (see the Expressions topic). The operands of an operator are themselves expressions. This topic describes the 40 or so distinct operators defined by Java. The separate Expressions topic explains: how operators, operands and other things are combined into expressions, now the expressions are evaluated, and how expression typing, conversions, and expression evaluation work. Operators in Java programming language are special symbols that perform specific operations on one, two, or three operands, and then return a result."
  },
  {
    "sub_topic_id": 609,
    "sub_topic": "Optional",
    "title": "Remarks",
    "description": "Optional is a container object which may or may not contain a non-null value. If a value is present, isPresent() will return true and get() will return the value. Additional methods that depend on the presence of the contained value are provided, such as orElse(), which returns a default value if value not present, and ifPresent() which executes a block of code if the value is present. Syntax: Optional.empty() // Creates an empty Optional instance. Optional.of(value) // Returns an Optional with the specified non-null value. A NullPointerException will be thrown if the passed value is null. Optional.ofNullable(value) // Returns an Optional with the specified value that may be null."
  },
  {
    "sub_topic_id": 610,
    "sub_topic": "Oracle Official Code Standard",
    "title": "Remarks",
    "description": "The examples above strictly follow the new official style guide from Oracle. They are in other words not subjectively made up by the authors of this page. The official style guide has been carefully written to be backward compatible with the original style guide and the majority of code out in the wild. The official style guide has been peer reviewed by among others, Brian Goetz (Java Language Architect) and Mark Reinhold (Chief Architect of the Java Platform). The examples are non-normative; While they intend to illustrate correct way of formatting the code, there may be other ways to correctly format the code. This is a general principle: There may be several ways to format the code, all adhering to the official guidelines."
  },
  {
    "sub_topic_id": 611,
    "sub_topic": "Packages",
    "title": "Remarks",
    "description": "package in java is used to group class and interfaces. This helps developer to avoid conflict when there are huge numbers of classes. If we use this package the classes we can create a class/interface with same name in different packages. By using packages we can import the piece of again in another class. There many built in packages in java like > 1.java.util > 2.java.lang > 3.java.io We can define our own user defined packages. Packages provide access protection. Package statement must be first line of source code. There can only be one package in one source file. With help of packages conflict between different modules can be avoided."
  },
  {
    "sub_topic_id": 612,
    "sub_topic": "Parallel programming with Fork/Join framework",
    "title": "Remarks",
    "description": "The fork/join framework in Java is ideal for a problem that can be divided into smaller pieces and solved in parallel. The fundamental steps of a fork/join problem are: Divide the problem into multiple pieces; Solve each of the pieces in parallel to each other; Combine each of the sub-solutions into one overall solution; A ForkJoinTask is the interface that defines such a problem. It is generally expected that you will subclass one of its abstract implementations (usually the RecursiveTask) rather than implement the interface directly. In this example, we are going to sum a collection of integers, dividing until we get to batch sizes of no more than ten."
  },
  {
    "sub_topic_id": 613,
    "sub_topic": "Polymorphism",
    "title": "Remarks",
    "description": "Polymorphism is one of main OOP(object oriented programming) concepts. Polymorphism word was derived from the greek words 'poly'and 'morphs'. Poly means 'many' and morphs means 'forms' (many forms). There are two ways to perform polymorphism. Method Overloading and Method Overriding. Interfaces are another way to achieve polymorphism in Java, apart from class based inheritance. Interfaces define a list of methods which form the API of the program. Classes must implement an interface by overriding all its methods."
  },
  {
    "sub_topic_id": 614,
    "sub_topic": "Preferences",
    "title": "Remarks",
    "description": "Preferences can be used to store user settings that reflect a user's personal application settings, e.g. their editor font, whether they prefer the application to be started in full-screen mode, whether they checked a 'don't show this again' checkbox and things like that. All instances of Preferences are always thread-safe across the threads of a single Java Virtual Machine (JVM). Because Preferences can be shared across multiple JVMs, there are special methods that deal with synchronizing changes across virtual machines. If you have an application which is supposed to run in a single instance only, then no external synchronization is required. If you have an application which runs in multiple instances on a single system and therefore Preferences access needs to be coordinated between the JVMs on the system, then the sync() method of any Preferences node may be used to ensure changes to the Preferences node are visible to other JVMs on the system"
  },
  {
    "sub_topic_id": 615,
    "sub_topic": "Primitive Data Types",
    "title": "Remarks",
    "description": "The 8 primitive data types byte, short, int, long, char, boolean, float, and double are the types that store most raw numerical data in Java programs. Java has 8 primitive data types, namely boolean, byte, short, char, int, long, float and double. (All other types are reference types. This includes all array types, and built-in object types / classes that have special significance in the Java language; e.g. String, Class and Throwable and its subclasses.) The result of all operations (addition, subtraction, multiplication, etc) on a primitive type is at least an int, thus adding a short to a short produces an int, as does adding a byte to a byte, or a char to a char. A compiler encodes loads of literal values of types byte and short using Java Virtual Machine instructions that sign-extend those values to values of type int at compile-time or run-time. Loads of literal values of types boolean and char are encoded using instructions that zero-extend the literal to a value of type int at compile-time or run-time. [..]. Thus, most operations on values of actual types boolean, byte, char, and short are correctly performed by instructions operating on values of computational type int. Given the Java Virtual Machine's one-byte opcode size, encoding types into opcodes places pressure on the design of its instruction set. If each typed instruction supported all of the Java Virtual Machine's run-time data types, there would be more instructions than could be represented in a byte. [...] Separate instructions can be used to convert between unsupported and supported data types as necessary."
  },
  {
    "sub_topic_id": 616,
    "sub_topic": "Process",
    "title": "Remarks",
    "description": "Notice that the API recommends that, as of version 1.5, the preferred way to create a Process is using ProcessBuilder.start(). Another important remark is that the exit value produced by waitFor is dependent from the program/script being executed. For instance, the exit codes produced by calc.exe are different from notepad.exe. The ProcessBuilder class makes it easy to send a command through the command line. All it requires is a List of Strings that make up the commands to be entered. You simply call the start() method on your ProcessBuilder instance to execute the command."
  },
  {
    "sub_topic_id": 617,
    "sub_topic": "Properties Class",
    "title": "Remarks",
    "description": "The properties object contains key and value pair both as a string. The java.util.Properties class is the subclass of Hashtable. It can be used to get property value based on the property key. The Properties class provides methods to get data from properties file and store data into properties file. Moreover, it can be used to get properties of system. Advantage of properties file. Recompilation is not required, if information is changed from properties file: If any information is changed from"
  },
  {
    "sub_topic_id": 618,
    "sub_topic": "Queues and Deques",
    "title": "Remarks",
    "description": "A BlockingQueue is an interface, which is a queue that blocks when you try to dequeue from it and the queue is empty, or if you try to enqueue items to it and the queue is already full. A thread trying to dequeue from an empty queue is blocked until some other thread inserts an item into the queue. A thread trying to enqueue an item in a full queue is blocked until some other thread makes space in the queue, either by dequeuing one or more items or clearing the queue completely. BlockingQueue methods come in four forms, with different ways of handling operations that cannot be satisfied immediately, but may be satisfied at some point in the future: one throws an exception, the second returns a special value (either null or false, depending on the operation), the third blocks the current thread indefinitely until the operation can succeed, and the fourth blocks for only a given maximum time limit before giving up."
  },
  {
    "sub_topic_id": 619,
    "sub_topic": "Random Number Generation",
    "title": "Remarks",
    "description": "Nothing is really random and thus the javadoc calls those numbers pseudorandom. Those numbers are created with a pseudorandom number generator. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 620,
    "sub_topic": "Readers and Writers",
    "title": "Remarks",
    "description": "Readers and Writers and their respective subclasses provide simple I/O for text / character-based data. The BufferedReader class is a wrapper for other Reader classes that serves two main purposes: A BufferedReader provides buffering for the wrapped Reader. This allows an application to read characters one at a time without undue I/O overheads. A BufferedReader provides functionality for reading text a line at a time. Basics of using a BufferedReader The normal pattern for using a BufferedReader is as follows. First, you obtain the Reader that you want to read characters from. Next you instantiate a BufferedReader that wraps the Reader. Java StringWriter class is a character stream that collects output from string buffer, which can be used to construct a string. The StringWriter class extends the Writer class. In StringWriter class, system resources like network sockets and files are not used, therefore closing the StringWriter is not necessary."
  },
  {
    "sub_topic_id": 621,
    "sub_topic": "Recursion",
    "title": "Remarks",
    "description": "Recursion occurs when a method calls itself. Such a method is called recursive. A recursive method may be more concise than an equivalent non-recursive approach. However, for deep recursion, sometimes an iterative solution can consume less of a thread's finite stack space. This topic includes examples of recursion in Java. There are two preconditions for using recursive functions to solving a specific problem: There must be a base condition for the problem, which will be the endpoint for the recursion. When a recursive function reaches the base condition, it makes no further (deeper) recursive calls. Each level of recursion should be attempting a smaller problem. The recursive function thus divides the problem into smaller and smaller parts. Assuming that the problem is finite, this will ensure that the recursion terminates. In Java there is a third precondition: it should not be necessary to recurse too deeply to solve the problem"
  },
  {
    "sub_topic_id": 622,
    "sub_topic": "Reference Data Types",
    "title": "Remarks",
    "description": "Dereferencing happens with the . operator. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 623,
    "sub_topic": "Reference Types",
    "title": "Remarks",
    "description": "Java has four main different reference types. They are: Strong Reference; Weak Reference; Soft Reference; Phantom Reference;. 1. Strong Reference This is the usual form of creating objects. MyObject myObject = new MyObject(); The variable holder is holding a strong reference to the object created. As long as this variable is live and holds this value, the MyObject instance will not be collected by the garbage collector. 2. Weak Reference When you do not want to keep an object longer, and you need to clear/free the memory allocated for an object as soon as possible, this is the way to do so. WeakReference myObjectRef = new WeakReference(MyObject); Simply, a weak reference is a reference that isn't strong enough to force an object to remain in memory. Weak references allow you to leverage the garbage collector's ability to determine reachability for you, so you don't have to do it yourself."
  },
  {
    "sub_topic_id": 624,
    "sub_topic": "Reflection API",
    "title": "Remarks",
    "description": "Reflection is commonly used by programs which require the ability to examine or modify the runtime behavior of applications running in the JVM. Java Reflection API is used for that purpose where it makes it possible to inspect classes, interfaces, fields and methods at runtime, without knowing their names at compile time. And It also makes it possible to instantiate new objects, and to invoke methods using reflection. Keep in mind that reflection might decrease performance, only use it when your task cannot be completed without reflection. From the Java tutorial The Reflection API : Because reflection involves types that are dynamically resolved, certain Java virtual machine optimizations can not be performed. Consequently, reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications."
  },
  {
    "sub_topic_id": 625,
    "sub_topic": "Regular Expressions",
    "title": "Remarks",
    "description": "A regular expression is a special sequence of characters that helps in matching or finding other strings or sets of strings, using a specialized syntax held in a pattern. Java has support for regular expression usage through the java.util.regex package. This topic is to introduce and help developers understand more with examples on how Regular Expressions must be used in Java."
  },
  {
    "sub_topic_id": 626,
    "sub_topic": "Remote Method Invocation (RMI)",
    "title": "Remarks",
    "description": "RMI requires 3 components: client, server and a shared remote interface. The shared remote interface defines the client-server contract by specifying the methods a server must implement. The interface must be visible to the server so that it can implement the methods; the interface must be visible to the client so that it knows which methods ('services') the server provides. Any object implementing a remote interface is destined to take the role of a server. As such, a client-server relationship in which the server can also invoke methods in the client is in fact a server-server relationship. This is termed callback since the server can call back the 'client'. With this in mind, it is acceptable to use the designation client for the servers that function as such. The shared remote interface is any interface extending Remote. An object that functions as a server undergoes the following: Implements the shared remote interface, either explicitly or implicitly by extending UnicastRemoteObject which implements Remote. Exported, either implicitly if it extends UnicastRemoteObject, or explicitly by being passed to UnicastRemoteObject#exportObject. Binded in a registry, either directly through Registry or indirectly through Naming. This is only necessary for establishing initial communication since further stubs can be passed directly through RMI. In the project setup, the client and server projects are completely unrelated, but each specifies a shared project in its build path. The shared project contains the remote interfaces."
  },
  {
    "sub_topic_id": 627,
    "sub_topic": "Resources (on classpath)",
    "title": "Remarks",
    "description": "A resource is file-like data with a path-like name, which resides in the classpath. The most common use of resources is bundling application images, sounds, and read-only data (such as default configuration). Resources can be accessed with the ClassLoader.getResource and ClassLoader.getResourceAsStream methods. The most common use case is to have resources placed in the same package as the class which reads them; the Class.getResource and Class.getResourceAsStream methods serve this common use case. The only difference between a getResource method and getResourceAsStream method is that the former returns a URL, while the latter opens that URL and returns an InputStream. The methods of ClassLoader accept a path-like resource name as an argument and search each location in the ClassLoader’s classpath for an entry matching that name. If a classpath location is a .jar file, a jar entry with the specified name is considered a match. If a classpath location is a directory, a relative file under that directory with the specified name is considered a match. The resource name is similar to the path portion of a relative URL. On all platforms, it uses forward slashes (/) as directory separators. It must not start with a slash. The corresponding methods of Class are similar, except: The resource name may start with a slash, in which case that initial slash is removed and the rest of the name is passed to the corresponding method of ClassLoader. If the resource name does not start with a slash, it is treated as relative to the class whose getResource or getResourceAsStream method is being called. The actual resource name becomes package/name, where package is the name of the package to which the class belongs, with each period replaced by a slash, and name is the original argument given to the method."
  },
  {
    "sub_topic_id": 628,
    "sub_topic": "RSA Encryption",
    "title": "Remarks",
    "description": "OAEP is less vulnerable to padding oracle attacks than PKCS#1 v1.5 padding. GCM is also protected against padding oracle attacks. Decryption can be performed by first retrieving the length of the encapsulated key and then by retrieving the encapsulated key. The encapsulated key can then be decrypted using the RSA private key that forms a key pair with the public key. After that the AES/GCM encrypted ciphertext can be decrypted to the original plaintext. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 629,
    "sub_topic": "Runtime Commands",
    "title": "Remarks",
    "description": "Sometimes you need a piece of code to execute when the program stops, such as releasing system resources that you open. You can make a thread run when the program stops with the addShutdownHook. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 630,
    "sub_topic": "Scanner",
    "title": "Remarks",
    "description": "The Scanner class was introduced in Java 5. The reset() method was added in Java 6, and a couple of new constructors were added in Java 7 for interoperability with the (then) new Path interface. You can use Scanner to read all of the text in the input as a String, by using \\Z (entire input) as the delimiter. For example, this can be used to read all text in a text file in one line. You can use custom delimiters (regular expressions) with Scanner, with .useDelimiter(','), to determine how the input is read. This works similarly to String.split(...). For example, you can use Scanner to read from a list of comma separated values in a String. This will allow you to read every element in the input individually. Note that you should not use this to parse CSV data, instead, use a proper CSV parser library, see CSV parser for Java for other possibilities."
  },
  {
    "sub_topic_id": 631,
    "sub_topic": "Secure objects",
    "title": "Remarks",
    "description": "This class enables a programmer to create an object and protect its confidentiality with a cryptographic algorithm. Given any Serializable object, one can create a SealedObject that encapsulates the original object, in serialized format (i.e., a 'deep copy'), and seals (encrypts) its serialized contents, using a cryptographic algorithm such as AES, DES, to protect its confidentiality. The encrypted content can later be decrypted (with the corresponding algorithm using the correct decryption key) and de-serialized, yielding the original object."
  },
  {
    "sub_topic_id": 632,
    "sub_topic": "Security & Cryptography",
    "title": "Remarks",
    "description": "Security practices in Java can be separated into two broad, vaguely defined categories; Java platform security, and secure Java programming. Java platform security practices deal with managing the security and integrity of the JVM. It includes such topics as managing JCE providers and security policies. Secure Java programming practices concern the best ways to write secure Java programs. It includes such topics as using random numbers and cryptography, and preventing vulnerabilities."
  },
  {
    "sub_topic_id": 633,
    "sub_topic": "Security & Cryptography",
    "title": "Remarks",
    "description": "While the JCE secures cryptog raphic operations and key generation, it is up to the developer to actually manage their keys. More information needs to be provided here. One commonly-accepted best practice for handling keys at runtime is to store them only as byte arrays, and never as strings. This is because Java strings are immutable, and cannot be manually 'cleared' or 'zeroed out' in memory; while a reference to a string can be removed, the exact string will remain in memory until its segment of memory is garbage-collected and reused. An attacker would have a large window in which they could dump the program's memory and easily find the key. Contrarily, byte arrays are mutable, and can have their contents overwritten in place; it is a good idea to 'zero-out' your keys as soon as you no longer need them."
  },
  {
    "sub_topic_id": 634,
    "sub_topic": "SecurityManager",
    "title": "Remarks",
    "description": "Java Virtual Machines (JVMs) can be run with a SecurityManager installed. The SecurityManager governs what the code running in the JVM is allowed to do, based on factors such as where the code was loaded from and what certificates were used to sign the code. The SecurityManager can be installed by setting the java.security.manager system property on the command line when starting the JVM: java -Djava.security.manager <main class name> or programatically from within Java code: System.setSecurityManager(new SecurityManager()) The standard Java SecurityManager grants permissions on the basis of a Policy, which is defined in a policy file. If no policy file is specified, the default policy file under $JAVA_HOME/lib/security/java.policy will be used."
  },
  {
    "sub_topic_id": 635,
    "sub_topic": "Serialization",
    "title": "Remarks",
    "description": "Java provides a mechanism, called object serialization where an object can be represented as a sequence of bytes that includes the object's data as well as information about the object's type and the types of data stored in the object. After a serialized object has been written into a file, it can be read from the file and deserialized that is, the type information and bytes that represent the object and its data can be used to recreate the object in memory."
  },
  {
    "sub_topic_id": 636,
    "sub_topic": "ServiceLoader",
    "title": "Remarks",
    "description": "ServiceLoader can be used to get instances of classes extending a given type(=service) that are specified in a file packed in a .jar file. The service that is extended/implemented is often a interface, but this is not required. The extending/implementing classes need to provide a zero argument constructor for the ServiceLoader to instantiate them. To be discovered by the ServiceLoader a text file with the name of the fully qualified type name of the implemented service needs to be stored inside the META-INF/services directory in the jar file. This file contains one fully qualified name of a class implementing the service per line."
  },
  {
    "sub_topic_id": 637,
    "sub_topic": "Sets",
    "title": "Remarks",
    "description": "A set is a data structure which contains a set of elements with an important property that no two elements in the set are equal.  Types of Set: HashSet: A set backed by a hash table (actually a HashMap instance); Linked HashSet: A Set backed by Hash table and linked list, with predictable iteration order; TreeSet: A NavigableSet implementation based on a TreeMap. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 638,
    "sub_topic": "Singletons",
    "title": "Remarks",
    "description": "A singleton is a class that only ever has one single instance. For more information on the Singleton design pattern, please refer to the Singleton topic in the Design Patterns tag. The JVM provides a guarantee that enum values will not be instantiated more than once each, which gives the enum singleton pattern a very strong defense against reflection attacks. What the enum pattern doesn't protect against is other developers physically adding more elements to the source code. Consequently, if you choose this implementation style for your singletons it is imperative that you very clearly document that no new values should be added to those enums."
  },
  {
    "sub_topic_id": 639,
    "sub_topic": "Sockets",
    "title": "Remarks",
    "description": "A socket is one end-point of a two-way communication link between two programs running on the network. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 640,
    "sub_topic": "SortedMap",
    "title": "Remarks",
    "description": "Keypoint :- SortedMap interface extends Map. entries are maintained in an ascending key order. Methods of sorted Map : Comparator comparator( ). Object firstKey( ). SortedMap headMap(Object end). Object lastKey( ). SortedMap subMap(Object start, Object end). SortedMap tailMap(Object start). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 641,
    "sub_topic": "Splitting a string into fixed length parts",
    "title": "Remarks",
    "description": "The goal here is to not lose content, so the regex must not consume (match) any input. Rather it must match between the last character of the previous target input and the first character of the next target input. eg for 8-character substrings, we need to break the input up (ie match) at the places marked below: a b c d e f g h i j k l m n o p q r s t u v w x y z  Ignore the spaces in the input which were required to show between character positions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 642,
    "sub_topic": "Stack-Walking API",
    "title": "Remarks",
    "description": "Prior to Java 9, access to the thread stack frames was limited to an internal class sun.reflect.Reflection. Specifically the method sun.reflect.Reflection::getCallerClass. Some libraries relies on this method which is deprecated. An alternative standard API is now provided in JDK 9 via the java.lang.StackWalker class, and is designed to be efficient by allowing lazy access to the stack frames. Some applications may use this API to traverse the execution stack and filter on classes."
  },
  {
    "sub_topic_id": 643,
    "sub_topic": "Streams",
    "title": "Remarks",
    "description": "A Stream represents a sequence of elements and supports different kind of operations to perform computations upon those elements. With Java 8, Collection interface has two methods to generate a Stream: stream() and parallelStream(). Stream operations are either intermediate or terminal. Intermediate operations return a Stream so multiple intermediate operations can be chained before the Stream is closed. Terminal operations are either void or return a non-stream result."
  },
  {
    "sub_topic_id": 644,
    "sub_topic": "String Tokenizer",
    "title": "Remarks",
    "description": "The java.util.StringTokenizer class allows you to break a string into tokens. It is simple way to break string. The set of delimiters (the characters that separate tokens) may be specified either at creation time or on a per-token basis. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 645,
    "sub_topic": "StringBuffer",
    "title": "Remarks",
    "description": "Key Points :- used to created mutable (modifiable) string. Mutable :- Which can be changed. is thread-safe i.e. multiple threads cannot access it simultaneously. Methods :- public synchronized StringBuffer append(String s); public synchronized StringBuffer insert(int offset, String s); public synchronized StringBuffer replace(int startIndex, int endIndex, String str); public synchronized StringBuffer delete(int startIndex, int endIndex); public synchronized StringBuffer reverse(); public int capacity(); public void ensureCapacity(int minimumCapacity); public char charAt(int index); public int length(); public String substring(int beginIndex); public String substring(int beginIndex, int endIndex)"
  },
  {
    "sub_topic_id": 646,
    "sub_topic": "StringBuilder",
    "title": "Remarks",
    "description": "Java StringBuilder class is used to create mutable (modifiable) string. The Java StringBuilder class is same as StringBuffer class except that it is non-synchronized. It is available since JDK 1.5. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 647,
    "sub_topic": "Strings",
    "title": "Remarks",
    "description": "Since Java strings are immutable, all methods which manipulate a String will return a new String object. They do not change the original String. This includes to substring and replacement methods that C and C++ programers would expect to mutate the target String object. Use a StringBuilder instead of String if you want to concatenate more than two String objects whose values cannot be determined at compile-time. This technique is more performant than creating new String objects and concatenating them because StringBuilder is mutable. StringBuffer can also be used to concatenate String objects. However, this class is less performant because it is designed to be thread-safe, and acquires a mutex before each operation. Since you almost never need thread-safety when concatenating strings, it is best to use StringBuilder. If you can express a string concatenation as a single expression, then it is better to use the + operator. The Java compiler will convert an expression containing + concatenations into an efficient sequence of operations using either String.concat(...) or StringBuilder. The advice to use StringBuilder explicitly only applies when the concatenation involves a multiple expressions."
  },
  {
    "sub_topic_id": 648,
    "sub_topic": "sun.misc.Unsafe",
    "title": "Remarks",
    "description": "The Unsafe class allows a program to do things that are not allowed by the Java compiler. Normal programs should avoid using Unsafe. WARNINGS: If you make a mistake using the Unsafe APIs, your applications are liable to cause the JVM to crash and/or exhibit symptoms that are hard to diagnose. The Unsafe API is subject to change without notice. If you use it in your code, you may need to rewrite the code when changing Java versions."
  },
  {
    "sub_topic_id": 649,
    "sub_topic": "super keyword",
    "title": "Remarks",
    "description": "super keyword is used to call parent class constructor. This constructor can be default constructor or parameterized constructor. Default constructor : super(); Parameterized constructor : super(int no, double amount, String name);. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 650,
    "sub_topic": "The Classpath",
    "title": "Remarks",
    "description": "Java class loading: The JVM (Java Virtual Machine) will load classes as and when the classes are required (this is called lazy-loading). Locations of the classes to be used are specified in three places:- Those required by the Java Platform are loaded first, such as those in the Java Class Library and it's dependencies. Extension classes are loaded next (i.e. those in jre/lib/ext/) User-defined classes via the classpath are then loaded Classes are loaded using classes that are subtypes of java.lang.ClassLoader. This described in a more detail in this Topic: Classloaders. Classpath: The classpath is a parameter used by the JVM or compiler which specifies the locations of user-defined classes and packages. This can be set in the command line as with most of these examples or through an environmental variable (CLASSPATH)"
  },
  {
    "sub_topic_id": 651,
    "sub_topic": "The Java Command - 'java' and 'javaw'",
    "title": "Remarks",
    "description": "The java command is used for running a Java application from the command line. It is available as a part of any Java SE JRE or JDK. On Windows systems there are two variants of the java command: The java variant launches the application in a new console window. The javaw variant launches the application without creating a new console window. On other systems (e.g. Linux, Mac OSX, UNIX) only the java command is provided, and it does not launch a new console window. The <opt> symbol in the syntax denotes an option on the java command line. The 'Java Options' and 'Heap and stack sizing options' topics cover the most commonly used options. Others are covered in the JVM Flags topic."
  },
  {
    "sub_topic_id": 652,
    "sub_topic": "The java.util.Objects Class",
    "title": "Remarks",
    "description": "For null check in method Object nullableObject = methodReturnObject(); if (Objects.isNull(nullableObject)) {return;} For not null check in method Object nullableObject =  methodReturnObject(); if (Objects.nonNull(nullableObject)) { return;}. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 653,
    "sub_topic": "ThreadLocal",
    "title": "Remarks",
    "description": "Best used for objects which depend on internals during invoking a call, but are stateless otherwise, like SimpleDateFormat, Marshaller For Random ThreadLocal usage, consider using ThreadLocalRandom. Java ThreadLocal is used to create thread local variables. It is known that threads of an Object share it’s variables, so the variable is not thread safe. We can use synchronization for thread safety but if we want to avoid synchronization,ThreadLocal allows us to create variables which are local to the thread, i.e. only that thread can read or write to those variables, so the other threads executing the same piece of code will not be able to access each others ThreadLocal variables. This can be usedwe can use ThreadLocal variables. in situations where you have a thread pool like for example in a web service. For example, Creating a SimpleDateFormat object every time for every request is time consuming and a Static one cannot be created as SimpleDateFormat is not thread safe, so we can create a ThreadLocal so that we can perform thread safe operations without the overhead of creating SimpleDateFormat every time."
  },
  {
    "sub_topic_id": 654,
    "sub_topic": "TreeMap and TreeSet",
    "title": "Remarks",
    "description": "TreeMap and TreeSet are basic Java collections added in Java 1.2. TreeMap is a mutable, ordered, Map implementation. Similarly, TreeSet is a mutable, ordered Set implementation. TreeMap is implemented as a Red-Black tree, which provides O(log n) access times. TreeSet is implemented using a TreeMap with dummy values. Both collections are not thread-safe. TreeMap and TreeSet are not thread-safe collections, so care must be taken to ensure when used in multi-threaded programs. Both TreeMap and TreeSet are safe when read, even concurrently, by multiple threads. So if they have been created and populated by a single thread (say, at the start of the program), and only then read, but not modified by multiple threads, there's no reason for synchronization or locking."
  },
  {
    "sub_topic_id": 655,
    "sub_topic": "Type Conversion",
    "title": "Remarks",
    "description": "As with primitives, objects can be cast both explicitly and implicitly. Implicit casting happens when the source type extends or implements the target type (casting to a superclass or interface). Explicit casting has to be done when the source type is extended or implemented by the target type (casting to a subtype). This can produce a runtime exception (ClassCastException) when the object being cast is not of the target type (or the target's subtype). The boolean type cannot be cast to/from any other primitive type. A char can be cast to/from any numeric type by using the code-point mappings specified by Unicode. A char is represented in memory as an unsigned 16-bit integer value (2 bytes), so casting to byte (1 byte) will drop 8 of those bits (this is safe for ASCII characters). The utility methods of the Character class use int (4 bytes) to transfer to/from code-point values, but a short (2 bytes) would also suffice for storing a Unicode code-point."
  },
  {
    "sub_topic_id": 656,
    "sub_topic": "Unit Testing",
    "title": "Remarks",
    "description": "Unit testing is an integral part of test-driven development, and an important feature for building any robust application. In Java, Unit testing is almost exclusively performed using external libraries and frameworks, most of which have their own documentation tag. This stub serves as a means of introducing the reader to the tools available, and their respective documentation. Unit Test Frameworks: There are numerous frameworks available for unit testing within Java. The most popular option by far is JUnit. It is documented under the following: JUnit; JUnit4 - Proposed tag for JUnit4 features; not yet implemented. Other unit test frameworks do exist, and have documentation available: TestNG; Unit Testing Tools; There are several other tools used for unit testing: Mockito - Mocking framework; allows objects to be mimicked. Useful for mimicking the expected behavior of an external unit within a given unit's test, as to not link the external unit's behavior to the given unit's tests. JBehave - BDD Framework. Allows tests to be linked to user behaviors (allowing requirement/scenario validation). No documents tag available at time of writing; here is an external link."
  },
  {
    "sub_topic_id": 657,
    "sub_topic": "Using Other Scripting Languages in Java",
    "title": "Remarks",
    "description": "The Java Scripting API enables external scripts to interact with Java The Scripting API can enable interaction between the script and java. The Scripting Languages must have an implementation of Script Engine on the classpath. By Default JavaScript (also known as ECMAScript) is provided by nashorn by default. Every Script Engine has a script context where all the variables, functions, methods are stored in bindings. Sometimes you might want to use multiple contexts as they support redirecting the output to a buffered Writer and error to another. There are many other script engine libraries like Jython and JRuby. As long as they are on the classpath you can eval code. We can use bindings to expose variables into the script. We need multiple bindings in some cases as exposing variables to the engine basically is exposing variables to only that engine, sometimes we require to expose certain variables like system environment and path that is the same for all engines of the same type. In that case, we require a binding which is a global scope. Exposing variables to that expose it to all script engines created by the same EngineFactory"
  },
  {
    "sub_topic_id": 658,
    "sub_topic": "Using the static keyword",
    "title": "Remarks",
    "description": "As the static keyword is used for accessing fields and methods without an instantiated class, it can be used to declare constants for use in other classes. These variables will remain constant across every instantiation of the class. By convention, static variables are always ALL_CAPS and use underscores rather than camel case. ex:  static E STATIC_VARIABLE_NAME As constants cannot change, static can also be used with the final modifier"
  },
  {
    "sub_topic_id": 659,
    "sub_topic": "Using ThreadPoolExecutor in MultiThreaded applications.",
    "title": "Remarks",
    "description": "When creating a performant and data-driven application, it can be very helpful to complete time-intensive tasks in an asynchronous manner and to have multiple tasks running concurrently. This topic will introduce the concept of using ThreadPoolExecutors to complete multiple ansynchronous tasks concurrently. While good software design often maximizes code reusability, sometimes it can be useful to define asynchronous tasks inline in your code via Lambda expressions to maximize code readability. In this example, we will create a single class which contains a main() method. Inside this method, we will use Lambda expressions to create and execute instances of Callable and Runnable<T>."
  },
  {
    "sub_topic_id": 660,
    "sub_topic": "Varargs (Variable Argument)",
    "title": "Remarks",
    "description": "A “varargs” method argument allows callers of that method to specify multiple arguments of the designated type, each as a separate argument. It is specified in the method declaration by three ASCII periods (...) after the base type. The method itself receives those arguments as a single array, whose element type is the type of the varargs argument. The array is created automatically (though callers are still permitted to pass an explicit array instead of passing multiple values as separate method arguments). Rules for varargs: Varargs must be the last argument. There can be only one Varargs in the method. You must follow above rules otherwise program will give compile error."
  },
  {
    "sub_topic_id": 661,
    "sub_topic": "Visibility (controlling access to members of a class)",
    "title": "Remarks",
    "description": "Access level modifiers determine whether other classes can use a particular field or invoke a particular method. There are two levels of access control: At the top level—public, or package-private (no explicit modifier). At the member level—public, private, protected, or package-private (no explicit modifier). A class may be declared with the modifier public, in which case that class is visible to all classes everywhere. If a class has no modifier (the default, also known as package-private), it is visible only within its own package. At the member level, you can also use the public modifier or no modifier (package-private) just as with top-level classes, and with the same meaning. For members, there are two additional access modifiers: private and protected. The private modifier specifies that the member can only be accessed in its own class. The protected modifier specifies that the member can only be accessed within its own package (as with package-private) and, in addition, by a subclass of its class in another package. The following table shows the access to members permitted by each modifier."
  },
  {
    "sub_topic_id": 662,
    "sub_topic": "WeakHashMap",
    "title": "Remarks",
    "description": "Key Points:- Implementation of Map. stores only weak references to its keys. Weak References : The objects that are referenced only by weak references are garbage collected eagerly; the GC won’t wait until it needs memory in that case. Diffrence between Hashmap and WeakHashMap:- If the Java memory manager no longer has a strong reference to the object specified as a key, then the entry in the map will be removed in WeakHashMap."
  },
  {
    "sub_topic_id": 663,
    "sub_topic": "XJC",
    "title": "Remarks",
    "description": "XJC is a Java SE tool that compiles an XML schema file into fully annotated Java classes. It is distributed within the JDK package and is located at /bin/xjc path. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Java (PDF) Language (PDF): https://riptutorial.com/ebook/java."
  },
  {
    "sub_topic_id": 664,
    "sub_topic": "XML Parsing using the JAXP APIs",
    "title": "Remarks",
    "description": "XML Parsing is the interpretation of XML documents in order to manipulate their content using sensible constructs, be they 'nodes', 'attributes', 'documents', 'namespaces', or events related to these constructs. Java has a native API for XML document handling, called JAXP, or Java API for XML Processing. JAXP and a reference implementation has been bundled with every Java release since Java 1.4 (JAXP v1.1) and has evolved since. Java 8 shipped with JAXP version 1.6. The API provides different ways of interacting with XML documents, which are : The DOM interface (Document Object Model); The SAX interface (Simple API for XML); The StAX interface (Streaming API for XML)."
  },
  {
    "sub_topic_id": 665,
    "sub_topic": "XML XPath Evaluation",
    "title": "Remarks",
    "description": "XPath expressions are used to navigate and select one or more nodes within an XML tree document, such as selecting a certain element or attribute node. See this W3C recommendation for a reference on this language. Using the same example as Evaluating a NodeList in an XML document, here is how you would make multiple XPath calls efficiently. Overall, two calls to XPathExpression.evaluate() will be much more efficient than two calls to XPath.evaluate()."
  },
  {
    "sub_topic_id": 666,
    "sub_topic": "XOM - XML Object Model",
    "title": "Remarks",
    "description": "In order to load the XML data with XOM you will need to make a Builder from which you can build it into a Document. Builder builder = new Builder(); Document doc = builder.build(file); To get the root element, the highest parent in the xml file, you need to use the getRootElement() on the Document instance. Element root = doc.getRootElement(); Now the Element class has a lot of handy methods that make reading xml really easy. Some of the most useful are listed below: getChildElements(String name) - returns an Elements instance that acts as an array of elements getFirstChildElement(String name) - returns the first child element with that tag. getValue() - returns the value inside the element. getAttributeValue(String name) - returns the value of an attribute with the specified name. When you call the getChildElements() you get a Elements instance. From this you can loop through and call the get(int index) method on it to retrieve all the elements inside."
  },
  {
    "sub_topic_id": 667,
    "sub_topic": "Getting started with JavaScript",
    "title": "Remarks",
    "description": "JavaScript (not to be confused with Java) is a dynamic, weakly-typed language used for client-side as well as server-side scripting. JavaScript is a case-sensitive language. This means the language considers capital letters to be different from their lowercase counterparts. Keywords in JavaScript are all lowercase. JavaScript is a commonly referenced implementation of ECMAScript standard. Topics in this tag often refer to the use of JavaScript within the browser, unless otherwise stated. JavaScript files alone can't be run directly by the browser; it's necessary to embed them in an HTML document. If you have some JavaScript code you'd like to try, you can embed it in some placeholder content like this, and save the result as example.html"
  },
  {
    "sub_topic_id": 668,
    "sub_topic": ".postMessage() and MessageEvent",
    "title": "Remarks",
    "description": ".postMessage() method is a way to safely allow communication between cross-origin scripts. Normally, two different pages, can only directly communicate with each other using JavaScript when they are under the same origin, even if one of them is embedded into another (e.g. iframes) or one is opened from inside the other (e.g. window.open()). With .postMessage(), you can work around this restriction while still staying safe. You can only use .postMessage() when you have access to both pages' JavaScript code. Since the receiver needs to validate the sender and process the message accordingly, you can only use this method to communicate between two scripts you have access to. We will build an example to send messages to a child window and have the messages be displayed on the child window. The parent/sender page will be assumed to be http://sender.com and child/receiver page will be assumed to be http://receiver.com for the example."
  },
  {
    "sub_topic_id": 669,
    "sub_topic": "AJAX",
    "title": "Remarks",
    "description": "AJAX stands for 'Asynchronous JavaScript and XML'. Although the name includes XML, JSON is more often used due to it's simpler formatting and lower redundancy. AJAX allows the user to communicate with external resources without reloading the webpage. AJAX stands for Asynchronous JavaScript and XML. Nevertheless you can actually use other types of data and—in the case of xmlhttprequest—switch to the deprecated synchronous mode. AJAX allows web pages to send HTTP requests to the server and receive a response, without needing to reload the entire page."
  },
  {
    "sub_topic_id": 670,
    "sub_topic": "Anti-patterns",
    "title": "Remarks",
    "description": "Chaining assignments as part of a var declaration will create global variables unintentionally. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 671,
    "sub_topic": "Arithmetic (Math)",
    "title": "Remarks",
    "description": "The clz32 method is not supported in Internet Explorer or Safari. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 672,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "Summary: Arrays in JavaScript are, quite simply, modified Object instances with an advanced prototype, capable of performing a variety of list-related tasks. They were added in ECMAScript 1st Edition, and other prototype methods arrived in ECMAScript 5.1 Edition. Warning: If a numeric parameter called n is specified in the new Array() constructor, then it will declare an array with n amount of elements, not declare an array with 1 element with the value of n! console.log(new Array(53)); // This array has 53 'undefined' elements! That being said, you should always use [] when declaring an array: console.log([53]); // Much better!"
  },
  {
    "sub_topic_id": 673,
    "sub_topic": "Arrow Functions",
    "title": "Remarks",
    "description": "Arrow functions are a concise way of writing anonymous, lexically scoped functions in ECMAScript 2015 (ES6). For more information on functions in JavaScript, please view the Functions documentation. Arrow functions are part of the ECMAScript 6 specification, so browser support may be limited. The following table shows the earliest browser versions that support arrow functions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 674,
    "sub_topic": "Async functions (async/await)",
    "title": "Remarks",
    "description": "async and await build on top of promises and generators to express asynchronous actions inline. This makes asynchronous or callback code much easier to maintain. Functions with the async keyword return a Promise, and can be called with that syntax. Inside an async function the await keyword can be applied to any Promise, and will cause all of the function body after the await to be executed after the promise resolves. Async functions are a syntactic sugar over promises and generators. They help you make your code more readable, maintainable, easier to catch errors in, and with fewer levels of indentation."
  },
  {
    "sub_topic_id": 675,
    "sub_topic": "Async Iterators",
    "title": "Remarks",
    "description": "An async function is one that returns a promise. await yields to the caller until the promise resolves and then continues with the result. An iterator allows the collection to be looped through with a for-of loop. An async iterator is a collection where each iteration is a promise which can be awaited using a for-await-of loop. Async iterators are a stage 3 proposal. They are in Chrome Canary 60 with --harmony-async-iteration. An async iterator is a declarative pull stream as opposed to an Observable's declarative push stream."
  },
  {
    "sub_topic_id": 676,
    "sub_topic": "Automatic Semicolon Insertion - ASI",
    "title": "Remarks",
    "description": "There are three basic rules of semicolon insertion: When, as the program is parsed from left to right, a token (called the offending token) is encountered that is not allowed by any production of the grammar, then a semicolon is automatically inserted before the offending token if one or more of the following conditions is true: The offending token is separated from the previous token by at least one LineTerminator. The offending token is }. When, as the program is parsed from left to right, the end of the input stream of tokens is encountered and the parser is unable to parse the input token stream as a single complete ECMAScript Program, then a semicolon is automatically inserted at the end of the input stream. When, as the program is parsed from left to right, a token is encountered that is allowed by some production of the grammar, but the production is a restricted production and the token would be the first token for a terminal or nonterminal immediately following the annotation '[no LineTerminator here]' within the restricted production (and therefore such a token is called a restricted token), and the restricted token is separated from the previous token by at least one LineTerminator, then a semicolon is automatically inserted before the restricted token. However, there is an additional overriding condition on the preceding rules: a semicolon is never inserted automatically if the semicolon would then be parsed as an empty statement or if that semicolon would become one of the two semicolons in the header of a for statement (see 12.6.3)."
  },
  {
    "sub_topic_id": 677,
    "sub_topic": "Battery Status API",
    "title": "Remarks",
    "description": "Note that the Battery Status API is no longer available due to privacy reasons where it could be used by remote trackers for user fingerprinting. The Battery Status API is an Application Programming Interface for the client's battery status. It provides information on: battery charging state via 'chargingchange' event and battery.charging; battery level via 'levelchange' event and battery.level; charging time via 'chargingtimechange' event and battery.chargingTime; discharging time via 'dischargingtimechange' event and battery.dischargingTime. MDN Docs: https://developer.mozilla.org/en/docs/Web/API/Battery_status_API"
  },
  {
    "sub_topic_id": 678,
    "sub_topic": "Behavioral Design Patterns",
    "title": "Remarks",
    "description": "The command pattern encapsulates parameters to a method, current object state, and which method to call. It is useful to compartmentalize everything needed to call a method at a later time. It can be used to issue a 'command' and decide later which piece of code to use to execute the command. There are three components in this pattern: Command Message - the command itself, including the method name, parameters, and state Invoker - the part which instructs the command to execute its instructions. It can be a timed event, user interaction, a step in a process, callback, or any way needed to execute the command. Reciever - the target of the command execution."
  },
  {
    "sub_topic_id": 679,
    "sub_topic": "Binary Data",
    "title": "Remarks",
    "description": "Typed Arrays were originally specified by a Khronos editor's draft, and later standardized in ECMAScript 6 §24 and §22.2. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 680,
    "sub_topic": "Bitwise operators",
    "title": "Remarks",
    "description": "Bitwise operators perform operations on bit values of data. These operators convert operands to signed 32-bit integers in two's complement. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 681,
    "sub_topic": "Bitwise Operators - Real World Examples (snippets)",
    "title": "Remarks",
    "description": "Shifting bits left (right) is equivalent to multiplying (dividing) by 2. It's the same in base 10: if we 'left-shift' 13 by 2 places, we get 1300, or 13 * (10 ** 2). And if we take 12345 and 'right-shift' by 3 places and then remove the decimal part, we get 12, or Math.floor(12345 / (10 ** 3)). So if we want to multiply a variable by 2 ** n, we can just left-shift by n bits. console.log(13 * (2 ** 6)) //13 * 64 = 832 console.log(13    <<   6)  // 832 Similarly, to do (floored) integer division by 2 ** n, we can right shift by n bits. Example: console.log(1000 / (2 ** 4)) //1000 / 16 = 62.5 console.log(1000    >>   4)  // 62 It even works with negative numbers: console.log(-80 / (2 ** 3)) //-80 / 8 = -10 console.log(-80 >> 3)  // -10 In reality, speed of arithmetic is unlikely to significantly impact how long your code takes to run, unless you are doing on the order of 100s of millions of computations. But C programmers love this sort of thing!"
  },
  {
    "sub_topic_id": 682,
    "sub_topic": "BOM (Browser Object Model)",
    "title": "Remarks",
    "description": "For more information on the Window object, please visit MDN. The window.stop() method is not supported in Internet Explorer. The BOM (Browser Object Model) contains objects that represent the current browser window and components; objects that model things like history, device's screen, etc. The topmost object in BOM is the window object, which represents the current browser window or tab. The most important object in the Browser Object Model is the window object. It helps in accessing information about the browser and its components. To access these features, it has various methods and properties."
  },
  {
    "sub_topic_id": 683,
    "sub_topic": "Built-in Constants",
    "title": "Remarks",
    "description": "Examples: Infinity and -Infinity; Math library functions that return NaN; NaN; null; Number constants; Operations that return NaN; Testing for NaN using isNaN();undefined and null. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 684,
    "sub_topic": "Callbacks",
    "title": "Remarks",
    "description": "Examples: Callback using Arrow function; Callbacks and `this`; Continuation (synchronous and asynchronous); Error handling and control-flow branching; Simple Callback Usage Examples; What is a callback? This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 685,
    "sub_topic": "Classes",
    "title": "Remarks",
    "description": "class support was only added to JavaScript as part of the 2015 es6 standard. Javascript classes are syntactical sugar over JavaScript's already existing prototype-based inheritance. This new syntax does not introduce a new object-oriented inheritance model to JavaScript, just a simpler way to deal with objects and inheritance. A class declaration is essentially a shorthand for manually defining a constructor function and adding properties to the prototype of the constructor. An important difference is that functions can be called directly (without the new keyword), whereas a class called directly will throw an exception. If you are using an earlier version of JavaScript you will need a transpiler like babel or google-closure-compiler in order to compile the code into a version that the target platform will be able to understand."
  },
  {
    "sub_topic_id": 686,
    "sub_topic": "Comments",
    "title": "Remarks",
    "description": "To add annotations, hints, or exclude some code from being executed JavaScript provides two ways of commenting code lines Single line Comment // Everything after the // until the end of the line is excluded from execution. function elementAt( event ) { // Gets the element from Event coordinates  return document.elementFromPoint(event.clientX, event.clientY); } // TODO: write more cool stuff! Multi-line Comment /**/ Everything between the opening /* and the closing */ is excluded from execution, even if the opening and closing are on different lines. /* Gets the element from Event coordinates. Use like: var clickedEl = someEl.addEventListener('click', elementAt, false); */ function elementAt( event ) { return document.elementFromPoint(event.clientX, event.clientY);} /* TODO: write more useful comments! */"
  },
  {
    "sub_topic_id": 687,
    "sub_topic": "Comparison Operations",
    "title": "Remarks",
    "description": "When using boolean coercion, the following values are considered 'falsy': false 0 '' (empty string); null; undefined; NaN (not a number, e.g. 0/0); document.all¹ (browser context); Everything else is considered 'truthy'. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 688,
    "sub_topic": "Conditions",
    "title": "Remarks",
    "description": "Conditional expressions, involving keywords such as if and else, provide JavaScript programs with the ability to perform different actions depending on a Boolean condition: true or false. This section covers the use of JavaScript conditionals, Boolean logic, and ternary statements. Conditions can break normal program flow by executing code based on the value of an expression. In JavaScript, this means using if, else if and else statements and ternary operators. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 689,
    "sub_topic": "Console",
    "title": "Remarks",
    "description": "A browser's debugging console or web console is generally used by developers to identify errors, understand flow of execution, log data and for many other purpose at runtime. This information is accessed through the console object. The information displayed by a debugging/web console is made available through the multiple methods of the console Javascript object that can be consulted through console.dir(console). In most current browsers, the JavaScript Console has been integrated as a tab within Developer Tools. The shortcut keys listed below will open Developer Tools, it might be necessary to switch to the right tab after that."
  },
  {
    "sub_topic_id": 690,
    "sub_topic": "Constructor functions",
    "title": "Remarks",
    "description": "Constructor functions are actually just regular functions, there's nothing special about them. It's only the new keyword which causes the special behavior shown in the examples above. Constructor functions can still be called like a regular function if desired, in which case you would need to bind the this value explicitly. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 691,
    "sub_topic": "Context (this)",
    "title": "Remarks",
    "description": "One common pitfall is to try and use this in a nested function or an object, where the context has been lost. ES6 introduced arrow functions which include lexical this binding. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 692,
    "sub_topic": "Cookies",
    "title": "Remarks",
    "description": "Note that on older browsers navigator.cookieEnabled may not exist and be undefined. In those cases you won't detect that cookies are not enabled. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 693,
    "sub_topic": "Creational Design Patterns",
    "title": "Remarks",
    "description": "Design patterns are a good way to keep your code readable and DRY. DRY stands for don't repeat yourself. Below you could find more examples about the most important design patterns. In software engineering, a software design pattern is a general reusable solution to a commonly occurring problem within a given context in software design. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 694,
    "sub_topic": "Custom Elements",
    "title": "Remarks",
    "description": "Note that the Custom Elements specification has not yet been standardized, and is subject to change. The documentation describes the version that's been shipped in Chrome stable at this time. Custom Elements is an HTML5 feature allowing developers to use JavaScript to define custom HTML tags that can be used in their pages, with associated styles and behaviours. They are often used with shadow-dom. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 695,
    "sub_topic": "Data attributes",
    "title": "Remarks",
    "description": "Using the getAttribute & setAttribute methods If you want to support the older browsers before HTML5, you can use the getAttribute and setAttribute methods which are used to access any  attribute including the data attributes. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 696,
    "sub_topic": "Data Manipulation",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 697,
    "sub_topic": "Datatypes in Javascript",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 698,
    "sub_topic": "Date",
    "title": "Remarks",
    "description": "To create a new Date object use the Date() constructor: with no arguments Date() creates a Date instance containing the current time (up to milliseconds) and date. with one integer argument Date(m) creates a Date instance containing the time and date corresponding to the Epoch time (1 January, 1970 UTC) plus m milliseconds. Example: new Date(749019369738) gives the date Sun, 26 Sep 1993 04:56:09 GMT. with a string argument Date(dateString) returns the Date object that results after parsing dateString with Date.parse. with two or more integer arguments Date(i1, i2, i3, i4, i5, i6) reads the arguments as year, month, day, hours, minutes, seconds, milliseconds and instantiates the corresponding Dateobject. Note that the month is 0-indexed in JavaScript, so 0 means January and 11 means December. Example: new Date(2017, 5, 1) gives June 1st, 2017."
  },
  {
    "sub_topic_id": 699,
    "sub_topic": "Date Comparison",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 700,
    "sub_topic": "Debugging",
    "title": "Remarks",
    "description": "In Google Chrome, you can pause execution without needing to place breakpoints. Pause on Exception Pause on Exception: While this button is toggled on, if your program hits an unhandled exception, the program will pause as if it had hit a breakpoint. The button can be found near Execution Controls and is useful for locating errors. You can also pause execution when an HTML tag (DOM node) is modified, or when its attributes are changed. To do that, right click the DOM node on the Elements tab and select 'Break on...'."
  },
  {
    "sub_topic_id": 701,
    "sub_topic": "Declarations and Assignments",
    "title": "Remarks",
    "description": "Examples: Assignment; Data Types; Declaration; Declaring and initializing constants; Mathematic operations and assignment; Modifying constants; Reassigning constants; Undefined. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 702,
    "sub_topic": "Destructuring assignment",
    "title": "Remarks",
    "description": "Destructuring is a pattern matching technique that is added to Javascript recently in EcmaScript 6. It allows you to bind a group of variables to a corresponding set of values when their pattern matches to the right hand-side and the left hand-side of the expression. Destructuring is new in the ECMAScript 6 (A.K.A ES2015) specification and browser support may be limited. The following table gives an overview of the earliest version of browsers that supported >75% of the specification."
  },
  {
    "sub_topic_id": 703,
    "sub_topic": "Detecting browser",
    "title": "Remarks",
    "description": "Browsers, as they have evolved, offered more features to Javascript. But often these features are not available in all browsers. Sometimes they may be available in one browser, but yet to be released on other browsers. Other times, these features are implemented differently by different browsers. Browser detection becomes important to ensure that the application you develop runs smoothly across different browsers and devices. Use feature detection when possible. There are some reasons to use browser detection (e.g. Giving a user directions on how to install a browser plugin or clear their cache), but generally feature detection is considered best practice. If you are using browser detection be sure that it is absolutely nesesary."
  },
  {
    "sub_topic_id": 704,
    "sub_topic": "Enumerations",
    "title": "Remarks",
    "description": "In computer programming, an enumerated type (also called enumeration or enum [..]) is a data type consisting of a set of named values called elements, members or enumerators of the type. The enumerator names are usually identifiers that behave as constants in the language. A variable that has been declared as having an enumerated type can be assigned any of the enumerators as a value. Wikipedia: Enumerated type JavaScript is weakly typed, variables are not declared with a type beforehand and it does not have a native enum data type. Examples provided here may include different ways to simulate enumerators, alternatives and possible trade-offs."
  },
  {
    "sub_topic_id": 705,
    "sub_topic": "Error Handling",
    "title": "Remarks",
    "description": "try allows you to define a block of code to be tested for errors while it is being executed. catch allows you to define a block of code to be executed, if an error occurs in the try block. finally lets you execute code regardless of the result. Beware though, the control flow statements of try and catch blocks will be suspended until the execution of the finally block finishes. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 706,
    "sub_topic": "Escape Sequences",
    "title": "Remarks",
    "description": "Not everything that starts with a backslash is an escape sequence. Many characters are just not useful to escape sequences, and will simply cause a preceding backslash to be ignored. While escape sequences in JavaScript bear resemblance to other languages and formats, like C++, Java, JSON, etc. there will often be critical differences in the details. When in doubt, be sure to test that your code behaves as expected, and consider checking the language specification."
  },
  {
    "sub_topic_id": 707,
    "sub_topic": "Evaluating JavaScript",
    "title": "Remarks",
    "description": "In JavaScript, the eval function evaluates a string as if it were JavaScript code. The return value is the result of the evaluated string, e.g. eval('2 + 2') returns 4. eval is available in the global scope. The lexical scope of the evaluation is the local scope unless invoked indirectly (e.g. var geval = eval; geval(s);). The use of eval is strongly discouraged. See the Remarks section for details. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 708,
    "sub_topic": "Events",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 709,
    "sub_topic": "execCommand and contenteditable",
    "title": "Remarks",
    "description": "Users can add formatting to contenteditable documents or elements using their browser's features, such as common keyboard shortcuts for formatting (Ctrl-B for bold, Ctrl-I for italic, etc.) or by dragging and dropping images, links, or markup from the clipboard. Additionally, developers can use JavaScript to apply formatting to the current selection (highlighted text). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 710,
    "sub_topic": "Fetch",
    "title": "Remarks",
    "description": "Syntax: promise = fetch(url).then(function(response) {}); promise = fetch(url, options); promise = fetch(request). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 711,
    "sub_topic": "File API, Blobs and FileReaders",
    "title": "Remarks",
    "description": "If you want to get the properties of the file (like the name or the size) you can do it before using the File Reader. If we have the following html piece of code: <input type='file' id='newFile'> You can access the properties directly like this: document.getElementById('newFile').addEventListener('change', getFile); function getFile(event) {var files = event.target.files, file = files[0]; console.log('Name of the file', file.name); console.log('Size of the file', file.size); } You can also get easily the following attributes: lastModified (Timestamp), lastModifiedDate (Date), and type (File Type)"
  },
  {
    "sub_topic_id": 712,
    "sub_topic": "Fluent API",
    "title": "Remarks",
    "description": "Javascript is great for designing fluent API - a consumer-oriented API with focus on developer experience. Combine with language dynamic features for optimal results. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 713,
    "sub_topic": "Functional JavaScript",
    "title": "Remarks",
    "description": "What is Functional Programming ?Functional Programming or FP is a programming paradigm that is built upon two main concepts immutability, and statelessness.The goal behind FP is to make your code more readable, reusable, and portable. What is Functional JavaScript There has been a debate to call JavaScript a functional language or not.However we can absolutely use JavaScript as a functional due to its nature: Has Pure Functions; Has First class functions; Has Higher Order Function; It supports Immutability; Has Closures. Recursion, and List Transforation Methods(Arrays) like map,reduce,filter..etc The Examples should cover each concept in details, and the links provided here are just for reference, and should be removed once the concept is illustrated."
  },
  {
    "sub_topic_id": 714,
    "sub_topic": "Functions",
    "title": "Remarks",
    "description": "Functions in JavaScript provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in JavaScript. For information on arrow functions, please view the Arrow Functions documentation."
  },
  {
    "sub_topic_id": 715,
    "sub_topic": "Generators",
    "title": "Remarks",
    "description": "Generator functions (defined by the function* keyword) run as coroutines, generating a series of values as they're requested through an iterator. Generator functions are a feature introduced as part of the ES 2015 specification and are not available in all browsers. They are also fully supported in Node.js as of v6.0. For a detailed browser compatibility list, see the MDN Documentation, and for Node, see the node.green website."
  },
  {
    "sub_topic_id": 716,
    "sub_topic": "Geolocation",
    "title": "Remarks",
    "description": "The Geolocation API does what you might expect: retrieve information about the client's whereabouts, represented in latitude and longitude. However, it is up to the user to agree to give away their location. This API is defined in the W3C Geolocation API Specification. Features for obtaining civic addresses and to enable geofencing / triggering of events have been explored, but are not widely implemented. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 717,
    "sub_topic": "Global error handling in browsers",
    "title": "Remarks",
    "description": "Unfortunately, window.onerror has historically been implemented differently by each vendor. The information provided in the Parameters section is an approximation of what to expect across different browsers and their versions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 718,
    "sub_topic": "History",
    "title": "Remarks",
    "description": "The HTML5 History API is not implemented by all browsers and implementations tend to differ between browser vendors. It is currently supported by the following browsers: Firefox 4+; Google Chrome; Internet Explorer 10+; Safari 5+; iOS 4; If you want to find out more about the History API implementations and methods, please refer to the state of the HTML5 History API. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 719,
    "sub_topic": "How to make iterator usable inside async callback function",
    "title": "Remarks",
    "description": "When using async callback we need to consider scope. Especially if inside a loop. This simple article shows what not to do and a simple working example. The problem is that there is only one instance of var key. All callbacks will share the same key instance. At the time the callback will fire, the key will most likely have been incremented and not pointing to the element we are receiving the stats for."
  },
  {
    "sub_topic_id": 720,
    "sub_topic": "IndexedDB",
    "title": "Remarks",
    "description": "Transactions need to be used immediately after they're created. If they aren't used in the current event loop (basically before we wait for anything like a web request) they'll go into an inactive state where you can't use them. Databases can only have one transaction that writes to a particular object store at a time. So you can have as many as you want that read from our things store, but only one can make changes at any given time."
  },
  {
    "sub_topic_id": 721,
    "sub_topic": "Inheritance",
    "title": "Remarks",
    "description": "Examples: Difference between Object.key and Object.prototype.key; New object from prototype; Prototypal inheritance; Pseudo-classical inheritance; Setting an Object's prototype; Standard function prototype. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 722,
    "sub_topic": "Intervals and Timeouts",
    "title": "Remarks",
    "description": "If the delay is not specified, it defaults to 0 milliseconds. However, the actual delay will be longer than that; for example, the HTML5 spec specifies a minimum delay of 4 milliseconds. Even when setTimeout is called with a delay of zero, the function that is called by setTimeout will be executed asynchronously. Note that many operations like DOM manipulation are not necessarily completed even if you've made the operation and moved on to the next code sentence, so you shouldn't assume they will run synchronously. Using setTimeout(someFunc, 0) enqueues the execution of the someFunc function at the end of the current JavaScript engine's call stack, so the function will be called after those operations completed. It is possible to pass a string containing JavaScript code (setTimeout('some..code', 1000)) in place of the function (setTimeout(function(){some..code}, 1000)). If the code is placed in a string, it will be later parsed using eval(). String-style timeouts are not recommended for performance, clarity and sometimes security reasons, but you may see older code which uses this style. Passing functions has been supported since Netscape Navigator 4.0 and Internet Explorer 5.0."
  },
  {
    "sub_topic_id": 723,
    "sub_topic": "JavaScript Variables",
    "title": "Remarks",
    "description": "Variables are what make up most of JavaScript. These variables make up things from numbers to objects, which are all over JavaScript to make one's life much easier. Strict Mode makes JavaScript stricter to assure you the best habits. For example, assigning a variable. You may use Nested Arrays and Objects some time. They are sometimes useful, and they're also fun to work with. Here is how they work. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 724,
    "sub_topic": "JSON",
    "title": "Remarks",
    "description": "JSON (JavaScript Object Notation) is a lightweight data-interchange format. It is easy for humans to read and write and easy for machines to parse and generate. It is important to realize that, in JavaScript, JSON is a string and not an object. A basic overview can be found on the json.org website which also contains links to implementations of the standard in many different programming languages. The JSON utility methods were first standardized in ECMAScript 5.1 §15.12. The format was formally defined in The application/json Media Type for JSON (RFC 4627 July 2006) which was later updated in The JSON Data Interchange Format (RFC 7158 March 2013, ECMA-404 October 2013 and RFC 7159 March 2014). To make these methods available in old browsers such as Internet Explorer 8, use Douglas Crockford's json2.js."
  },
  {
    "sub_topic_id": 725,
    "sub_topic": "Linters - Ensuring code quality",
    "title": "Remarks",
    "description": "No matter what linter you choose every JavaScript Project should use one. They can help find error and make code more consistent. For more comparisions check out comparison JavaScript linting tools. ESLint is a code style linter and formatter for your style guide much like JSHint. ESLint merged with JSCS in April of 2016. ESLint does take more effort to set up than JSHint, but there are clear instructions on their website for getting started. A benefit of adding it to your IDE is that you can create a JSON configuration file named .jshintrc that will be used when linting your program. This is convent if you want to share configurations between projects."
  },
  {
    "sub_topic_id": 726,
    "sub_topic": "Localization",
    "title": "Remarks",
    "description": "Currency formatting, grouping digits and placing the currency symbol according to the localization. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 727,
    "sub_topic": "Loops",
    "title": "Remarks",
    "description": "Loops in JavaScript typically help solve problems which involve repeating specific code x amount of times. Say you need to log a message 5 times. You could do this: console.log('a message'); console.log('a message'); console.log('a message'); console.log('a message'); console.log('a message'); But that's just time-consuming and kind of ridiculous. Plus, what if you needed to log over 300 messages? You should replace the code with a traditional \"for\" loop: for(var i = 0; i < 5; i++){ console.log('a message'); }"
  },
  {
    "sub_topic_id": 728,
    "sub_topic": "Loops",
    "title": "Remarks",
    "description": "Loops in JavaScript typically help solve problems which involve repeating specific code x amount of times. Say you need to log a message 5 times. You could do this: console.log('a message'); console.log('a message'); console.log('a message'); console.log('a message'); console.log('a message'); But that's just time-consuming and kind of ridiculous. Plus, what if you needed to log over 300 messages? You should replace the code with a traditional \"for\" loop: for(var i = 0; i < 5; i++){ console.log('a message'); }"
  },
  {
    "sub_topic_id": 729,
    "sub_topic": "Map",
    "title": "Remarks",
    "description": "A Map is a basic mapping of keys to values. Maps are different from objects in that their keys can be anything (primitive values as well as objects), not just strings and symbols. Iteration over Maps is also always done in the order the items were inserted into the Map, whereas the order is undefined when iterating over keys in an object. It has an optional parameter, which can be any iterable object (for example an array) which contains arrays of two elements – first is the key, the seconds is the value. Use .get(key) to get value by key and .set(key, value) to assign a value to a key. If the element with the specified key doesn't exist in the map, .get() returns undefined. .set() method returns the map object, so you can chain .set() calls."
  },
  {
    "sub_topic_id": 730,
    "sub_topic": "Memory efficiency",
    "title": "Remarks",
    "description": "One drawback of creating private method in Javascript is memory-inefficient because a copy of the private method will be created every time a new instance is created. See this simple example. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 731,
    "sub_topic": "Method Chaining",
    "title": "Remarks",
    "description": "Method chaining is a programming strategy that simplifies your code and beautifies it. Method chaining is done by ensuring that each method on an object returns the entire object, instead of returning a single element of that object. Note that each method in Door.prototype returns this, which refers to the entire instance of that Door object. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 732,
    "sub_topic": "Modals - Prompts",
    "title": "Remarks",
    "description": "User Prompts are methods part of the Web Application API used to invoke Browser modals requesting a user action such as confirmation or input. window.alert(message) Show a modal popup with a message to the user. Requires the user to click [OK] to dismiss. alert('Hello World');  More information below in 'Using alert()'. boolean = window.confirm(message) Show a modal popup with the provided message. Provides [OK] and [Cancel] buttons which will respond with a boolean value true / false respectively."
  },
  {
    "sub_topic_id": 733,
    "sub_topic": "Modularization Techniques",
    "title": "Remarks",
    "description": "AMD is a module definition system that attempts to address some of the common issues with other systems like CommonJS and anonymous closures. AMD addresses these issues by: Registering the factory function by calling define(), instead of immediately executing it Passing dependencies as an array of module names, which are then loaded, instead of using globals Only executing the factory function once all the dependencies have been loaded and executed Passing the dependent modules as arguments to the factory function The key thing here is that a module can have a dependency and not hold everything up while waiting for it to load, without the developer having to write complicated code."
  },
  {
    "sub_topic_id": 734,
    "sub_topic": "Modules",
    "title": "Remarks",
    "description": "From MDN (emphasis added): This feature is not implemented in any browsers natively at this time. It is implemented in many transpilers, such as the Traceur Compiler, Babel or Rollup. Many transpilers are able to convert ES6 module syntax into CommonJS for use in the Node ecosystem, or RequireJS or System.js for use in the  browser. It is also possible to use a module bundler like Browserify to combine a set of inter-dependent CommonJS modules into a single file which can be loaded in the browser."
  },
  {
    "sub_topic_id": 735,
    "sub_topic": "Namespacing",
    "title": "Remarks",
    "description": "In Javascript, there is no notion of namespaces and they are very useful to organizes the code in various languages. For javascript they help reduce the number of globals required by our programs and at the same time also help avoid naming collisions or excessive name prefixing. Instead of polluting the global scope with a lot of functions, objects, and other variables, you can create one (and ideally only one) global object for your application or library."
  },
  {
    "sub_topic_id": 736,
    "sub_topic": "Navigator Object",
    "title": "Remarks",
    "description": "There is no public standard for the Navigator object, however, all major browsers support it. The navigator.product property cannot be considered a reliable way to get the browser's engine name since most browsers it will return Gecko. Additionally, it is not supported in: Internet Explorer 10 and below Opera 12 and greater In Internet Explorer, the navigator.geolocation property is not supported in versions older than IE 8 The navigator.appCodeName property returns Mozilla for all modern browsers."
  },
  {
    "sub_topic_id": 737,
    "sub_topic": "Notifications API",
    "title": "Remarks",
    "description": "The Notifications API was designed to allow browser access to notifying the client. Support by browsers might be limited. Also support by the operating system may be limited. The following table gives an overview of the earliest browser versions that provide support for notifications. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 738,
    "sub_topic": "Objects",
    "title": "Remarks",
    "description": "Objects are collections of key-value pairs, or properties. The keys can be Strings or Symbols, and values are either primitives (numbers, strings, symbols) or references to other objects. In JavaScript, a significant amount of values are objects (e.g. functions, arrays) or primitives that behave as immutable objects (numbers, strings, booleans). Their properties or their prototype's properties can be accessed using dot (obj.prop) or bracket (obj['prop']) notation. Notable exceptions are the special values undefined and null. Objects are held by reference in JavaScript, not by value. This means that when copied or passed as arguments to functions, the 'copy' and the original are references to the same object, and a change to one's properties will change the same property of the other. This does not apply to primitives, which are immutable and passed by value."
  },
  {
    "sub_topic_id": 739,
    "sub_topic": "Performance Tips",
    "title": "Remarks",
    "description": "Remember that premature optimization is the root of all evil. Write clear, correct code first, then if you have performance problems, use a profiler to look for specific areas to improve. Don't waste time optimizing code that's not affecting the overall performance in a meaningful way. Measure, measure, measure. Performance can often be counterintuitive, and changes over time. What's faster now might not be in the future, and can depend on your use case. Make sure any optimizations you make are actually improving, not hurting performance, and that the change is worthwhile."
  },
  {
    "sub_topic_id": 740,
    "sub_topic": "Promises",
    "title": "Remarks",
    "description": "Promises are part of the ECMAScript 2015 specification and browser support is limited, with 88% of browsers worldwide supporting it as of July 2017. The following table gives an overview of the earliest browser versions that provide support for promises. In environments which do not support them, Promise can be polyfilled. Third-party libraries may also provide extended functionalities, such as automated 'promisification' of callback functions or additional methods like progress—also known as notify. The Promises/A+ standard website provides a list of 1.0 and 1.1 compliant implementations. Promise callbacks based on the A+ standard are always executed asynchronously as microtasks in the event loop."
  },
  {
    "sub_topic_id": 741,
    "sub_topic": "Prototypes, objects",
    "title": "Remarks",
    "description": "In the conventional JS there are no class instead we have prototypes. Like the class, prototype inherits the properties including the methods and the variables declared in the class. We can create the new instance of the object when ever it is necessary by , Object.create(PrototypeName); (we can give the value for the constructor as well). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 742,
    "sub_topic": "Proxy",
    "title": "Remarks",
    "description": "A Proxy in JavaScript can be used to modify fundamental operations on objects. Proxies were introduced in ES6. A Proxy on an object is itself an object, that has traps. Traps may be triggered when operations are performed on the Proxy. This includes property lookup, function calling, modifying properties, adding properties, et cetera. When no applicable trap is defined, the operation is performed on the proxied object as if there was no Proxy."
  },
  {
    "sub_topic_id": 743,
    "sub_topic": "Regular expressions",
    "title": "Remarks",
    "description": "The RegExp object is only as useful as your knowledge of Regular Expressions is strong. See here for an introductory primer, or see MDN for a more in-depth explanation. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 744,
    "sub_topic": "requestAnimationFrame",
    "title": "Remarks",
    "description": "When it comes to animating DOM elements fluidly, we are limited to the following CSS transitions: POSITION - transform: translate (npx, npx); SCALE - transform: scale(n); ROTATION - transform: rotate(ndeg); OPACITY - opacity: 0; However, using these is no guarantee that your animations will be fluid, because it causes the browser to start new paint cycles, regardless of what else is going on. Basically, paint are made inefficiently and your animation looks 'janky' because the frames per second (FPS) suffers. To guarantee smooth-as-possible DOM animations, requestAnimationFrame must be used in conjunction with the above CSS transitions. The reason this works, is because the requestAnimationFrame API lets the browser know that you want an animation to happen at the next paint cycle, as opposed to interrupting what's going on to force a new paint cycle in when a non-RAF animation is called."
  },
  {
    "sub_topic_id": 745,
    "sub_topic": "Reserved Keywords",
    "title": "Remarks",
    "description": "ertain words - so-called keywords - are treated specially in JavaScript. There's a plethora of different kinds of keywords, and they have changed in different versions of the language. With regards to reserved words there is a small distinctions between the 'Identifiers' used for the likes of variable or function names and the 'Identifier Names' allowed as properties of composite data types. Identifier Names are tokens that are interpreted according to the grammar given in the “Identifiers” section of chapter 5 of the Unicode standard, with some small modifications. An Identifier is an IdentifierName that is not a ReservedWord (see 7.6.1)."
  },
  {
    "sub_topic_id": 746,
    "sub_topic": "Same Origin Policy & Cross-Origin Communication",
    "title": "Remarks",
    "description": "Same-Origin policy is used by web browsers to prevent scripts to be able to access remote content if the remote address has not the same origin of the script. This prevents malicious scripts from performing requests to other websites to obtain sensitive data. The origin of two addresses is considered the same if both URLs have the same protocol, hostname and port."
  },
  {
    "sub_topic_id": 747,
    "sub_topic": "Scope",
    "title": "Remarks",
    "description": "Scope is the context in which variables live and can be accessed by other code in the same scope. Because JavaScript can largely be used as a functional programming language, knowing the scope of variables and functions is important as it helps to prevent bugs and unexpected behavior at runtime. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 748,
    "sub_topic": "Screen",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 749,
    "sub_topic": "Security issues",
    "title": "Remarks",
    "description": "This is a collection of common JavaScript security issues, like XSS and eval injection. This collection also contains how to mitigate these security issues. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 750,
    "sub_topic": "Selection API",
    "title": "Remarks",
    "description": "The Selection API allows you to view and change the elements and text that are selected (highlighted) in the document. It is implemented as a singleton Selection instance that applies to the document, and holds a collection of Range objects, each representing one contiguous selected area. Practically speaking, no browser except Mozilla Firefox supports multiple ranges in selections, and this is not encouraged by the spec either. Additionally, most users are not familiar with the concept of multiple ranges. As such, a developer can usually only concern themselves with one range."
  },
  {
    "sub_topic_id": 751,
    "sub_topic": "Server-sent events",
    "title": "Remarks",
    "description": "You can bind event listeners to the EventSource object to listen to different events channels using the .addEventListener method. EventSource.addEventListener(name: String, callback: Function, [options]) name: The name related to the name of the channel the server is emitting events to. callback: The callback function runs every time an event bound to the channel is emitted, the function provides the event as an argument. options: Options that characterize the behavior of the event listener. The following example shows a heartbeat event stream from the server, the server sends events on the heartbeat channel and this routine will always run when an event in accepted."
  },
  {
    "sub_topic_id": 752,
    "sub_topic": "Set",
    "title": "Remarks",
    "description": "The Set object lets you store unique values of any type, whether primitive values or object references. Set objects are collections of values. You can iterate through the elements of a set in insertion order. A value in the Set may only occur ONCE; it is unique in the Set's collection. Distinct values are discriminated using the SameValueZero comparison algorithm. Because each value in the Set has to be unique, the value equality will be checked and is not based on the same algorithm as the one used in the === operator. Specifically, for Sets, +0 (which is strictly equal to -0) and -0 are different values. However, this has been changed in the latest ECMAScript 6 specification. Starting with Gecko 29.0 (Firefox 29 / Thunderbird 29 / SeaMonkey 2.26) (bug 952870) and a recent nightly Chrome, +0 and -0 are treated as the same value in Set objects. Also, NaN and undefined can also be stored in a Set. NaN is considered the same as NaN (even though NaN !== NaN)."
  },
  {
    "sub_topic_id": 753,
    "sub_topic": "Setters and Getters",
    "title": "Remarks",
    "description": "Setters and getters are object properties that call a function when they are set/gotten. An object property cannot hold both a getter and a value at the same time. However, an object property can hold both a setter and a getter at the same time. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 754,
    "sub_topic": "Strict mode",
    "title": "Remarks",
    "description": "Strict mode is an option added in ECMAScript 5 to enable a few backwards-incompatible enhancements. Behaviour changes in 'strict mode' code include: Assigning to undefined variables raises an error instead of defining new global variables; Assigning to or deleting non-writable properties (such as window.undefined) raises an error instead of executing silently; Legacy octal syntax (ex. 0777) is unsupported; The with statement is unsupported; eval cannot create variables in the surrounding scope; Functions' .caller and .arguments properties are unsupported; A function's parameter list cannot have duplicates; window is no longer automatically used as the value of this. NOTE:- 'strict' mode is NOT enabled by default as if a page uses JavaScript which depends on features of non - strict mode, then that code will break. Thus, it has to be turned on by the programmer himself / herself."
  },
  {
    "sub_topic_id": 755,
    "sub_topic": "Strings",
    "title": "Remarks",
    "description": "Strings in JavaScript can be enclosed in Single quotes 'hello', Double quotes 'Hello' and (from ES2015, ES6) in Template Literals (backticks) `hello`. Some Unicode symbols don't fit in a single character, and instead require two UTF-16 surrogate pairs to encode. This is the case of character codes beyond 216 - 1 or 63553. These extended character codes or code point values can be retrieved with codePointAt. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 756,
    "sub_topic": "Symbols",
    "title": "Remarks",
    "description": "Symbol is a new primitive type in ES6. Symbols are used mainly as property keys, and one of its main characteristics is that they are unique, even if they have the same description. This means they will never have a name clash with any other property key that is a symbol or string. Providing an optional parameter (description) when creating primitive symbols can be used for debugging but not to access the symbol itself (but see the Symbol.for() example for a way to register/lookup global shared symbols)."
  },
  {
    "sub_topic_id": 757,
    "sub_topic": "Tail Call Optimization",
    "title": "Remarks",
    "description": "TCO is only available in strict mode As always check browser and Javascript implementations for support of any language features, and as with any javascript feature or syntax, it may change in the future. It provides a way to optimise recursive and deeply nested function calls by eliminating the need to push function state onto the global frame stack, and avoiding having to step down through each calling function by returning directly to the initial calling function."
  },
  {
    "sub_topic_id": 758,
    "sub_topic": "Template Literals",
    "title": "Remarks",
    "description": "Template literals are a special type of string literal that can be used instead of the standard '...' or \"...\". They are declared by quoting the string with backticks instead of the standard single or double quotes: `...`. Template literals can contain line breaks and arbitrary expressions can be embedded using the ${ expression } substitution syntax. By default, the values of these substitution expressions are concatenated directly into the string where they appear."
  },
  {
    "sub_topic_id": 759,
    "sub_topic": "The Event Loop",
    "title": "Remarks",
    "description": "How this works is that when these statements execute, they tell the host environment (i.e., the browser or Node.js runtime, respectively) to go off and do something, probably in another thread. When the host environment is done doing that thing (respectively, waiting 100 milliseconds or reading the file file.txt) it will post a task to the event loop, saying 'call the callback I was given earlier with these arguments'. The event loop is then busy doing its thing: rendering the webpage, listening for user input, and continually looking for posted tasks. When it sees these posted tasks to call the callbacks, it will call back into JavaScript. That's how you get asynchronous behavior!"
  },
  {
    "sub_topic_id": 760,
    "sub_topic": "Tilde ~",
    "title": "Remarks",
    "description": "The ~ operator looks at the binary representation of the values of the expression and does a bitwise negation operation on it. Any digit that is a 1 in the expression becomes a 0 in the result. Any digit that is a 0 in the expression becomes a 1 in the result. The following example illustrates use of the bitwise NOT (~) operator on decimal numbers. To keep the example simple, decimal number 3.5 will be used, cause of it's simple representation in binary format."
  },
  {
    "sub_topic_id": 761,
    "sub_topic": "Timestamps",
    "title": "Remarks",
    "description": "performance.now() is available in modern web browsers and provides reliable timestamps with sub-millisecond resolution. Since Date.now() and (new Date()).getTime() are based on the system time, they often get skewed by a few milliseconds when the system time is automatically synchronized. performance.now() returns a precise timestamp: The number of milliseconds, including microseconds, since the current web page started to load. More generally, it returns the time elapsed since the performanceTiming.navigationStart event. For example, in a web browser's main context, performance.now() returns 6288.319 if the web page began to load 6288 milliseconds and 319 microseconds ago."
  },
  {
    "sub_topic_id": 762,
    "sub_topic": "Transpiling",
    "title": "Remarks",
    "description": "Transpiling is the process of converting source code to source code, and this is a common activity in JavaScript development. The features available in common JavaScript applications (Chrome, Firefox, NodeJS, etc.) often lag behind the latest ECMAScript specifications (ES6/ES2015, ES7/ES2016, etc.). Once a specification has been approved, it will most certainly be available natively in future versions of JavaScript applications. Rather than waiting for new JavaScript releases, engineers can start writing code that will run natively in the future (future-proofing) by using a compiler to convert code written for newer specifications into code compatible with existing applications. Common transpilers include Babel and Google Traceur. Transpilers can also be used to convert from another language like TypeScript or CoffeeScript to regular, 'vanilla' JavaScript. In this case, transpiling converts from one language to a different language."
  },
  {
    "sub_topic_id": 763,
    "sub_topic": "Unary Operators",
    "title": "Remarks",
    "description": "Syntax: void expression; // Evaluates expression and discards return value; +expression; // Attempt to convert expression to a number; delete object.property; // Delete object's property; delete object['property']; // Delete object's property; typeof operand; // Returns type of operand; ~expression; // Perform NOT operation on each bit of expression; !expression; // Perform logical negation on expression; -expression; // Negate expression after attempting conversion to number."
  },
  {
    "sub_topic_id": 764,
    "sub_topic": "Unit Testing Javascript",
    "title": "Remarks",
    "description": "At its most basic level, Unit Testing in any language provides assertions against some known or expected output. The popular assertion method above shows us one quick and easy way to assert a value in most web browsers and interpreters like Node.js with virtually any version of ECMAScript. A good unit test is designed to test a discreet unit of code; usually a function. This simple assertion can assure that in many different cases, your \"add\" function will always return the expected result and requires no additional frameworks or libraries to work."
  },
  {
    "sub_topic_id": 765,
    "sub_topic": "Using javascript to get/set CSS custom variables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 766,
    "sub_topic": "Variable coercion/conversion",
    "title": "Remarks",
    "description": "Some languages require you to define ahead of time what kind of variable you're declaring. JavaScript doesn't do that; it will try to figure that out on its own. Sometimes this can create unexpected behavior. If we use the following HTML <span id='freezing-point'>0</span> And retrieve its content through JS, it will not convert it to a number, even though one might expect it to. If we use the following snippet, one might expect boilingPoint to be 100. However, JavaScript will convert moreHeat to a string and concatenate the two string; the result will be 0100."
  },
  {
    "sub_topic_id": 767,
    "sub_topic": "Vibration API",
    "title": "Remarks",
    "description": "Modern mobile devices include hardware for vibrations. The Vibration API offers Web apps the ability to access this hardware, if it exists, and does nothing if the device doesn't support it. Support by browsers might be limited. Also support by the operating system may be limited. The following table gives an overview of the earliest browser versions that provide support for vibrations. An array of values describes periods of time in which the device is vibrating and not vibrating."
  },
  {
    "sub_topic_id": 768,
    "sub_topic": "WeakMap",
    "title": "Remarks",
    "description": "WeakMap object allows you to store key/value pairs. The difference from Map is that keys must be objects and are weakly referenced. This means that if there aren't any other strong references to the key, the element in WeakMap can be removed by garbage collector. WeakMap constructor has an optional parameter, which can be any iterable object (for example Array) containing key/value pairs as two-element arrays."
  },
  {
    "sub_topic_id": 769,
    "sub_topic": "WeakSet",
    "title": "Remarks",
    "description": "The WeakSet object is used for storing weakly held objects in a collection. The difference from Set is that you can't store primitive values, like numbers or string. Also, references to the objects in the collection are held weakly, which means that if there is no other reference to an object stored in a WeakSet, it can be garbage collected. The WeakSet constructor has an optional parameter, which can be any iterable object (for example an array). All of its elements will be added to the created WeakSet."
  },
  {
    "sub_topic_id": 770,
    "sub_topic": "Web Cryptography API",
    "title": "Remarks",
    "description": "The WebCrypto APIs are usually only available on \"secure\" origins, meaning that the document must have been loaded over HTTPS or from the local machine (from localhost, file:, or a browser extension). These APIs are specified by the W3C Web Cryptography API Candidate Recommendation. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 771,
    "sub_topic": "Web Storage",
    "title": "Remarks",
    "description": "The localStorage object provides persistent (but not permanent - see limits below) key-value storage of strings. Any changes are immediately visible in all other windows/frames from the same origin. The stored values persistent indefinitely unless the user clears saved data or configures an expiration limit. localStorage uses a map-like interface for getting and setting values. Most browsers, when configured to block cookies, will also block localStorage. Attempts to use it will result in an exception. Do not forget to manage these cases. localStorage.length property returns an integer number indicating the number of elements in the localStorage."
  },
  {
    "sub_topic_id": 772,
    "sub_topic": "WebSockets",
    "title": "Remarks",
    "description": "WebSocket is protocol, which enables two-way communication between a client and server: The goal WebSocket is to provide a mechanism for browser-based applications that need two-way communication with servers that does not rely on opening multiple HTTP connections. (RFC 6455) WebSocket works over HTTP protocol. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download JavaScript (PDF) Language (PDF): https://riptutorial.com/ebook/javascript."
  },
  {
    "sub_topic_id": 773,
    "sub_topic": "Workers",
    "title": "Remarks",
    "description": "A web worker is a simple way to run scripts in background threads as the worker thread can perform tasks (including I/O tasks using xmlHttpRequest) without interfering with the user interface. Once created, a worker can send messages which can be different data types (except functions) to the JavaScript code that created it by posting messages to an event handler specified by that code (and vice versa.). A service worker is an event-driven worker registered against an origin and a path. It takes the form of a JavaScript file that can control the web page/site it is associated with, intercepting and modifying navigation and resource requests, and caching resources in a very granular fashion to give you complete control over how your app behaves in certain situations (the most obvious one being when the network is not available.)"
  },
  {
    "sub_topic_id": 774,
    "sub_topic": "Getting started with PHP",
    "title": "Remarks",
    "description": "PHP (recursive acronym for PHP: Hypertext Preprocessor) is a widely-used open source programming language. It is especially suited for web development. The unique thing about PHP is that it serves both beginners as well as experienced developers. It has a low barrier to entry so it is easy to get started with, and at the same time, it provides advanced features offered in other programming languages. Each release branch of PHP is fully supported for two years from its initial stable release. After this two year period of active support, each branch is then supported for an additional year for critical security issues only. Releases during this period are made on an as-needed basis: there may be multiple point releases, or none, depending on the number of reports."
  },
  {
    "sub_topic_id": 775,
    "sub_topic": "Alternative Syntax for Control Structures",
    "title": "Remarks",
    "description": "When mixing the alternative structure for switch with HTML, it is important to not have any whitespace between the initial switch($condition): and first case $value:. Doing this is attempting to echo something (whitespace) before a case. All control structures follow the same general idea. Instead of using curly braces to encapsulate the code, you're using a colon and endstructure; statement: structure: /* code */ endstructure."
  },
  {
    "sub_topic_id": 776,
    "sub_topic": "APCu",
    "title": "Remarks",
    "description": "APCu is a shared memory key-value store for PHP. The memory is shared between PHP-FPM processes of the same pool. Stored data persists between requests. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 777,
    "sub_topic": "Array iteration",
    "title": "Remarks",
    "description": "Syntax: for ($i = 0; $i < count($array); $i++) { incremental_iteration(); } for ($i = count($array) - 1; $i >= 0; $i--) { reverse_iteration(); } foreach ($data as $datum) { } foreach ($data as $key => $datum) { } foreach ($data as &$datum) { }. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 778,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "An array is a data structure that stores an arbitrary number of values in a single value. An array in PHP is actually an ordered map, where map is a type that associates values to keys. Another useful feature is accessing your custom object collections as arrays in PHP. There are two interfaces available in PHP (>=5.0.0) core to support this: ArrayAccess and Iterator. The former allows you to access your custom objects as array. Note that isset() treats a null valued element as non-existent. Whereas !empty() does the same for any element that equals false (using a weak comparision; for example, null, '' and 0 are all treated as false by !empty()). While isset($map['foobar']); is true, !empty($map['foobar']) is false. This can lead to mistakes (for example, it is easy to forget that the string '0' is treated as false) so use of !empty() is often frowned upon."
  },
  {
    "sub_topic_id": 779,
    "sub_topic": "Asynchronous programming",
    "title": "Remarks",
    "description": "PHP 5.5 introduces Generators and the yield keyword, which allows us to write asynchronous code that looks more like synchronous code. The yield expression is responsible for giving control back to the calling code and providing a point of resumption at that place. One can send a value along the yield instruction. The return value of this expression is either null or the value which was passed to Generator::send(). This mechanism can be used by a coroutine implementation to wait for Awaitables yielded by the Generator (by registering itself as a callback for resolution) and continue execution of the Generator as soon as the Awaitable is resolved."
  },
  {
    "sub_topic_id": 780,
    "sub_topic": "Autoloading Primer",
    "title": "Remarks",
    "description": "In this section you define the autoload mappings. In this example its a PSR-4 mapping of a namespace to a directory: the /src directory resides in your projects root folder, on the same level as the /vendor directory is. An example filename would be src/Foo.php containing an YourApplicationNamespace\\Foo class. Important: After adding new entries to the autoload section, you have to re-run the command dump-autoload to re-generate and update the  vendor/autoload.php file with the new information. In addition to PSR-4 autoloading, Composer also supports PSR-0, classmap and files autoloading. See the autoload reference for more information. When you including the /vendor/autoload.php file it will return an instance of the Composer Autoloader. You might store the return value of the include call in a variable and add more namespaces. This can be useful for autoloading classes in a test suite, for example."
  },
  {
    "sub_topic_id": 781,
    "sub_topic": "BC Math (Binary Calculator)",
    "title": "Remarks",
    "description": "The Binary Calculator can be used to calculate with numbers of any size and precision up to 2147483647-1 decimals, in string format. The Binary Calculator is more precise than the float calculation of PHP. On 32-bit systems, integers greater than 0x7FFFFFFF cannot be stored primitively, while integers between 0x0000000080000000 and 0x7FFFFFFFFFFFFFFF can be stored primitively on 64-bit systems but not 32-bit systems (signed long long). However, since 64-bit systems and many other languages support storing signed long long integers, it is sometimes necessary to store this range of integers in exact value. There are several ways to do so, such as creating an array with two numbers, or converting the integer into its decimal human-readable form. This has several advantages, such as the convenience in presenting to the user, and the ability to manipulate it with bcmath directly."
  },
  {
    "sub_topic_id": 782,
    "sub_topic": "Cache",
    "title": "Remarks",
    "description": "The Alternative PHP Cache (APC) is a free and open opcode cache for PHP. Its goal is to provide a free, open, and robust framework for caching and optimizing PHP intermediate code. Memcache is a distributed object caching system and uses key-value for storing small data. Before you start calling Memcache code into PHP, you need to make sure that it is installed. That can be done using class_exists method in php. Once it is validated that the module is installed, you start with connecting to memcache server instance."
  },
  {
    "sub_topic_id": 783,
    "sub_topic": "Classes and Objects",
    "title": "Remarks",
    "description": "Classes and Objects are used to to make your code more efficient and less repetitive by grouping similar tasks. A class is used to define the actions and data structure used to build objects. The objects are then built using this predefined structure. Classes may have properties, constants and methods. Properties hold variables in the scope of the object. They may be initialized on declaration, but only if they contain a primitive value. Constants must be initialized on declaration and can only contain a primitive value. Constant values are fixed at compile time and may not be assigned at run time. Methods must have a body, even an empty one, unless the method is declared abstract. Interfaces cannot have properties, but may have constants and methods. Interface constants must be initialized on declaration and can only contain a primitive value. Constant values are fixed at compile time and may not be assigned at run time. Interface methods have no body."
  },
  {
    "sub_topic_id": 784,
    "sub_topic": "Closure",
    "title": "Remarks",
    "description": "A closure is the PHP equivalent of an anonymous function, eg. a function that does not have a name. Even if that is technically not correct, the behavior of a closure remains the same as a function's, with a few extra features. As seen previously, a closure is nothing but an instance of the Closure class, and different methods can be invoked on them. One of them is bindTo, which, given a closure, will return a new one that is bound to a given object. Keep in mind that $myClosure is an instance of Closure so that you are aware of what you can truly do with it (cf. http://fr2.php.net/manual/en/class.closure.php ) The classic case you would need a Closure is when you have to give a callable to a function, for instance usort."
  },
  {
    "sub_topic_id": 785,
    "sub_topic": "Coding Conventions",
    "title": "Remarks",
    "description": "You should always use <?php ?> tags or short-echo tags <?= ?>. Other variations (in particular, short tags <? ?>) should not be used as they are commonly disabled by system administrators. When a file is not expected to produce output (the entire file is PHP code) the closing ?> syntax should be omitted to avoid unintentional output, which can cause problems when a client parses the document, in particular some browsers fail to recognise the <!DOCTYPE tag and activate Quirks Mode."
  },
  {
    "sub_topic_id": 786,
    "sub_topic": "Command Line Interface (CLI)",
    "title": "Remarks",
    "description": "When run from the CLI, the constants STDIN, STDOUT, and STDERR are predefined. These constants are file handles, and can be considered equivalent to the results of running the following commands: STDIN = fopen('php://stdin', 'r'); STDOUT = fopen('php://stdout', 'w'); STDERR = fopen('php://stderr', 'w');. By default an exit code of 0 will be returned if none is provided, i.e. exit is the same as exit(0). As exit is not a function, parentheses are not required if no return code is being passed. Return codes must be in the range of 0 to 254 (255 is reserved by PHP and should not be used). By convention, exiting with a return code of 0 tells the calling program that the PHP script ran successfully. Use a non-zero return code to tell the calling program that a specific error condition occurred."
  },
  {
    "sub_topic_id": 787,
    "sub_topic": "Comments",
    "title": "Remarks",
    "description": "Keep the following tips in mind when deciding how to comment your code: You should always write your code as if comments didn't exist, using well chosen variable and function names. Comments are meant to communicate to other human beings, not to repeat what is written in the code. Various php commenting style guides exist (e.g. pear, zend, etc). Find out which one your company uses and use it consistently!"
  },
  {
    "sub_topic_id": 788,
    "sub_topic": "Common Errors",
    "title": "Remarks",
    "description": "If you get an error like this (or sometimes unexpected $end, depending on PHP version), you will need to make sure that you've matched up all inverted commas, all parentheses, all curly braces, all brackets, etc. Notice the missing curly brace. Also do note that the line number shown for this error is irrelevant - it always shows the last line of your document. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 789,
    "sub_topic": "Compilation of Errors and Warnings",
    "title": "Remarks",
    "description": "'Paamayim Nekudotayim' means 'double colon' in Hebrew; thus this error refers to the inappropriate use of the double colon operator (::). The error is typically caused by an attempt to call a static method that is, in fact, not static. Possible Solution: $classname::doMethod(); If the above code causes this error, you most likely need to simply change the way you call the method: $classname->doMethod(); The latter example assumes that $classname is an instance of a class, and the doMethod() is not a static method of that class."
  },
  {
    "sub_topic_id": 790,
    "sub_topic": "Compile PHP Extensions",
    "title": "Remarks",
    "description": "To compile a PHP extension in a typical Linux environment, there are a few pre-requisites: Basic Unix skills (being able to operate 'make' and a C compiler) An ANSI C compiler The source code for the PHP extension you want to compile Generally there are two ways to compile a PHP extension. You can statically compile the extension into the PHP binary, or compile it as a shared module loaded by your PHP binary at startup. Shared modules are more likely since they allow you to add or remove extensions without rebuilding the entire PHP binary. This example focuses on the shared option. If you installed PHP via your package manager (apt-get install, yum install, etc..) you will need to install the -dev package for PHP, which will include the necessary PHP header files and phpize script for the build environment to work. The package might be named something like php5-dev or php7-dev, but be sure to use your package manager to search for the appropriate name using your distro's repositories. They can differ. If you built PHP from source the header files most likely already exist on your system (usually in /usr/include or /usr/local/include)."
  },
  {
    "sub_topic_id": 791,
    "sub_topic": "Composer Dependency Manager",
    "title": "Remarks",
    "description": "Composer is PHP's most commonly used dependency manager. It's analogous to npm in Node, pip for Python, or NuGet for .NET. Syntax: php path/to/composer.phar [command] [options] [arguments]. Autoloading will only work for libraries that specify autoload information. Most libraries do and will adhere to a standard such as PSR-0 or PSR-4. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 792,
    "sub_topic": "Constants",
    "title": "Remarks",
    "description": "Constants are used to store the values that are not supposed to be changed later. They also are often used to store the configuration parameters especially those which define the environment (dev/production). Constants have types like variables but not all types can be used to initialize a constant. Objects and resources cannot be used as values for constants at all. Arrays can be used as constants starting from PHP 5.6 Some constant names are reserved by PHP. These include true, false, null as well as many module-specific constants. Constants are usually named using uppercase letters."
  },
  {
    "sub_topic_id": 793,
    "sub_topic": "Contributing to the PHP Core",
    "title": "Remarks",
    "description": "PHP is an open source project, and as such, anyone is able to contribute to it. Broadly speaking, there are two ways to contribute to the PHP core: Bug fixing; Feature additions. Before contributing, however, it is important to understand how PHP versions are managed and released so that bug fixes and feature requests can target the correct PHP version. The developed changes can be submitted as a pull request to the PHP Github repository. Useful information for developers can be found on the 'Get Involved' section of the PHP.net site and the #externals forum."
  },
  {
    "sub_topic_id": 794,
    "sub_topic": "Contributing to the PHP Manual",
    "title": "Remarks",
    "description": "The PHP Manual provides both a functional reference and a language reference along with explanations of PHP's major features. The PHP Manual, unlike most languages' documentation, encourages PHP developers to add their own examples and notes to each page of the documentation. This topic explains contribution to the PHP manual, along with tips, tricks, and guidelines for best practice. Contributions to this topic should mainly outline the process around contributing to the PHP Manual, e.g. explain how to add pages, how to submit them for review, finding areas to contribute content, too and so on."
  },
  {
    "sub_topic_id": 795,
    "sub_topic": "Control Structures",
    "title": "Remarks",
    "description": "PHP provides an alternative syntax for some control structures: if, while, for, foreach, and switch. When compared to the normal syntax, the difference is, that the opening brace is replaced by a colon (:) and the closing brace is replaced by endif;, endwhile;, endfor;, endforeach;, or endswitch;, respectively. For individual examples, see the topic on alternative syntax for control structures. declare is used to set an execution directive for a block of code. do-while loop first executes a block of code once, in every case, then iterates through that block of code as long as a specified condition is true. The goto operator allows to jump to another section in the program. It's available since PHP 5.3. The goto instruction is a goto followed by the desired target label: goto MyLabel;. The target of the jump is specified by a label followed by a colon: MyLabel:. This example will print Hello World!:"
  },
  {
    "sub_topic_id": 796,
    "sub_topic": "Cookies",
    "title": "Remarks",
    "description": "An HTTP cookie is a small piece of data sent from a website and stored on the user's computer by the user's web browser while the user is browsing. It is worth noting that mere invoking setcookie function doesn't just put given data into $_COOKIE superglobal array. For example there is no point in doing: setcookie('user', 'Tom', time() + 86400, '/'); var_dump(isset($_COOKIE['user'])); // yields false or the previously set value The value is not there yet, not until next page load. The function setcookie just says 'with next http connection tell the client (browser) to set this cookie'. Then when the headers are sent to the browser, they contain this cookie header. The browser then checks if the cookie hasn't expired yet, and if not, then in http request it sends the cookie to the server and that's when PHP receives it and puts the contents into $_COOKIE array."
  },
  {
    "sub_topic_id": 797,
    "sub_topic": "Create PDF files in PHP",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 798,
    "sub_topic": "Cryptography",
    "title": "Remarks",
    "description": "/* Base64 Encoded Encryption / $enc_data = base64_encode( openssl_encrypt($data, $method, $password, true, $iv) ); / Decode and Decrypt */ $dec_data = base64_decode( openssl_decrypt($enc_data, $method, $password, true, $iv) ); This way of doing the encryption and encoding would not work as presented as you are decrypting the code before unencoding the base 64. You would need to do this in the opposite order. /This way instead/ $enc_data=base64_encode(openssl_encrypt($data, $method, $pass, true, $iv)); $dec_data=openssl_decrypt(base64_decode($enc_data), $method, $pass, true, $iv);"
  },
  {
    "sub_topic_id": 799,
    "sub_topic": "Datetime Class",
    "title": "Remarks",
    "description": "PHP is able to parse a number of date formats. If you want to parse a non-standard format, or if you want your code to explicitly state the format to be used, then you can use the static DateTime::createFromFormat method. PHP 4+ supplies a method, format that converts a DateTime object into a string with a desired format. According to PHP Manual, this is the object oriented function: public string DateTime::format ( string $format ) The function date() takes one parameters - a format, which is a string "
  },
  {
    "sub_topic_id": 800,
    "sub_topic": "Debugging",
    "title": "Remarks",
    "description": "If you want PHP to display runtime errors on the page, you have to enable display_errors, either in the php.ini or using the ini_set function. You can choose which errors to display, with the error_reporting (or in the ini) function, which accepts E_* constants, combined using bitwise operators. PHP can display errors in text or HTML format, depending on the html_errors setting. The var_dump function allows you to dump the contents of a variable (type and value) for debugging. Xdebug is a PHP extension which provides debugging and profiling capabilities. It uses the DBGp debugging protocol."
  },
  {
    "sub_topic_id": 801,
    "sub_topic": "Dependency Injection",
    "title": "Remarks",
    "description": "Dependency Injection (DI) is a fancy term for 'passing things in'. All it really means is passing the dependencies of an object via the constructor and / or setters instead of creating them upon object creation inside the object. Dependency Injection might also refer to Dependency Injection Containers which automate the construction and injection."
  },
  {
    "sub_topic_id": 802,
    "sub_topic": "Design Patterns",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 803,
    "sub_topic": "Docker deployment",
    "title": "Remarks",
    "description": "Docker is a very popular container solution being used widely for deploying code in production environments. It makes it easier to Manage and Scale web-applications and microservices. This document assumes that docker is installed and the daemon running. You can refer to Docker installation to check on how to install the same. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 804,
    "sub_topic": "Exception Handling and Error Reporting",
    "title": "Remarks",
    "description": "try..catch blocks can be used to control the flow of a program where Exceptions may be thrown. They can be caught and handled gracefully rather than letting PHP stop when one is encountered: try {// Do a bunch of things...throw new Exception('My test exception!');} catch (Exception $ex) {// Your logic failed. What do you want to do about that? Log it: file_put_contents('my_error_log.txt', $ex->getMessage(), FILE_APPEND);} The above example would catch the Exception thrown in the try block and log it's message ('My test exception!') to a text file."
  },
  {
    "sub_topic_id": 805,
    "sub_topic": "Executing Upon an Array",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 806,
    "sub_topic": "File handling",
    "title": "Remarks",
    "description": "Most filenames passed to functions in this topic are: Strings in nature. File names can be passed directly. If values of other types are passed, they are cast to string. This is especially useful with SplFileInfo,  which is the value in the iteration of DirectoryIterator. Relative or absolute. They may be absolute. On Unix-like systems, absolute paths start with /, e.g. /home/user/file.txt, while on Windows, absolute paths start with the drive, e.g. C:/Users/user/file.txt They may also be relative, which is dependent on the value of getcwd and subject to change by chdir. Accept protocols. They may begin with scheme:// to specify the protocol wrapper to manage with. For example, file_get_contents('http://example.com') retrieves content from http://example.com. Slash-compatible. While the DIRECTORY_SEPARATOR on Windows is a backslash, and the system returns backslashes for paths by default, the developer can still use / as the directory separator. Therefore, for compatibility, developers can use / as directory separators on all systems, but be aware that the values returned by the functions (e.g. realpath) may contain backslashes."
  },
  {
    "sub_topic_id": 807,
    "sub_topic": "Filters & Filter Functions",
    "title": "Remarks",
    "description": "This extension filters data by either validating or sanitizing it. This is especially useful when the data source contains unknown (or foreign) data, like user supplied input. For example, this data may come from an HTML form. Note that you cannot know if the email address is correct before sending an email to it. You may want to do some extra checks such as checking for a MX record, but this is not necessary. If you send a confirmation email, don't forget to remove unused accounts after a short period."
  },
  {
    "sub_topic_id": 808,
    "sub_topic": "Functional Programming",
    "title": "Remarks",
    "description": "PHP's functional programming relies on functions. Functions in PHP provide organized, reusable code to perform a set of actions. Functions simplify the coding process, prevent redundant logic, and make code easier to follow. This topic describes the declaration and utilization of functions, arguments, parameters, return statements and scope in PHP. In functions taking callable as an argument, you can also put a string with PHP built-in function. It's common to use trim as array_map parameter to remove leading and trailing whitespace from all strings in the array."
  },
  {
    "sub_topic_id": 809,
    "sub_topic": "Functions",
    "title": "Remarks",
    "description": "Syntax: function func_name($parameterName1, $parameterName2) { code_to_run(); } function func_name($optionalParameter = default_value) { code_to_run(); } function func_name(type_name $parameterName) { code_to_run(); } function &returns_by_reference() { code_to_run(); } function func_name(&$referenceParameter) { code_to_run(); } function func_name(...$variadicParameters) { code_to_run(); } // PHP 5.6+ function func_name(type_name &...$varRefParams) { code_to_run(); } // PHP 5.6+ function func_name() : return_type { code_To_run(); } // PHP 7.0+"
  },
  {
    "sub_topic_id": 810,
    "sub_topic": "Generators",
    "title": "Remarks",
    "description": "One common use case for generators is reading a file from disk and iterating over its contents. Below is a class that allows you to iterate over a CSV file. The memory usage for this script is very predictable, and will not fluctuate depending on the size of the CSV file. Using a generator, we don't have to build an entire list of random numbers to return from the function, leading to much less memory being used. A yield statement is similar to a return statement, except that instead of stopping execution of the function and returning, yield instead returns a Generator object and pauses execution of the generator function. Generators are fast coded and in many cases a slim alternative to heavy iterator-implementations. With the fast implementation comes a little lack of control when a generator should stop generating or if it should generate something else. However this can be achieved with the usage of the send() function, enabling the requesting function to send parameters to the generator after every loop."
  },
  {
    "sub_topic_id": 811,
    "sub_topic": "Headers Manipulation",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 812,
    "sub_topic": "How to break down an URL",
    "title": "Remarks",
    "description": "As you code PHP you will most likely get your self in a position where you need to break down an URL into several pieces. There's obviously more than one way of doing it depending on your needs. This article will explain those ways for you so you can find what works best for you. basename(): Given a string containing the path to a file or directory, this function will return the trailing name component. This function will return only the last part of an URL. parse_url(): This function parses a URL and returns an associative array containing any of the various components of the URL that are present."
  },
  {
    "sub_topic_id": 813,
    "sub_topic": "How to Detect Client IP Address",
    "title": "Remarks",
    "description": "In the light of the latest httpoxy vulnerabilities, there is another variable, that is widely misused. HTTP_X_FORWARDED_FOR is often used to detect the client IP address, but without any additional checks, this can lead to security issues, especially when this IP is later used for authentication or in SQL queries without sanitization. Most of the code samples available ignore the fact that HTTP_X_FORWARDED_FOR can actually be considered as information provided by the client itself and therefore is not a reliable source to detect clients IP address. Some of the samples do add a warning about the possible misuse, but still lack any additional check in the code itself. So here is an example of function written in PHP, how to detect a client IP address, if you know that client may be behind a proxy and you know this proxy can be trusted. If you don't known any trusted proxies, you can just use REMOTE_ADDR"
  },
  {
    "sub_topic_id": 814,
    "sub_topic": "HTTP Authentication",
    "title": "Remarks",
    "description": "PLEASE NOTE: ONLY PUT THIS CODE IN THE HEADER OF THE PAGE, OTHERWISE IT WILL NOT WORK! <?php if (!isset($_SERVER['PHP_AUTH_USER'])) { header('WWW-Authenticate: Basic realm='My Realm''); header('HTTP/1.0 401 Unauthorized'); echo 'Text to send if user hits Cancel button'; exit; } echo '<p>Hello  $_SERVER['PHP_AUTH_USER']}.</p>'; $user = $_SERVER['PHP_AUTH_USER']; //Lets save the information echo '<p>You entered {$_SERVER['PHP_AUTH_PW']} as your password.</p>'; $pass = $_SERVER['PHP_AUTH_PW']; //Save the password(optionally add encryption)! ?> //You html page"
  },
  {
    "sub_topic_id": 815,
    "sub_topic": "Image Processing with GD",
    "title": "Remarks",
    "description": "When using header('Content-Type: $mimeType'); and image____ to generate only an image to the output, be sure to output nothing else, note even a blank line after ?>. (That can be a difficult 'bug' to track down -- you get no image and no clue as to why.) The general advice is to not include ?> at all here."
  },
  {
    "sub_topic_id": 816,
    "sub_topic": "Imagick",
    "title": "Remarks",
    "description": "This example is how to turn an image into a Base64 string (i.e. a string you can use directly in a src attribute of an img tag). This example specifically uses the Imagick library (there are others available, such as GD as well). <?php /** * This loads in the file, image.jpg for manipulation.  * The filename path is releative to the .php file containing this code, so  * in this example, image.jpg should live in the same directory as our script.  */ $img = new Imagick('image.jpg');  /**  * This resizes the image, to the given size in the form of width, height.  * If you want to change the resolution of the image, rather than the size  * then $img->resampleimage(320, 240) would be the right function to use. *  * Note that for the second parameter, you can set it to 0 to maintain the  * aspect ratio of the original image.  */ $img->resizeImage(320, 240); /**  * This returns the unencoded string representation of the image  */ $imgBuff = $img->getimageblob(); /**  * This clears the image.jpg resource from our $img object and destroys the  * object. Thus, freeing the system resources allocated for doing our image  * manipulation.  */ $img->clear();  /**  * This creates the base64 encoded version of our unencoded string from  * earlier. It is then output as an image to the page.  *   * Note, that in the src attribute, the image/jpeg part may change based on  * the image type you're using (i.e. png, jpg etc).  */ $img = base64_encode($imgBuff); echo '<img alt='Embedded Image' src='data:image/jpeg;base64,$img' />';"
  },
  {
    "sub_topic_id": 817,
    "sub_topic": "IMAP",
    "title": "Remarks",
    "description": "To do anything with an IMAP account you need to connect to it first. To do this you need to specify some required parameters: The server name or IP address of the mail server; The port you wish to connect on; IMAP is 143 or 993 (secure); POP is 110 or 995 (secure); SMTP is 25 or 465 (secure); NNTP is 119 or 563 (secure); Connection flags (see below). Once you've connected to your mailbox, you'll want to take a look inside. The first useful command is imap_list. The first parameter is the resource you acquired from imap_open, the second is your mailbox string and the third is a fuzzy search string (* is used to match any pattern)."
  },
  {
    "sub_topic_id": 818,
    "sub_topic": "Installing a PHP environment on Windows",
    "title": "Remarks",
    "description": "HTTP services normally run on port 80, but if you have some application installed like Skype which also utilizes port 80 then it won't start. In that case you need to change either its port or the port of the conflicting application. When done, restart the HTTP service. XAMPP is the most popular PHP development environment. XAMPP is a completely free, open-source and easy to install Apache distribution containing MariaDB, PHP, and Perl. Download appropriate stable XAMPP version from their download page. Choose the download based on the type of OS (32 or 64bit and OS version) and the PHP version it has to support. Current latest being XAMPP for Windows 7.0.8 / PHP 7.0.8. Or you can follow this: XAMPP for Windows exists in three different flavors: Installer (Probably .exe format the easiest way to install XAMPP) ZIP (For purists: XAMPP as ordinary ZIP .zip format archive) 7zip: (For purists with low bandwidth: XAMPP as 7zip .7zip format archive)"
  },
  {
    "sub_topic_id": 819,
    "sub_topic": "Installing on Linux/Unix Environments",
    "title": "Remarks",
    "description": "This will only install PHP. If you wish to serve a PHP file to the web you will also need to install a web-server such as Apache, Nginx, or use PHP's built in web-server (php version 5.4+). If you are in a Ubuntu version below 16.04 and want to use PHP 7 anyway, you can add Ondrej's PPA repository by doing: sudo add-apt-repository ppa:ondrej/php. Use the yum command to manage packages in Enterprise Linux-based operating systems: yum install php This installs a minimal install of PHP including some common features. If you need additional modules, you will need to install them separately. Once again, you can use yum to search for these packages: yum search php-*"
  },
  {
    "sub_topic_id": 820,
    "sub_topic": "JSON",
    "title": "Remarks",
    "description": "JSON (JavaScript Object Notation) is a platform and language independent way of serializing objects into plaintext. Because it is often used on web and so is PHP, there is a basic extension for working with JSON in PHP. string json_encode ( mixed $value [, int $options = 0 [, int $depth = 512 ]] )mixed json_decode ( string $json [, bool $assoc = false [, int $depth = 512 [, int $options = 0 ]]] ). json_decode handling of invalid JSON is very flaky, and it is very hard to reliably determine if the decoding succeeded, json_decode returns null for invalid input, even though null is also a perfectly valid object for JSON to decode to. To prevent such problems you should always call json_last_error every time you use it."
  },
  {
    "sub_topic_id": 821,
    "sub_topic": "Localization",
    "title": "Remarks",
    "description": "GNU gettext is an extension within PHP that must be included at the php.ini: extension=php_gettext.dll #Windows extension=gettext.so #Linux The gettext functions implement an NLS (Native Language Support) API which can be used to internationalize your PHP applications. Translating strings can be done in PHP by setting the locale, setting up your translation tables and calling gettext() on any string you want to translate."
  },
  {
    "sub_topic_id": 822,
    "sub_topic": "Loops",
    "title": "Remarks",
    "description": "Loops are a fundamental aspect of programming. They allow programmers to create code that repeats for some given number of repetitions, or iterations. The number of iterations can be explicit (6 iterations, for example), or continue until some condition is met ('until Hell freezes over').This topic covers the different types of loops, their associated control statements, and their potential applications in PHP. It is often useful to execute the same or similar block of code several times. Instead of copy-pasting almost equal statements loops provide a mechanism for executing code a specific number of times and walking over data structures. PHP supports the following four types of loops: for; while; do..while; foreach. To control these loops, continue and break statements are available."
  },
  {
    "sub_topic_id": 823,
    "sub_topic": "Machine learning",
    "title": "Remarks",
    "description": "The topic uses PHP-ML for all machine learning algorithms. The installation of the library can be done using composer require php-ai/php-ml The github repository for the same can be found here. Also it is worth noting that the examples given are very small data-set only for the purpose of demonstration. The actual data-set should be more comprehensive than that. Classification in Machine Learning is the problem that identifies to which set of categories does a new observation belong. Classification falls under the category of Supervised Machine Learning."
  },
  {
    "sub_topic_id": 824,
    "sub_topic": "Magic Constants",
    "title": "Remarks",
    "description": "Magic constants are distinguished by their __CONSTANTNAME__ form. There are currently eight magical constants that change depending on where they are used. For example, the value of __LINE__depends on the line that it's used on in your script. __CLASS__ magic constant returns the same result as get_class() function called without parameters and they both return the name of the class where it was defined (i.e. where you wrote the function call/constant name ).In contrast, get_class($this) and get_called_class() functions call, will both return the name of the actual class which was instantiated. __FUNCTION__ returns only the name of the function whereas __METHOD__ returns the name of the class along with the name of the function."
  },
  {
    "sub_topic_id": 825,
    "sub_topic": "Magic Methods",
    "title": "Remarks",
    "description": "Examples: __call() and __callStatic(); __clone(); __construct() and __destruct(); __debugInfo(); __get(), __set(), __isset() and __unset(); __invoke(); __sleep() and __wakeup(); __toString(). Normally, when you don't define these methods on your class, PHP just retrieves the field as it is stored in your class. However, you can override these methods to create classes that can hold data like an array, but are usable like an object. __sleep and __wakeup are methods that are related to the serialization process. serialize function checks if a class has a __sleep method. If so, it will be executed before any serialization. __sleep is supposed to return an array of the names of all variables of an object that should be serialized."
  },
  {
    "sub_topic_id": 826,
    "sub_topic": "Manipulating an Array",
    "title": "Remarks",
    "description": "Sometimes you want to add an element to the beginning of an array without modifying any of the current elements (order) within the array. Whenever this is the case, you can use array_unshift(). array_unshift() prepends passed elements to the front of the array. Note that the list of elements is prepended as a whole, so that the prepended elements stay in the same order. All numerical array keys will be modified to start counting from zero while literal keys won't be touched. Since array_unshift forces the array to reset the key-value pairs as the new element let the following entries have the keys n+1 it is smarter to create a new array and append the existing array to the newly created array."
  },
  {
    "sub_topic_id": 827,
    "sub_topic": "mongo-php",
    "title": "Remarks",
    "description": "MongoDB server running on port usually 27017. (type mongod on command prompt to run mongodb server) Php installed as either cgi or fpm with MongoDB extension installed(MongoDB extension is not bundled with default php) Composer library(mongodb/mongodb).(In the project root run php composer.phar require 'mongodb/mongodb=^1.0.0' to install the MongoDB library) If everything is ok you are ready to move on. Check For Php installation"
  },
  {
    "sub_topic_id": 828,
    "sub_topic": "Multi Threading Extension",
    "title": "Remarks",
    "description": "With pthreads v3 pthreads can only be loaded when using the cli SAPI, thus it is a good practice to keep the extension=pthreads.so directive in php-cli.ini ONLY, if you are using PHP7 and Pthreads v3. If you are using Wamp on Windows, you have to configure the extension in php.ini : Open php\\php.ini and add: extension=php_pthreads.dll Concerning Linux users, you have to replace .dll by .so: extension=pthreads.so You can directly execute this command to add it to php.ini (change /etc/php.ini with your custom path) echo 'extension=pthreads.so' >> /etc/php.ini"
  },
  {
    "sub_topic_id": 829,
    "sub_topic": "Multiprocessing",
    "title": "Remarks",
    "description": "PHP has built in function pcntl_fork for creating child process. pcntl_fork is same as fork in unix. It does not take in any parameters and returns integer which can be used to differentiate between parent and child process. Consider the following code for explanation <?php // $pid is the PID of child $pid = pcntl_fork(); if ($pid == -1) {die('Error while creating child process'); } else if ($pid) {// Parent process } else { // Child process }?> As you can see -1 is an error in fork and the child was not created. On creation of child, we have two processes running with separate PID. Another consideration here is a zombie process or defunct process when parent process finishes before child process. To prevent a zombie children process simply add pcntl_wait($status) at the end of parent process. pnctl_wait suspends execution of parent process until the child process has exited. It is also worth noting that zombie process can't be killed using SIGKILL signal."
  },
  {
    "sub_topic_id": 830,
    "sub_topic": "Namespaces",
    "title": "Remarks",
    "description": "From the PHP documentation: What are namespaces? In the broadest definition namespaces are a way of encapsulating items. This can be seen as an abstract concept in many places. For example, in any operating system directories serve to group related files, and act as a namespace for the files within them. As a concrete example, the file foo.txt can exist in both directory /home/greg and in /home/other, but two copies of foo.txt cannot co-exist in the same directory. In addition, to access the foo.txt file outside of the /home/greg directory, we must prepend the directory name to the file name using the directory separator to get /home/greg/foo.txt. This same principle extends to namespaces in the programming world. Note that top-level namespaces PHP and php are reserved for the PHP language itself. They should not be used in any custom code."
  },
  {
    "sub_topic_id": 831,
    "sub_topic": "Object Serialization",
    "title": "Remarks",
    "description": "All PHP types except for resources are serializable. Resources are a unique variable type that reference 'external' sources, such as database connections. serialize() returns a string containing a byte-stream representation of any value that can be stored in PHP. unserialize() can use this string to recreate the original variable values. Classes that implement this interface no longer support __sleep() and __wakeup(). The method serialize is called whenever an instance needs to be serialized. This does not invoke __destruct() or has any other side effect unless programmed inside the method. When the data is unserialized the class is known and the appropriate unserialize() method is called as a constructor instead of calling __construct(). If you need to execute the standard constructor you may do so in the method."
  },
  {
    "sub_topic_id": 832,
    "sub_topic": "Operators",
    "title": "Remarks",
    "description": "An operator is something that takes one or more values (or expressions, in programming jargon) and yields another value (so that the construction itself becomes an expression). Operators can be grouped according to the number of values they take. Operators 'operate' or act on one (unary operators such as !$a and ++$a), two (binary operators such as $a + $b or $a >> $b) or three (the only ternary operator is $a ? $b : $c) expressions. Operator precedence influences how operators are grouped (as if there were parentheses). The following is a list of operators in order of there precendence (operators in the second column). If multiple operators are in one row, the grouping is determined by the code order, where the first column indicates the associativity."
  },
  {
    "sub_topic_id": 833,
    "sub_topic": "Output Buffering",
    "title": "Remarks",
    "description": "Output buffering allows you to store any textual content (Text, HTML) in a variable and send to the browser as one piece at the end of your script. By default, php sends your content as it interprets it. Any content outputted between ob_start() and ob_get_clean() will be captured and placed into the variable $content. Calling ob_get_clean() triggers both ob_get_contents() and ob_end_clean(). You can apply any kind of additional processing to the output by passing a callable to ob_start(). We are using the output buffer here because we are triggering a header() redirect based on the result of the loop."
  },
  {
    "sub_topic_id": 834,
    "sub_topic": "Outputting the Value of a Variable",
    "title": "Remarks",
    "description": "To build a dynamic and interactive PHP program, it is useful to output variables and their values. The PHP language allows for multiple methods of value output. This topic covers the standard methods of printing a value in PHP and where these methods can be used. Variables in PHP come in a variety of types. Depending on the use case, you may want to output them to the browser as rendered HTML, output them for debugging, or output them to the terminal (if running an application via the command line). Below are some of the most commonly used methods and language constructs to output variables: echo - Outputs one or more strings; print - Outputs a string and returns 1 (always); printf - Outputs a formatted string and returns the length of the outputted string; sprintf - Formats a string and returns the formatted string; print_r - Outputs or returns content of the argument as a human-readable string; var_dump - Outputs human-readable debugging information about the content of the argument(s) including its type and value; var_export - Outputs or returns a string rendering of the variable as valid PHP code, which can be used to recreate the value."
  },
  {
    "sub_topic_id": 835,
    "sub_topic": "Parsing HTML",
    "title": "Remarks",
    "description": "PHP implements a DOM Level 2 compliant parser, allowing you to work with HTML using familiar methods like getElementById() or appendChild(). Note that PHP will emit warnings about any problems with the HTML, especially if you are importing a document fragment. To avoid these warnings, tell the DOM library (libxml) to handle its own errors by calling libxml_use_internal_errors() before importing your HTML. You can then use libxml_get_errors() to handle errors if needed."
  },
  {
    "sub_topic_id": 836,
    "sub_topic": "Password Hashing Functions",
    "title": "Remarks",
    "description": "As more secure web services avoid storing passwords in plain text format, languages such as PHP provide various (undecryptable) hash functions to support the more secure industry standard. This topic provides documentation for proper hashing with PHP. Prior to PHP 5.5, you may use the compatibility pack to provide the password_* functions. It is highly recommended that you use the compatibility pack if you are able to do so. With or without the compatibility pack, correct Bcrypt functionality through crypt() relies on PHP 5.3.7+ otherwise you must restrict passwords to ASCII-only character sets. Note: If you use PHP 5.5 or below you're using an unsupported version of PHP which does not receive any security updates anymore. Update as soon as possible, you can update your password hashes afterwards."
  },
  {
    "sub_topic_id": 837,
    "sub_topic": "PDO",
    "title": "Remarks",
    "description": "The PDO (PHP Data Objects) extension allows developers to connect to numerous different types of databases and execute queries against them in a uniform, object oriented manner. Warning Do not miss to check for exceptions while using lastInsertId(). It can throw the following error: SQLSTATE IM001 : Driver does not support this function. Database transactions ensure that a set of data changes will only be made permanent if every statement is successful. Any query or code failure during a transaction can be caught and you then have the option to roll back the attempted changes."
  },
  {
    "sub_topic_id": 838,
    "sub_topic": "Performance",
    "title": "Remarks",
    "description": "PHP's runtime memory limit is set through the INI directive memory_limit. This setting prevents any single execution of PHP from using up too much memory, exhausting it for other scripts and system software. The memory limit defaults to 128M and can be changed in the php.ini file or at runtime. It can be set to have no limit, but this is generally considered bad practice. The exact memory usage used during runtime can be determined by calling memory_get_usage(). It returns the number of bytes of memory allocated to the currently running script. As of PHP 5.2, it has one optional boolean parameter to get the total allocated system memory, as opposed to the memory that's actively being used by PHP."
  },
  {
    "sub_topic_id": 839,
    "sub_topic": "PHP Built in server",
    "title": "Remarks",
    "description": "Learn how to use the built in server to develop and test your application without the need of other tools like xamp, wamp, etc. php -S localhost:80 -t project/public router.php PHP 7.1.7 Development Server started at Fri Jul 14 15:22:25 2017 Listening on http://localhost:80 Document root is /home/project/public Press Ctrl-C to quit. PHP 7.1.7 Development Server started at Fri Jul 14 15:11:05 2017 Listening on http://localhost:80 Document root is  :\\projetos\repgeral Press Ctrl-C to quit. This is the simplest way to start a PHP server that responds to request made to localhost at the port 80. The -S tells that we are starting a webserver. The localhost:80 indicates the host that we are answering and the port. You can use other combinations like: mymachine:80 - will listen on the address mymachine and port 80; 127.0.0.1:8080 - will listen on the address 127.0.0.1 and port 8080"
  },
  {
    "sub_topic_id": 840,
    "sub_topic": "PHP MySQLi",
    "title": "Remarks",
    "description": "The mysqli interface is an improvement (it means 'MySQL Improvement extension') of the mysql interface, which was deprecated in version 5.5 and is removed in version 7.0. The mysqli extension, or as it is sometimes known, the MySQL improved extension, was developed to take advantage of new features found in MySQL systems versions 4.1.3 and newer. The mysqli extension is included with PHP versions 5 and later. The mysqli interface has a number of benefits, the key enhancements over the mysql extension being: Object-oriented interface; Support for Prepared Statements; Support for Multiple Statements; Support for Transactions; Enhanced debugging capabilities; Embedded server support.It features a dual interface: the older, procedural style and a new, object-oriented programming (OOP) style. The deprecated mysql had only a procedural interface, so the object-oriented style is often preferred. However, the new style is also favorable because of the power of OOP."
  },
  {
    "sub_topic_id": 841,
    "sub_topic": "php mysqli affected rows returns 0 when it should return a positive integer",
    "title": "Remarks",
    "description": "This script is designed to handle reporting devices (IoT), when a device is not previously authorized (in the devices table in the database), I add the new device to a new_devices table. I run an update query, and if affected_rows returns < 1, I insert. When I have a new device report, the first time $stmt->affected_rows runs it returns 0, subsequent communication returns 1, then 1, 0, 2, 2, 2, 0, 3, 3, 3, 3, 3, 3, 0, 4, 0, 0, 6, 6, 6, etc"
  },
  {
    "sub_topic_id": 842,
    "sub_topic": "PHPDoc",
    "title": "Remarks",
    "description": "PHPDoc is a section of documentation which provides information on aspects of a Structural Element — PSR-5 PHPDoc annotations are comments that provide metadata about all types of structures in PHP. Many popular IDEs are configured by default to utilize PHPDoc annotations to provide code insights and identify possible problems before they arise. While PHPDoc annotations are not part of the PHP core, they currently hold draft status with PHP-FIG as PSR-5. All PHPDoc annotations are contained within DocBlocks that are demonstrated by a multi-line with two asterisks: /**  *  */"
  },
  {
    "sub_topic_id": 843,
    "sub_topic": "Processing Multiple Arrays Together",
    "title": "Remarks",
    "description": "The array_intersect function will return an array of values that exist in all arrays that were passed to this function. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 844,
    "sub_topic": "PSR",
    "title": "Remarks",
    "description": "The PSR (PHP Standards Recommendation) is a series of recommendations put together by the FIG (Framework Interop Group). The idea behind the group is for project representatives to talk about the commonalities between our projects and find ways we can work together - FIG FAQ PSRs can be in the following states: Accepted, Review, Draft or Deprecated. PSR-4 is an accepted recommendation that outlines the standard for autoloading classes via filenames. This recommendation is recommended as the alternative to the earlier (and now deprecated) PSR-0. Replacing the location ('classes/') and filename extension ('.class.php') with values that apply to your structure. Composer package manager supports PSR-4 which means, if you follow the standard, you can load your classes in your project automatically using Composer's vendor autoloader."
  },
  {
    "sub_topic_id": 845,
    "sub_topic": "Reading Request Data",
    "title": "Remarks",
    "description": "GET requests, are best for providing data that's needed to render the page and may be used multiple times (search queries, data filters...). They are a part of the URL, meaning that they can be bookmarked and are often reused. POST requests on the other hand, are meant for submitting data to the server just once (contact forms, login forms...). Unlike GET, which only accepts ASCII, POST requests also allow binary data, including file uploads."
  },
  {
    "sub_topic_id": 846,
    "sub_topic": "Recipes",
    "title": "Remarks",
    "description": "This topic is a collection of solutions to common tasks in PHP. The examples provided here will help you overcome a specific problem. You should already be familiar with the basics of PHP. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 847,
    "sub_topic": "References",
    "title": "Remarks",
    "description": "While assigning two variables by reference, both variables point to the same value. Take the following example: $foo = 1; $bar = &$foo; $foo does not point to $bar. $foo and $bar both point to the same value of $foo, which is 1. To illustrate: $baz = &$bar; unset($bar); $baz++; If we had a points to relationship, this would be broken now after the unset(); instead, $foo and $baz still point to the same value, which is 2."
  },
  {
    "sub_topic_id": 848,
    "sub_topic": "Reflection",
    "title": "Remarks",
    "description": "Reflection is often used as part of software testing, such as for the runtime creation/instantiation of mock objects. It's also great for inspecting the state of an object at any given point in time. Here's an example of using Reflection in a unit test to verify a protected class member contains the expected value. Below is a very basic class for a Car. It has a protected member variable that will contain the value representing the color of the car. Because the member variable is protected we cannot access it directly and must use a getter and setter method to retrieve and set its value respectively."
  },
  {
    "sub_topic_id": 849,
    "sub_topic": "Regular Expressions (regexp/PCRE)",
    "title": "Remarks",
    "description": "PHP regular expressions follow PCRE pattern standards, which are derived from Perl regular expressions. All PCRE strings in PHP must be enclosed with delimiters. A delimiter can be any non-alphanumeric, non-backslash, non-whitespace character. Popular delimiters are ~, /, % for instance. PCRE patterns can contain groups, character classes, character groups, look-ahead/look-behind assertions and escaped characters. It is possible to use PCRE modifiers in the $pattern string. Some common ones are i (case insensitive), m (multiline) and s (the dot metacharacter includes newlines). The g (global) modifier is not allowed, you will use the preg_match_all function instead."
  },
  {
    "sub_topic_id": 850,
    "sub_topic": "Secure Remeber Me",
    "title": "Remarks",
    "description": "I have been searching on this topic for sometime till i found this post https://stackoverflow.com/a/17266448/4535386 from ircmaxell, I think it deserves more exposure. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 851,
    "sub_topic": "Security",
    "title": "Remarks",
    "description": "As the majority of websites run off PHP, application security is an important topic for PHP developers to protect their website, data, and clients. This topic covers best security practices in PHP as well as common vulnerabilities and weaknesses with example fixes in PHP. In a similar way that SQL injection allows an attacker to execute arbitrary queries on a database, command-line injection allows someone to run untrusted system commands on a web server. With an improperly secured server this would give an attacker complete control over a system. All command arguments must be escaped using escapeshellarg() or escapeshellcmd(). This makes the arguments non-executable. For each parameter, the input value should also be validated."
  },
  {
    "sub_topic_id": 852,
    "sub_topic": "Sending Email",
    "title": "Remarks",
    "description": "E-Mail I'm sending through my script never arrives. What should I do? Make sure you have error reporting turned on to see any errors. If you have access to PHP's error log files, check those. Is the mail() command configured properly on your server? (If you are on shared hosting, you can not change anything here.) If E-Mails are just disappearing, start an E-Mail account with a freemail service that has a spam folder (or use a mail account that does no spam filtering at all). This way, you can see whether the E-Mail is not getting sent out, or perhaps sent out but filtered as spam. Did you check the from: address you used for possible returned to sender mails? You can also set up a separate bounce address for error mails. The E-Mail I'm sending is getting filtered as spam. What should I do? Does the sender address (From) belong to a domain that runs on the server you send the E-Mail from? If not, change that. Never use sender addresses like xxx@gmail.com. Use reply-to if you need replies to arrive at a different address. Is your server on a blacklist? This is a possibility when you're on shared hosting when neighbours behave badly. Most blacklist providers, like Spamhaus, have tools that allow you to look up your server's IP. There's also third party tools like MX Toolbox. Some installations of PHP require setting a fifth parameter to mail() to add a sender address. See whether this might be the case for you. If all else fails, consider using email-as-a-service such as Mailgun, SparkPost, Amazon SES, Mailjet, SendinBlue or SendGrid—to name a few—instead. They all have APIs that can be called using PHP."
  },
  {
    "sub_topic_id": 853,
    "sub_topic": "Serialization",
    "title": "Remarks",
    "description": "The value to be serialized. serialize() handles all types, except the resource-type. You can even serialize() arrays that contain references to itself. Circular references inside the array/object you are serializing will also be stored. Any other reference will be lost. When serializing objects, PHP will attempt to call the member function __sleep() prior to serialization. This is to allow the object to do any last minute clean-up, etc. prior to being serialized. Likewise, when the object is restored using unserialize() the __wakeup() member function is called. Object's private members have the class name prepended to the member name; protected members have a '*' prepended to the member name. These prepended values have null bytes on either side."
  },
  {
    "sub_topic_id": 854,
    "sub_topic": "Sessions",
    "title": "Remarks",
    "description": "Note that calling session_start() even if the session has already started will result in a PHP warning. Note that if you store an object in a session, it can be retrieved gracefully only if you have an class autoloader or you have loaded the class already. Otherwise, the object will come out as the type __PHP_Incomplete_Class, which may later lead to crashes. See Namespacing and Autoloading about autoloading. Session data can be hijacked. This is outlined in: Pro PHP Security: From Application Security Principles to the Implementation of XSS Defense - Chapter 7: Preventing Session Hijacking So it can be strongly recommended to never store any personal information in $_SESSION. This would most critically include credit card numbers, government issued ids, and passwords; but would also extend into less assuming data like names, emails, phone numbers, etc which would allow a hacker to impersonate/compromise a legitimate user. As a general rule, use worthless/non-personal values, such as numerical identifiers, in session data."
  },
  {
    "sub_topic_id": 855,
    "sub_topic": "SimpleXML",
    "title": "Remarks",
    "description": "Use simplexml_load_string to create a  impleXMLElement from a string: $xmlString = <?xml version='1.0' encoding='UTF-8'?>; $xml = simplexml_load_string($xmlString) or die(Error: Cannot create object); Note that or not || must be used here because the precedence of or is higher than =. The code after or will only be executed if $xml finally resolves to false."
  },
  {
    "sub_topic_id": 856,
    "sub_topic": "SOAP Client",
    "title": "Remarks",
    "description": "First, create a new SoapClient object, passing the URL to the WSDL file and optionally, an array of options. When creating a SOAP Client in PHP, you can also set a classmap key in the configuration array. This classmap defines which types defined in the WSDL should be mapped to actual classes, instead of the default StdClass. The reason you would want to do this is because you can get auto-completion of fields and method calls on these classes, instead of having to guess which fields are set on the regular StdClass. After configuring the classmap, whenever you perform a certain operation that returns a type Address or Book, the SoapClient will instantiate that class, fill the fields with the data and return it from the operation call."
  },
  {
    "sub_topic_id": 857,
    "sub_topic": "SOAP Server",
    "title": "Remarks",
    "description": "Syntax: addFunction() //Register one (or more)  unction into SOAP request handler addSoapHeader() //Add a SOAP header to the response fault() //Issue SoapServer fault indicating an error getFunctions() //Returns list of functions handle() //Handles a SOAP request setClass() //Sets the class which handles SOAP requests setObject() //Sets the object which will be used to handle SOAP requests setPersistence() //Sets SoapServer persistence mode"
  },
  {
    "sub_topic_id": 858,
    "sub_topic": "Sockets",
    "title": "Remarks",
    "description": "Bind connections from a given network (parameter 2) for a specific port (parameter 3) to the socket. The second parameter is usually '0.0.0.0', which accepts connection from all networks. It can also One common cause of errors from socket_bind is that the address specified is already bound to another process. Other processes are usually killed (usually manually to prevent accidentally killing critical processes) so that the sockets would be freed. Make the socket listen to incoming connections using socket_listen. The second parameter is the maximum number of connections to allow queuing before they are accepted."
  },
  {
    "sub_topic_id": 859,
    "sub_topic": "SPL data structures",
    "title": "Remarks",
    "description": "PHP's default Array type is actually implemented as ordered hash maps, which allow us to create arrays that consist of key/value pairs where values can be of any type and keys can be either numbers or strings. This is not traditionally how arrays are created, however. So as you can see from this illustration a normal PHP array can be viewed more like an an ordered set of key/value pairs, where each key can map to any value. Notice in this array we have keys that are both numbers and strings, as well as values of different types and the key has no bearing on the order of the elements."
  },
  {
    "sub_topic_id": 860,
    "sub_topic": "SQLite3",
    "title": "Remarks",
    "description": "Let's create a new database first. Create it only if the file doesn't exist and open it for reading/writing. The extension of the file is up to you, but .sqlite is pretty common and self-explanatory. $db = new SQLite3('analytics.sqlite', SQLITE3_OPEN_CREATE | SQLITE3_OPEN_READWRITE); This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 861,
    "sub_topic": "Streams",
    "title": "Remarks",
    "description": "Streams are essentially a transfer of data between an origin and a destination, to paraphrase Josh Lockhart in his book Modern PHP. The origin and the destination can be a file a command-line  process a network connection a ZIP or TAR archive temporary memory standard input/output or any other resource available via PHP's stream wrappers. Examples of available stream wrappers (schemes):  file:// — Accessing local filesystem http:// — Accessing HTTP(s) URLs ftp:// — Accessing FTP(s) URLs php:// — Accessing various I/O streams phar:// — PHP Archive ssh2:// — Secure Shell 2 ogg:// — Audio streams The scheme (origin) is the identifier of the stream's wrapper. For example, for the file system this is file://. The target is the stream's data source, for example the file name."
  },
  {
    "sub_topic_id": 862,
    "sub_topic": "String formatting",
    "title": "Remarks",
    "description": "Single characters can be extracted using array (square brace) syntax as well as curly brace syntax. These two syntaxes will only return a single character from the string. If more than one character is needed, a function will be required, i.e.- substr. Strings can also be changed one character at a time using the same square brace and curly brace syntax. Replacing more than one character requires a function, i.e.- substr_replace. The complex (curly) syntax format provides another option which requires that you wrap your variable within curly braces {}. This can be useful when embedding variables within textual content and helping to prevent possible ambiguity between textual content and variables."
  },
  {
    "sub_topic_id": 863,
    "sub_topic": "String Parsing",
    "title": "Remarks",
    "description": "Regex should be used for other uses besides getting strings out of strings or otherwise cutting strings into pieces. preg_match can be used to parse string using regular expression. The parts of expression enclosed in parenthesis are called subpatterns and with them you can pick individual parts of the string. strpos can be understood as the number of bytes in the haystack before the first occurrence of the needle."
  },
  {
    "sub_topic_id": 864,
    "sub_topic": "Superglobal Variables PHP",
    "title": "Remarks",
    "description": "Superglobals are built-in variables that are always available in all scopes.Several predefined variables in PHP are superglobals, which means they are available in all scopes throughout a script. There is no need to do global $variable; to access them within functions or methods. Put simply, these are variables that are available in all scope in your scripts. This means that there is no need to pass them as parameters in your functions, or store them outside a block of code to have them available in different scopes."
  },
  {
    "sub_topic_id": 865,
    "sub_topic": "Traits",
    "title": "Remarks",
    "description": "PHP only allows single inheritance. In other words, a class can only extend one other class. But what if you need to include something that doesn't belong in the parent class? Prior to PHP 5.4 you would have to get creative, but in 5.4 Traits were introduced. Traits allow you to basically copy and paste a portion of a class into your main class. So here we have MrEd, which is already extending Horse. But not all horses Talk, so we have a Trait for that. Let's note what this is doing First, we define our Trait. We can use it with autoloading and Namespaces (see also Referencing a class or function in a namespace). Then we include it into our MrEd class with the keyword use. You'll note that MrEd takes to using the Talk functions and variables without defining them. Remember what we said about copy and paste? These functions and variables are all defined within the class now, as if this class had defined them. Traits are most closely related to Abstract classes in that you can define variables and functions. You also cannot instantiate a Trait directly (i.e. new Trait()). Traits cannot force a class to implicitly define a function like an Abstract class or an Interface can. Traits are only for explicit definitions (since you can implement as many Interfaces as you want, see Interfaces)."
  },
  {
    "sub_topic_id": 866,
    "sub_topic": "Type hinting",
    "title": "Remarks",
    "description": "Type hinting or type declarations are a defensive programming practice that ensures a function's parameters are of a specified type. This is particularly useful when type hinting for an interface because it allows the function to guarantee that a provided parameter will have the same methods as are required in the interface. Passing the incorrect type to a type hinted function will lead to a fatal error: Fatal error: Uncaught TypeError: Argument X passed to foo() must be of the type RequiredType, ProvidedType given"
  },
  {
    "sub_topic_id": 867,
    "sub_topic": "Type juggling and Non-Strict Comparison Issues",
    "title": "Remarks",
    "description": "PHP is a loosely typed language. This means that, by default, it doesn't require operands in an expression to be of the same (or compatible) types. For example, you can append a number to a string and expect it to work. var_dump (This is example number  . 1); The output will be: string(24) 'This is example number ' PHP accomplishes this by automatically casting incompatible variable types into types that allow the requested operation to take place. In the case above, it will cast the integer literal 1 into a string, meaning that it can be concatenated onto the preceding string literal. This is referred to as type juggling. This is a very powerful feature of PHP, but it is also a feature that can lead you to a lot of hair-pulling if you are not aware of it, and can even lead to security problems."
  },
  {
    "sub_topic_id": 868,
    "sub_topic": "Types",
    "title": "Remarks",
    "description": "Examples: Boolean Callable Float Integers Null Resources Strings Type Casting Type Comparison Type Juggling. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 869,
    "sub_topic": "Unicode Support in PHP",
    "title": "Remarks",
    "description": "Native string functions are mapped to single byte functions, they do not work well with Unicode. The extentions iconv and mbstring offer some support for Unicode, while the Intl-extention offers full support. Intl is a wrapper for the facto de standard ICU library, see http://site.icu-project.org for detailed information that is not available on http://php.net/manual/en/book.intl.php . If you can not install the extention, have a look at an alternative implemention of Intl from the Symfony framework."
  },
  {
    "sub_topic_id": 870,
    "sub_topic": "Unit Testing",
    "title": "Remarks",
    "description": "Complete list of assertions. Examples: assertTrue(bool $condition[, string $messageIfFalse = '']); assertEquals(mixed $expected, mixed $actual[, string $messageIfNotEqual = '']); Unit tests are used for testing source code to see if it contains deals with inputs as we expect. Unit tests are supported by the majority of frameworks. There are several different PHPUnit tests and they might differ in syntax. In this example we are using PHPUnit."
  },
  {
    "sub_topic_id": 871,
    "sub_topic": "URLs",
    "title": "Remarks",
    "description": "The http_build_query() will create a query string from an array or object. These strings can be appended to a URL to create a GET request, or used in a POST request with, for example, cURL. To separate a URL into its individual components, use parse_url(). You can also selectively return just one component of the url. To return just the querystring. After execution of the above, the $params array would be populated . This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 872,
    "sub_topic": "Using cURL in PHP",
    "title": "Remarks",
    "description": "cURL is a tool for transferring data with URL syntax. It support HTTP, FTP, SCP and many others(curl >= 7.19.4). Remember, you need to install and enable the cURL extension to use it. By default, PHP Curl supports GET and POST requests. It is possible to also send custom requests, such as DELETE, PUT or PATCH (or even non-standard methods) using the CURLOPT_CUSTOMREQUEST parameter. Remember, though, that these two steps are not necessary unless you need to carry cookies between different cURL handles. For most use cases, setting CURLOPT_COOKIEFILE to the empty string is all you need."
  },
  {
    "sub_topic_id": 873,
    "sub_topic": "Using MongoDB",
    "title": "Remarks",
    "description": "Create a MongoDB connection, that later you can query: $manager = new \\MongoDB\\Driver\\Manager('mongodb://localhost:27017'); In the next example, you will learn how to query the connection object. This extension close the connection automatically, it's not necessary to close manually. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 874,
    "sub_topic": "Using Redis with PHP",
    "title": "Remarks",
    "description": "The Redis PHP module gives access to the same commands as the Redis CLI client so it is quite straightforward to use. To install PHP on Ubuntu, first install the Redis server: sudo apt install redis-server then install the PHP module: sudo apt install php-redis And restart the Apache server: sudo service apache2 restart. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 875,
    "sub_topic": "Using SQLSRV",
    "title": "Remarks",
    "description": "The SQLSRV driver is a Microsoft supported PHP extension that allows you to access Microsoft SQL Server and SQL Azure databases. It is an alternative for the MSSQL drivers that were deprecated as of PHP 5.3, and have been removed from PHP 7. The SQLSRV extension can be used on the following operating systems: Windows Vista Service Pack 2 or later Windows Server 2008 Service Pack 2 or later Windows Server 2008 R2 Windows 7 The SQLSRV extension requires that the Microsoft SQL Server 2012 Native Client be installed on the same computer that is running PHP. If the Microsoft SQL Server 2012 Native Client is not already installed, click the appropriate link at the 'Requirements' documentation page."
  },
  {
    "sub_topic_id": 876,
    "sub_topic": "UTF-8",
    "title": "Remarks",
    "description": "You need to make sure that every time you process a UTF-8 string, you do so safely. This is, unfortunately, the hard part. You'll probably want to make extensive use of PHP's mbstring extension. PHP's built-in string operations are not by default UTF-8 safe. There are some things you can safely do with normal PHP string operations (like concatenation), but for most things you should use the equivalent mbstring function."
  },
  {
    "sub_topic_id": 877,
    "sub_topic": "Variable Scope",
    "title": "Remarks",
    "description": "Variable scope refers to the regions of code where a variable may be accessed. This is also referred to as visibility. In PHP scope blocks are defined by functions, classes, and a global scope available throughout an application. Static class properties that are defined with the public visibility are functionally the same as global variables. They can be accessed from anywhere the class is defined. Superglobal variables are defined by PHP and can always be used from anywhere without the global keyword. The scope outside of any function or class is the global scope. When a PHP script includes another (using include or require) the scope remains the same. If a script is included outside of any function or class, it's global variables are included in the same global scope, but if a script is included from within a function, the variables in the included script are in the scope of the function."
  },
  {
    "sub_topic_id": 878,
    "sub_topic": "Variables",
    "title": "Remarks",
    "description": "Some of the documentation regarding variables and types mentions that PHP does not use static typing. This is correct, but PHP does some type checking when it comes to function/method parameters and return values (especially with PHP 7). Note: PHP's gettype() for integers and booleans is integer and boolean respectively. But for type-hinting for such variables you need to use int and bool. Otherwise PHP won't give you a syntax error, but it will expect integer and boolean classes to be passed."
  },
  {
    "sub_topic_id": 879,
    "sub_topic": "WebSockets",
    "title": "Remarks",
    "description": "Usage of socket extension implements a low-level interface to the socket communication functions based on the popular BSD sockets, providing the possibility to act as a socket server as well as a client. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 880,
    "sub_topic": "Working with Dates and Time",
    "title": "Remarks",
    "description": "The Basics: The simplist way to convert one date format into another is to use strtotime() with date(). strtotime() will convert the date into a Unix Timestamp. That Unix Timestamp can then be passed to date() to convert it to the new format. $timestamp = strtotime('2008-07-01T22:35:17.02'); $new_date_format = date('Y-m-d H:i:s', $timestamp); Or as a one-liner: $new_date_format = date('Y-m-d H:i:s', strtotime('2008-07-01T22:35:17.02')); Keep in mind that strtotime() requires the date to be in a valid format. Failure to provide a valid format will result in strtotime() returning false which will cause your date to be 1969-12-31."
  },
  {
    "sub_topic_id": 881,
    "sub_topic": "XML",
    "title": "Remarks",
    "description": "To create a XML using DOMDocument,basically, we need to create all the tags and attributes using the createElement() and createAttribute() methods and them create the XML structure with the appendChild(). SimpleXML is a powerful library which converts XML strings to an easy to use PHP object. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download PHP (PDF) Language (PDF): https://riptutorial.com/ebook/php."
  },
  {
    "sub_topic_id": 882,
    "sub_topic": "YAML in PHP",
    "title": "Remarks",
    "description": "YAML does not come with a standard PHP installation, instead it needs to be installed as a PECL extension. On linux/unix it can be installed with a simple pecl install yaml Note that libyaml-dev package must be installed on the system, as the PECL package is simply a wrapper around libYAML calls. Installation on Windows machines is different - you can either download a pre-compiled DLL or build from sources."
  },
  {
    "sub_topic_id": 883,
    "sub_topic": "Getting started with Python Language",
    "title": "Remarks",
    "description": "Python is a widely used programming language. It is: High-level: Python automates low-level operations such as memory management. It leaves the programmer with a bit less control but has many benefits including code readability and minimal code expressions. General-purpose: Python is built to be used in all contexts and environments. An example for a non-general-purpose language is PHP: it is designed specifically as a server-side web-development scripting language. In contrast, Python can be used for server-side web-development, but also for building desktop applications. Dynamically typed: Every variable in Python can reference any type of data. A single expression may evaluate to data of different types at different times."
  },
  {
    "sub_topic_id": 884,
    "sub_topic": "*args and **kwargs",
    "title": "Remarks",
    "description": "Python 3 allows you to define function arguments which can only be assigned by keyword, even without default values. This is done by using star * to consume additional positional parameters without setting the keyword parameters. All arguments after the * are keyword-only (i.e. non-positional) arguments. Note that if keyword-only arguments aren't given a default, they are still required when calling the function. You can use a dictionary to assign values to the function's parameters; using parameters name as keys in the dictionary and the value of these arguments bound to each key."
  },
  {
    "sub_topic_id": 885,
    "sub_topic": "2to3 tool",
    "title": "Remarks",
    "description": "The 2to3 tool is an python program which is used to convert the code written in Python 2.x to Python 3.x code. The tool reads Python 2.x source code and applies a series of fixers to transform it into valid Python 3.x code. The 2to3 tool is available in the standard library as lib2to3 which contains a rich set of fixers that will handle almost all code. Since lib2to3 is a generic library, it is possible to write your own fixers for 2to3."
  },
  {
    "sub_topic_id": 886,
    "sub_topic": "Abstract Base Classes (abc)",
    "title": "Remarks",
    "description": "Abstract classes are classes that are meant to be inherited but avoid implementing specific methods, leaving behind only method signatures that subclasses must implement. Abstract classes are useful for defining and enforcing class abstractions at a high level, similar to the concept of interfaces in typed languages, without the need for method implementation. One conceptual approach to defining an abstract class is to stub out the class methods, and then raise a NotImplementedError if accessed. This prevents children classes from accessing parent methods without overriding them first."
  },
  {
    "sub_topic_id": 887,
    "sub_topic": "Abstract syntax tree",
    "title": "Remarks",
    "description": "This analyzes a python script and, for each defined function, reports the line number where the function began, where the signature ends, where the docstring ends, and where the function definition ends. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 888,
    "sub_topic": "Accessing Python source code and bytecode",
    "title": "Remarks",
    "description": "The Python interpreter compiles code to bytecode before executing it on the Python's virtual machine (see also What is python bytecode? To print the source code of a Python object use inspect. Note that this won't work for built-in objects nor for objects defined interactively. For these you will need other methods explained later. CPython allows access to the code object for a function object. The __code__object contains the raw bytecode (co_code) of the function as well as other information such as constants and variable names."
  },
  {
    "sub_topic_id": 889,
    "sub_topic": "Alternatives to switch statement from other languages",
    "title": "Remarks",
    "description": "There is NO switch statement in python as a language design choice. There has been a PEP (PEP-3103) covering the topic that has been rejected. You can find many list of recipes on how to do your own switch statements in python, and here I'm trying to suggest the most sensible options. Here are a few places to check: http://stackoverflow.com/questions/60208/replacements-for-switch-statement-in-python http://code.activestate.com/recipes/269708-some-python-style-switches/ http://code.activestate.com/recipes/410692-readable-switch-construction-without-lambdas-or-di/"
  },
  {
    "sub_topic_id": 890,
    "sub_topic": "ArcPy",
    "title": "Remarks",
    "description": "This example uses a Search Cursor from the Data Access (da) module of ArcPy. Do not confuse arcpy.da.SearchCursor syntax with the earlier and slower arcpy.SearchCursor(). The Data Access module (arcpy.da) has only been available since ArcGIS 10.1 for Desktop. To print a test field (TestField) from a test feature class (TestFC) in a test file geodatabase (Test.gdb) located in a temporary folder (C:\\Temp). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 891,
    "sub_topic": "Arrays",
    "title": "Remarks",
    "description": "An array is a data structure that stores values of same data type. In Python, this is the main difference between arrays and lists. While python lists can contain values corresponding to different data types, arrays in python can only contain values corresponding to same data type. In this tutorial, we will understand the Python arrays with few examples. If you are new to Python, get started with the Python Introduction article. To use arrays in python language, you need to import the standard array module. This is because array is not a fundamental data type like strings, integer etc. Here is how you can import array module in python. "
  },
  {
    "sub_topic_id": 892,
    "sub_topic": "Asyncio Module",
    "title": "Remarks",
    "description": "Here we make a simple echo websocket using asyncio. We define coroutines for connecting to a server and sending/receiving messages. The communcations of the websocket are run in a main coroutine, which is run by an event loop. This example is modified from a prior post. asyncio supports the use of Executor objects found in concurrent.futures for scheduling tasks asynchronously. Event loops have the function run_in_executor() which takes an Executor object, a Callable, and the Callable's parameters. Before Python 3.5+ was released, the asyncio module used generators to mimic asynchronous calls and thus had a different syntax than the current Python 3.5 release. Python 3.x3.5 Python 3.5 introduced the async and await keywords. Note the lack of parentheses around the await func() call."
  },
  {
    "sub_topic_id": 893,
    "sub_topic": "Attribute Access",
    "title": "Remarks",
    "description": "For the sake of data encapsulation, sometimes you want to have an attribute which value comes from other attributes or, in general, which value shall be computed at the moment. The standard way to deal with this situation is to create a method, called getter or a setter. In the example above, it's easy to see what happens if we create a new Book that contains a title and a author. If all books we're to add to our Library have authors and titles, then we can skip the getters and setters and use the dot notation. However, suppose we have some books that do not have an author and we want to set the author to 'Unknown'. Or if they have multiple authors and we plan to return a list of authors."
  },
  {
    "sub_topic_id": 894,
    "sub_topic": "Audio",
    "title": "Remarks",
    "description": "Windows provides an explicit interface through which the winsound module allows you to play raw beeps at a given frequency and duration. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 895,
    "sub_topic": "Basic Curses with Python",
    "title": "Remarks",
    "description": "Curses is a basic terminal ( or character display ) handling module from Python. This can be used to create Terminal based User interfaces or TUIs. This is a python port of a more popular C library 'ncurses'. While the basic invocation above is easy enough, the curses package provides the wrapper(func, ...) helper function. Here, wrapper will initialize curses, create stdscr, a WindowObject and pass both stdscr, and any further arguments to func. When func returns, wrapper will restore the terminal before the program exits."
  },
  {
    "sub_topic_id": 896,
    "sub_topic": "Basic Input and Output",
    "title": "Remarks",
    "description": "Input can also be read from files. Files can be opened using the built-in function open. Using a with <command> as <name> syntax (called a 'Context Manager') makes using open and getting a handle for the file super easy: with open('somefile.txt', 'r') as fileobj: # write code here using fileobj This ensures that when code execution leaves the block the file is automatically closed. Files can be opened in different modes. In the above example the file is opened as read-only. To open an existing file for reading only use r. If you want to read that file as bytes use rb. To append data to an existing file use a. Use w to create a file or overwrite any existing files of the same name. You can use r+ to open a file for both reading and writing. The first argument of open() is the filename, the second is the mode. If mode is left blank, it will default to r."
  },
  {
    "sub_topic_id": 897,
    "sub_topic": "Binary Data",
    "title": "Remarks",
    "description": "The module 'struct' provides facility to pack python objects as contiguous chunk of bytes or dissemble a chunk of bytes to python structures. The pack function takes a format string and one or more arguments, and returns a binary string. This looks very much like you are formatting a string except that the output is not a string but a chunk of bytes. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 898,
    "sub_topic": "Bitwise Operators",
    "title": "Remarks",
    "description": "Bitwise operations alter binary strings at the bit level. These operations are incredibly basic and are directly supported by the processor. These few operations are necessary in working with device drivers, low-level graphics, cryptography, and network communications. This section provides useful knowledge and examples of Python's bitwise operators. The << operator will perform a bitwise 'left shift,' where the left operand's value is moved left by the number of bits given by the right operand. The ^ operator will perform a binary XOR in which a binary 1 is copied if and only if it is the value of exactly one operand. Another way of stating this is that the result is 1 only if the operands are different."
  },
  {
    "sub_topic_id": 899,
    "sub_topic": "Boolean Operators",
    "title": "Remarks",
    "description": "In Python you can compare a single element using two binary operators--one on either side: if 3.14 < x < 3.142: print('x is near pi') In many (most?) programming languages, this would be evaluated in a way contrary to regular math: (3.14 < x) < 3.142, but in Python it is treated like 3.14 < x and x < 3.142, just like most non-programmers would expect. Evaluates to the second argument if and only if both of the arguments are truthy. Otherwise evaluates to the first falsey argument. The 1's in the above example can be changed to any truthy value, and the 0's can be changed to any falsey value."
  },
  {
    "sub_topic_id": 900,
    "sub_topic": "Call Python from C#",
    "title": "Remarks",
    "description": "The documentation provides a sample implementation of the inter-process communication between C# and Python scripts. Note that in the example above data is serialized using MongoDB.Bson library that can be installed via NuGet manager. Otherwise, you can use any JSON serialization library of your choice. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 901,
    "sub_topic": "Checking Path Existence and Permissions",
    "title": "Remarks",
    "description": "os.access is much better solution to check whether directory exists and it's accesable for reading and writing. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 902,
    "sub_topic": "ChemPy - python package",
    "title": "Remarks",
    "description": "ChemPy is a python package designed mainly to solve and address problems in physical, analytical and inorganic Chemistry. It is a free, open-source Python toolkit for chemistry, chemical engineering, and materials science applications. In composition, the atomic numbers (and 0 for charge) is used as keys and the count of each kind became respective value. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 903,
    "sub_topic": "Classes",
    "title": "Remarks",
    "description": "Python offers itself not only as a popular scripting language, but also supports the object-oriented programming paradigm. Classes describe data and provide methods to manipulate that data, all encompassed under a single object. Furthermore, classes allow for abstraction by separating concrete implementation details from abstract representations of data. Code utilizing classes is generally easier to read, understand, and maintain. There are a few things to note when looking at the above example. The class is made up of attributes (data) and methods (functions). Attributes and methods are simply defined as normal variables and functions. As noted in the corresponding docstring, the __init__() method is called the initializer. It's equivalent to the constructor in other object oriented languages, and is the method that is first run when you create a new object, or new instance of the class. Attributes that apply to the whole class are defined first, and are called class attributes. Attributes that apply to a specific instance of a class (an object) are called instance attributes. They are generally defined inside __init__(); this is not necessary, but it is recommended (since attributes defined outside of __init__() run the risk of being accessed before they are defined). Every method, included in the class definition passes the object in question as its first parameter. The word self is used for this parameter (usage of self is actually by convention, as the word self has no inherent meaning in Python, but this is one of Python's most respected conventions, and you should always follow it). Those used to object-oriented programming in other languages may be surprised by a few things. One is that Python has no real concept of private elements, so everything, by default, imitates the behavior of the C++/Java public keyword. For more information, see the 'Private Class Members' example on this page. Some of the class's methods have the following form: __functionname__(self, other_stuff). All such methods are called 'magic methods' and are an important part of classes in Python. For instance, operator overloading in Python is implemented with magic methods. For more information, see the relevant documentation."
  },
  {
    "sub_topic_id": 904,
    "sub_topic": "CLI subcommands with precise help output",
    "title": "Remarks",
    "description": "Different ways to create subcommands like in hg or svn with the exact command line interface and help output as shown in Remarks section. Parsing Command Line arguments covers broader topic of arguments parsing. Extended version of http://www.riptutorial.com/python/example/25282/argparse--default-help-formatter- that fixed help output. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 905,
    "sub_topic": "Code blocks, execution frames, and namespaces",
    "title": "Remarks",
    "description": "A code block is a piece of Python program text that can be executed as a unit, such as a module, a class definition or a function body. Some code blocks (like modules) are normally executed only once, others (like function bodies) may be executed many times. Code blocks may textually contain other code blocks. Code blocks may invoke other code blocks (that may or may not be textually contained in them) as part of their execution, e.g., by invoking (calling) a function."
  },
  {
    "sub_topic_id": 906,
    "sub_topic": "Collections module",
    "title": "Remarks",
    "description": "The built-in collections package provides several specialized, flexible collection types that are both high-performance and provide alternatives to the general collection types of dict, list, tuple and set. The module also defines abstract base classes describing different types of collection functionality (such as MutableSet and ItemsView). There are three other types available in the collections module, namely: UserDict UserList UserString They each act as a wrapper around the tied object, e.g., UserDict acts as a wrapper around a dict object. In each case, the class simulates its named type. The instance's contents are kept in a regular type object, which is accessible via the data attribute of the wrapper instance. In each of these three cases, the need for these types has been partially supplanted by the ability to subclass directly from the basic type; however, the wrapper class can be easier to work with because the underlying type is accessible as an attribute."
  },
  {
    "sub_topic_id": 907,
    "sub_topic": "Comments and Documentation",
    "title": "Remarks",
    "description": "Developers should follow the PEP257 - Docstring Conventions guidelines. In some cases, style guides (such as Google Style Guide ones) or documentation rendering third-parties (such as Sphinx) may detail additional conventions for docstrings. Comments are used to explain code when the basic code itself isn't clear. Python ignores comments, and so will not execute code in there, or raise syntax errors for plain english sentences. Single-line comments begin with the hash character (#) and are terminated by the end of line. A docstring is a multi-line comment used to document modules, classes, functions and methods. It has to be the first statement of the component it describes."
  },
  {
    "sub_topic_id": 908,
    "sub_topic": "Common Pitfalls",
    "title": "Remarks",
    "description": "Python is a language meant to be clear and readable without any ambiguities and unexpected behaviors. Unfortunately, these goals are not achievable in all cases, and that is why Python does have a few corner cases where it might do something different than what you were expecting. This section will show you some issues that you might encounter when writing Python code. You might have heard that everything in Python is an object, even literals. This means, for example, 7 is an object as well, which means it has attributes. For example, one of these attributes is the bit_length. It returns the amount of bits needed to represent the value it is called upon."
  },
  {
    "sub_topic_id": 909,
    "sub_topic": "Commonwealth Exceptions",
    "title": "Remarks",
    "description": "Here in Stack Overflow we often see duplicates talking about the same errors: 'ImportError: No module named '??????', SyntaxError: invalid syntax or NameError: name '???' is not defined. This is an effort to reduce them and to have some documentation to link to. In most other languages indentation is not compulsory, but in Python (and other languages: early versions of FORTRAN, Makefiles, Whitespace (esoteric language), etc.) that is not the case, what can be confusing if you come from another language, if you were copying code from an example to your own, or simply if you are new. Is raised when you tried to use a variable, method or function that is not initialized (at least not before). In other words, it is raised when a requested local or global name is not found. It's possible that you misspelt the name of the object or forgot to import something. Also maybe it's in another scope. We'll cover those with separate examples."
  },
  {
    "sub_topic_id": 910,
    "sub_topic": "Comparisons",
    "title": "Remarks",
    "description": "Syntax: != - Is not equal to == - Is equal to > - greater than < - less than  >= - greater than or equal to <= - less than or equal to is - test if objects are the exact same object is not = test if objects are not the exact same object. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 911,
    "sub_topic": "Complex math",
    "title": "Remarks",
    "description": "The module cmath includes additional functions to use complex numbers. import cmath This module can calculate the phase of a complex number, in radians: z = 2+3j # A complex number cmath.phase(z) # 0.982793723247329 It allows the conversion between the cartesian (rectangular) and polar representations of complex numbers: cmath.polar(z) # (3.605551275463989, 0.982793723247329) cmath.rect(2, cmath.pi/2) # (0+2j) The module contains the complex version of Exponential and logarithmic functions (as usual, log is the natural logarithm and log10 the decimal logarithm):   cmath.exp(z) # (-7.315110094901103+1.0427436562359045j) cmath.log(z) # (1.2824746787307684+0.982793723247329j) cmath.log10(-100) # (2+1.3643763538418412j)"
  },
  {
    "sub_topic_id": 912,
    "sub_topic": "Conditionals",
    "title": "Remarks",
    "description": "Conditional expressions, involving keywords such as if, elif, and else, provide Python programs with the ability to perform different actions depending on a boolean condition: True or False. This section covers the use of Python conditionals, boolean logic, and ternary statements. Syntax: <expression> if <conditional> else <expression> # Ternary Operator. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 913,
    "sub_topic": "configparser",
    "title": "Remarks",
    "description": "This module provides the ConfigParser class which implements a basic configuration language in INI files. You can use this to write Python programs which can be customized by end users easily. All return values from ConfigParser.ConfigParser().get are strings. It can be converted to more common types thanks to eval. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 914,
    "sub_topic": "Connecting Python to SQL Server",
    "title": "Remarks",
    "description": "You can do anything if your work is related with SQL expressions, just pass this expressions to the execute method(CRUD operations). For with statement, calling stored procedure, error handling or more example check: pymssql.org. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 915,
    "sub_topic": "Context Managers (“with” Statement)",
    "title": "Remarks",
    "description": "While Python's context managers are widely used, few understand the purpose behind their use. These statements, commonly used with reading and writing files, assist the application in conserving system memory and improve resource management by ensuring specific resources are only in use for certain processes. This topic explains and demonstrates the use of Python's context managers. Context managers are defined in PEP 343. They are intended to be used as more succinct mechanism for resource management than try ... finally constructs. The formal definition is as follows. In this PEP, context managers provide __enter__() and __exit__() methods that are invoked on entry to and exit from the body of the with statement."
  },
  {
    "sub_topic_id": 916,
    "sub_topic": "Copying data",
    "title": "Remarks",
    "description": "Examples: Copy a dictionary Copy a set Performing a deep copy Performing a shallow copy Performing a shallow copy of a list. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 917,
    "sub_topic": "Counting",
    "title": "Remarks",
    "description": "The logic is that the boolean statement produces a array where all occurences of the requested values are 1 and all others are zero. So summing these gives the number of occurencies. This works for arrays of any shape or dtype. There are two methods I use to count occurences of all unique values in numpy. Unique and bincount. Unique automatically flattens multidimensional arrays, while bincount only works with 1d arrays only containing positive integers. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 918,
    "sub_topic": "Create virtual environment with virtualenvwrapper in windows",
    "title": "Remarks",
    "description": "DESC"
  },
  {
    "sub_topic_id": 919,
    "sub_topic": "Creating a Windows service using Python",
    "title": "Remarks",
    "description": "uppose you need to work on three different projects project A, project B and project C. project A and project B need python 3 and some required libraries. But for project C you need python 2.7 and dependent libraries. So best practice for this is to separate those project environments. For creating separate python virtual environment need to follow below steps: Step 1: Install pip with this command: python -m pip install -U pip Step 2: Then install 'virtualenvwrapper-win' package by using command (command can be executed windows power shell): pip install virtualenvwrapper-win Step 3: Create a new virtualenv environment by using command: mkvirtualenv python_3.5 Step 4: Activate the environment by using command: workon < environment name>"
  },
  {
    "sub_topic_id": 920,
    "sub_topic": "Creating Python packages",
    "title": "Remarks",
    "description": "The pypa sample project contains a complete, easily modifiable template setup.py that demonstrates a large range of capabilities setup-tools has to offer. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 921,
    "sub_topic": "ctypes",
    "title": "Remarks",
    "description": "ctypes is a python built-in library that invokes exported functions from native compiled libraries. Note: Since this library handles compiled code, it is relatively OS dependent. Let's combine all of the examples above into one complex scenario: using libc's lfind function. For more details about the function, read the man page. I urge you to read it before going on. In some cases, a C function accepts a function pointer. As avid ctypes users, we would like to use those functions, and even pass python function as arguments."
  },
  {
    "sub_topic_id": 922,
    "sub_topic": "Data Serialization",
    "title": "Remarks",
    "description": "Why using JSON? Cross language support Human readable Unlike pickle, it doesn't have the danger of running arbitrary code Why not using JSON? Doesn't support Pythonic data types Keys in dictionaries must not be other than string data types. Why Pickle?  Great way for serializing Pythonic (tuples, functions, classes) Keys in dictionaries can be of any data type. Why not Pickle?  Cross language support is missing It is not safe for loading arbitrary data"
  },
  {
    "sub_topic_id": 923,
    "sub_topic": "Data Visualization with Python",
    "title": "Remarks",
    "description": "Matplotlib is a mathematical plotting library for Python that provides a variety of different plotting functionality. The matplotlib documentation can be found here, with the SO Docs being available here. Matplotlib provides two distinct methods for plotting, though they are interchangable for the most part: Firstly, matplotlib provides the pyplot interface, direct and simple-to-use interface that allows plotting of complex graphs in a MATLAB-like style. Secondly, matplotlib allows the user to control the different aspects (axes, lines, ticks, etc) directly using an object-based system. This is more difficult but allows complete control over the entire plot."
  },
  {
    "sub_topic_id": 924,
    "sub_topic": "Database Access",
    "title": "Remarks",
    "description": "Python can handle many different types of databases. For each of these types a different API exists. So encourage similarity between those different API's, PEP 249 has been introduced. This API has been defined to encourage similarity between the Python modules that are used to access databases. By doing this, we hope to achieve a consistency leading to more easily understood modules, code that is generally more portable across databases, and a broader reach of database connectivity from Python. PEP-249"
  },
  {
    "sub_topic_id": 925,
    "sub_topic": "Date and Time",
    "title": "Remarks",
    "description": "Python provides both builtin methods and external libraries for creating, modifying, parsing, and manipulating dates and times. By default all datetime objects are naive. To make them timezone-aware, you must attach a tzinfo object, which provides the UTC offset and timezone abbreviation as a function of date and time. Fixed Offset Time Zones For time zones that are a fixed offset from UTC, in Python 3.2+, the datetime module provides the timezone class, a concrete implementation of tzinfo, which takes a timedelta and an (optional) name parameter."
  },
  {
    "sub_topic_id": 926,
    "sub_topic": "Date Formatting",
    "title": "Remarks",
    "description": "Examples Outputting datetime object to string Parsing string to datetime object Time between two date-timesThis modified text is an extract of the original Stack Overflow Documentation created by following contributors and : released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 927,
    "sub_topic": "Debugging",
    "title": "Remarks",
    "description": "Some times you need to debug python code which is executed by another process and and in this cases rpdb comes in handy. rpdb is a wrapper around pdb that re-routes stdin and stdout to a socket handler. By default it opens the debugger on port 4444. The Python Standard Library includes an interactive debugging library called pdb. pdb has extensive capabilities, the most commonly used being the ability to 'step-through' a program. Usually you will want to target a specific section of the code for debugging. To do this we import the pdb library and use set_trace() to interrupt the flow of this troubled example code."
  },
  {
    "sub_topic_id": 928,
    "sub_topic": "Decorators",
    "title": "Remarks",
    "description": "Decorator functions are software design patterns. They dynamically alter the functionality of a function, method, or class without having to directly use subclasses or change the source code of the decorated function. When used correctly, decorators can become powerful tools in the development process. This topic covers implementation and applications of decorator functions in Python. def decorator_function(f): pass # defines a decorator named  ecorator_function @decorator_function def decorated_function(): pass # the function is now wrapped (decorated by) decorator_function decorated_function = decorator_function(decorated_function) # this is equivalent to using the syntactic sugar @decorator_function."
  },
  {
    "sub_topic_id": 929,
    "sub_topic": "Defining functions with list arguments",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 930,
    "sub_topic": "Deployment",
    "title": "Remarks",
    "description": "Anaconda installed on your system Account on Binstar If you are not using Anaconda 1.6+ install the binstar command line client: $ conda install binstar $ conda update binstar If you are not using Anaconda the Binstar is also available on pypi: $ pip install binstar Now we can login: $ binstar login Test your login with the whoami command: $ binstar whoami We are going to be uploading a package with a simple ‘hello world’ function. To follow along start by getting my demonstration package repo from Github: $ git clone https://github.com/<NAME>/<Package>"
  },
  {
    "sub_topic_id": 931,
    "sub_topic": "Deque Module",
    "title": "Remarks",
    "description": "This class is useful when you need an object similar to a list that allows fast append and pop operations from either side (the name deque stands for “double-ended queue”). The methods provided are indeed very similar, except that some like pop, append, or extend can be suffixed with left. The deque data structure should be preferred to a list if one needs to frequently insert and delete elements at both ends because it allows to do so in constant time O(1)."
  },
  {
    "sub_topic_id": 932,
    "sub_topic": "Descriptor",
    "title": "Remarks",
    "description": "There are two different types of descriptors. Data descriptors are defined as objects that define both a __get__() and a __set__() method, whereas non-data descriptors only define a __get__() method. This distinction is important when considering overrides and the namespace of an instance's dictionary. If a data descriptor and an entry in an instance's dictionary share the same name, the data descriptor will take precedence. However, if instead a non-data descriptor and an entry in an instance's dictionary share the same name, the instance dictionary's entry will take precedence. To make a read-only data descriptor, define both get() and set() with the set() raising an AttributeError when called. Defining the set() method with an exception raising placeholder is enough to make it a data descriptor."
  },
  {
    "sub_topic_id": 933,
    "sub_topic": "Design Patterns",
    "title": "Remarks",
    "description": "A design pattern is a general solution to a commonly occurring problem in software development. This documentation topic is specifically aimed at providing examples of common design patterns in Python. Design Patterns provide solutions to the commonly occurring problems in software design. The design patterns were first introduced by GoF(Gang of Four) where they described the common patterns as problems which occur over and over again and solutions to those problems."
  },
  {
    "sub_topic_id": 934,
    "sub_topic": "Dictionary",
    "title": "Remarks",
    "description": "Helpful items to remember when creating a dictionary: Every key must be unique (otherwise it will be overridden) Every key must be hashable (can use the hash function to hash it; otherwise TypeError will be thrown) There is no particular order for the keys. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 935,
    "sub_topic": "Difference between Module and Package",
    "title": "Remarks",
    "description": "It is possible to put a Python package in a ZIP file, and use it that way if you add these lines to the beginning of your script: import sys sys.path.append('package.zip'). A package is made up of multiple Python files (or modules), and can even include libraries written in C or C++. Instead of being a single file, it is an entire folder structure which might look like this: Folder package __init__.py dog.py hi.py __init__.py. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 936,
    "sub_topic": "Distribution",
    "title": "Remarks",
    "description": "To use the py2app framework you must install it first. Do this by opening terminal and entering the following command: sudo easy_install -U py2app You can also pip install the packages as : pip install py2app  Then create the setup file for your python script: py2applet --make-setup MyApplication.py. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 937,
    "sub_topic": "Django",
    "title": "Remarks",
    "description": "Django is a high-level Python Web framework that encourages rapid development and clean, pragmatic design. Built by experienced developers, it takes care of much of the hassle of Web development, so you can focus on writing your app without needing to reinvent the wheel. It’s free and open source. Make a simple Hello World Example using your django. let's make sure that you have django installed on your PC first. open a terminal and type: python -c 'import django' -->if no error comes that means django is already installed."
  },
  {
    "sub_topic_id": 938,
    "sub_topic": "Dynamic code execution with `exec` and `eval`",
    "title": "Remarks",
    "description": "In exec, if globals is locals (i.e. they refer to the same object), the code is executed as if it is on the module level. If globals and locals are distinct objects, the code is executed as if it were in a class body. If the globals object is passed in, but doesn't specify __builtins__ key, then Python built-in functions and names are automatically added to the global scope. To suppress the availability of functions such as print or isinstance in the executed scope, let globals have the key __builtins__ mapped to value None. However, this is not a security feature. The Python 2 -specific syntax shouldn't be used; the Python 3 syntax will work in Python 2. Thus the following forms are deprecated: <s> exec object exec object in globals exec object in globals, locals"
  },
  {
    "sub_topic_id": 939,
    "sub_topic": "Enum",
    "title": "Remarks",
    "description": "Enums have been backported from Python 3.4 to Python 2.4 through Python 3.3. You can get this the enum34 backport from PyPI. Creation of an enum is identical to how it works in Python 3.4+ This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 940,
    "sub_topic": "Exceptions",
    "title": "Remarks",
    "description": "Errors detected during execution are called exceptions and are not unconditionally fatal. Most exceptions are not handled by programs; it is possible to write programs that handle selected exceptions. There are specific features in Python to deal with exceptions and exception logic. Furthermore, exceptions have a rich type hierarchy, all inheriting from the BaseException type."
  },
  {
    "sub_topic_id": 941,
    "sub_topic": "Exponentiation",
    "title": "Remarks",
    "description": "Syntax: value1 ** value2 pow(value1, value2[,  value3]) value1.__pow__(value2[, value3]) value2.__rpow__(value1) operator.pow(value1, value2) operator.__pow__(value1, value2) math.pow(value1, value2) math.sqrt(value1) math.exp(value1) cmath.exp(value1) math.expm1(value1). Even though Python natively supports big integers, taking the nth root of very large numbers can fail in Python. OverflowError: long int too large to convert to float When dealing with such large integers, you will need to use a custom function to compute the nth root of a number."
  },
  {
    "sub_topic_id": 942,
    "sub_topic": "Files & Folders I/O",
    "title": "Remarks",
    "description": "When it comes to storing, reading, or communicating data, working with the files of an operating system is both necessary and easy with Python. Unlike other languages where file input and output requires complex reading and writing objects, Python simplifies the process only needing commands to open, read/write and close the file. This topic explains how Python can interface with files on the operating system. When using Python's built-in open(), it is best-practice to always pass the encoding argument, if you intend your code to be run cross-platform. The Reason for this, is that a system's default encoding differs from platform to platform. While linux systems do indeed use utf-8 as default, this is not necessarily true for MAC and Windows."
  },
  {
    "sub_topic_id": 943,
    "sub_topic": "Filter",
    "title": "Remarks",
    "description": "In most cases a comprehension or generator expression is more readable, more powerful and more efficient than filter() or ifilter(). filter (python 3.x) and ifilter (python 2.x) return a generator so they can be very handy when creating a short-circuit test like or or and. If the function parameter is None, then the identity function will be used. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 944,
    "sub_topic": "Flask",
    "title": "Remarks",
    "description": "Flask is a Python micro web framework used to run major websites including Pintrest, Twilio, and Linkedin. This topic explains and demonstrates the variety of features Flask offers for both front and back end web development. Examples: Files and Templates HTTP Methods Jinja Templating Routing URLs The basics The Request Object. The two most common HTTP methods are GET and POST. Flask can run different code from the same URL dependent on the HTTP method used. For example, in a web service with accounts, it is most convenient to route the sign in page and the sign in process through the same URL. A GET request, the same that is made when you open a URL in your browser should show the login form, while a POST request (carrying login data) should be processed separately. A route is also created to handle the DELETE and PUT HTTP method."
  },
  {
    "sub_topic_id": 945,
    "sub_topic": "Functional Programming in Python",
    "title": "Remarks",
    "description": "Functional programming decomposes a problem into a set of functions. Ideally, functions only take inputs and produce outputs, and don’t have any internal state that affects the output produced for a given input.below are functional techniques common to many languages: such as lambda, map, reduce. An anonymous, inlined function defined with lambda. The parameters of the lambda are defined to the left of the colon. The function body is defined to the right of the colon. The result of running the function body is (implicitly) returned."
  },
  {
    "sub_topic_id": 946,
    "sub_topic": "Functions",
    "title": "Remarks",
    "description": "Functions in Python provide organized, reusable and modular code to perform a set of specific actions. Functions simplify the coding process, prevent redundant logic, and make the code easier to follow. This topic describes the declaration and utilization of functions in Python. Python has many built-in functions like print(), input(), len(). Besides built-ins you can also create your own functions to do more specific jobs—these are called user-defined functions. Syntax: def function_name(arg1, ... argN, *args, kw1, kw2=default, ..., **kwargs): statements lambda arg1, ... argN, *args, kw1, kw2=default, ..., **kwargs: expression"
  },
  {
    "sub_topic_id": 947,
    "sub_topic": "Functools Module",
    "title": "Remarks",
    "description": "Examples: cmp_to_key lru_cache partial reduce total_ordering. Python changed it's sorting methods to accept a key function. Those functions take a value and return a key which is used to sort the arrays. Old comparison functions used to take two values and return -1, 0 or +1 if the first argument is small, equal or greater than the second argument respectively. This is incompatible to the new key-function. he @lru_cache decorator can be used wrap an expensive, computationally-intensive function with a Least Recently Used cache. This allows function calls to be memoized, so that future calls with the same parameters can return instantly instead of having to be recomputed. In the example above, the value of fibonacci(3) is only calculated once, whereas if fibonacci didn't have an LRU cache, fibonacci(3) would have been computed upwards of 230 times. Hence, @lru_cache is especially great for recursive functions or dynamic programming, where an expensive function could be called multiple times with the same exact parameters."
  },
  {
    "sub_topic_id": 948,
    "sub_topic": "Garbage Collection",
    "title": "Remarks",
    "description": "At its core, Python's garbage collector (as of 3.5) is a simple reference counting implementation. Every time you make a reference to an object (for example, a = myobject) the reference count on that object (myobject) is incremented. Every time a reference gets removed, the reference count is decremented, and once the reference count reaches 0, we know that nothing holds a reference to that object and we can deallocate it! One common misunderstanding about how Python memory management works is that the del keyword frees objects memory. This is not true. What actually happens is that the del keyword merely decrements the objects refcount, meaning that if you call it enough times for the refcount to reach zero the object may be garbage collected (even if there are actually still references to the object available elsewhere in your code). Python aggresively creates or cleans up objects the first time it needs them If I perform the assignment a = object(), the memory for object is allocated at that time (cpython will sometimes reuse certain types of object, eg. lists under the hood, but mostly it doesn't keep a free object pool and will perform allocation when you need it). Similarly, as soon as the refcount is decremented to 0, GC cleans it up."
  },
  {
    "sub_topic_id": 949,
    "sub_topic": "Generators",
    "title": "Remarks",
    "description": "Generators are lazy iterators created by generator functions (using yield) or generator expressions (using (an_expression for x in an_iterator)). Syntax: yield <expr> yield from <expr> var> =  yield <expr> next(<iter>). Generator expressions are similar to list, dictionary and set comprehensions, but are enclosed with parentheses. The parentheses do not have to be present when they are used as the sole argument for a function call. Generator functions are similar to regular functions, except that they have one or more yield statements in their body. Such functions cannot return any values (however empty returns are allowed if you want to stop the generator early)."
  },
  {
    "sub_topic_id": 950,
    "sub_topic": "getting start with GZip",
    "title": "Remarks",
    "description": "This module provides a simple interface to compress and decompress files just like the GNU programs gzip and gunzip would. The data compression is provided by the zlib module. The gzip module provides the GzipFile class which is modeled after Python’s File Object. The GzipFile class reads and writes gzip-format files, automatically compressing or decompressing the data so that it looks like an ordinary file object."
  },
  {
    "sub_topic_id": 951,
    "sub_topic": "graph-tool",
    "title": "Remarks",
    "description": "The python tools can be used to generate graph. PyDotPlus is an improved version of the old pydot project that provides a Python Interface to Graphviz’s Dot language. Get PyGraphviz from the Python Package Index at http://pypi.python.org/pypi/pygraphviz or install it with: pip install pygraphviz and an attempt will be made to find and install an appropriate version that matches your operating system and Python version. You can install the development version (at github.com) with: pip install git://github.com/pygraphviz/pygraphviz.git#egg=pygraphviz Get PyGraphviz from the Python Package Index at http://pypi.python.org/pypi/pygraphviz or install it with: easy_install pygraphviz and an attempt will be made to find and install an appropriate version that matches your operating system and Python version."
  },
  {
    "sub_topic_id": 952,
    "sub_topic": "groupby()",
    "title": "Remarks",
    "description": "In Python, the itertools.groupby() method allows developers to group values of an iterable class based on a specified property into another iterable set of values. Syntax: itertools.groupby(iterable, key=None or some function). groupby() is tricky but a general rule to keep in mind when using it is this: Always sort the items you want to group with the same key you want to use for grouping It is recommended that the reader take a look at the documentation here and see how it is explained using a class definition."
  },
  {
    "sub_topic_id": 953,
    "sub_topic": "hashlib",
    "title": "Remarks",
    "description": "hashlib implements a common interface to many different secure hash and message digest algorithms. Included are the FIPS secure hash algorithms SHA1, SHA224, SHA256, SHA384, and SHA512. A generic new() constructor that takes the string name of the desired algorithm as its first parameter also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer. The named constructors are much faster than new() and should be preferred. This module implements a common interface to many different secure hash and message digest algorithms. Included are the FIPS secure hash algorithms SHA1, SHA224, SHA256, SHA384, and SHA512 (defined in FIPS 180-2) as well as RSA’s MD5 algorithm (defined in Internet RFC 1321). There is one constructor method named for each type of hash. All return a hash object with the same simple interface. For example: use sha1() to create a SHA1 hash object."
  },
  {
    "sub_topic_id": 954,
    "sub_topic": "Heapq",
    "title": "Remarks",
    "description": "To find the largest items in a collection, heapq module has a function called nlargest, we pass it two arguments, the first one is the number of items that we want to retrieve, the second one is the collection name: import heapq numbers = [1, 4, 2, 100, 20, 50, 32, 200, 150, 8] print(heapq.nlargest(4, numbers))  # [200, 150, 100, 50] Similarly, to find the smallest items in a collection, we use nsmallest function: print(heapq.nsmallest(4, numbers))  # [1, 2, 4, 8] Both nlargest and nsmallest functions take an optional argument (key parameter) for complicated data structures. The following example shows the use of age property to retrieve the oldest and the youngest people from people dictionary."
  },
  {
    "sub_topic_id": 955,
    "sub_topic": "Hidden Features",
    "title": "Remarks",
    "description": "Everything in Python is an object. Each object has some special internal methods which it uses to interact with other objects. Generally, these methods follow the __action__ naming convention. Collectively, this is termed as the Python Data Model. You can overload any of these methods. This is commonly used in operator overloading in Python. Below is an example of operator overloading using Python's data model. The Vector class creates a simple vector of two variables. We'll add appropriate support for mathematical operations of two vectors using operator overloading."
  },
  {
    "sub_topic_id": 956,
    "sub_topic": "HTML Parsing",
    "title": "Remarks",
    "description": "BeautifulSoup has a limited support for CSS selectors, but covers most commonly used ones. Use select() method to find multiple elements and select_one() to find a single element. pyquery is a jquery-like library for python. It has very well support for css selectors. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 957,
    "sub_topic": "Idioms",
    "title": "Remarks",
    "description": "Prefer dict.get method if you are not sure if the key is present. It allows you to return a default value if key is not found. The traditional method dict[key] would raise a KeyError exception. The benefit, however, comes if you decide to import your file in another program (for example if you are writing it as part of a library). You can then import your file, and the __main__ trap will ensure that no code is executed unexpectedly. Python will implicitly convert any object to a Boolean value for testing, so use it wherever possible."
  },
  {
    "sub_topic_id": 958,
    "sub_topic": "ijson",
    "title": "Remarks",
    "description": "ijson is a great library for working with JSON files in Python. Unfortunately, by default it uses a pure Python JSON parser as its backend. Much higher performance can be achieved by using a C backend. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 959,
    "sub_topic": "Immutable datatypes(int, float, str, tuple and frozensets)",
    "title": "Remarks",
    "description": "DESC"
  },
  {
    "sub_topic_id": 960,
    "sub_topic": "Importing modules",
    "title": "Remarks",
    "description": "Examples: Frozenset's are immutable and not assignable Individual characters of strings are not assignable Tuple's individual members aren't assignable. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python. "
  },
  {
    "sub_topic_id": 961,
    "sub_topic": "Incompatibilities moving from Python 2 to Python 3",
    "title": "Remarks",
    "description": "Unlike most languages, Python supports two major versions. Since 2008 when Python 3 was released, many have made the transition, while many have not. In order to understand both, this section covers the important differences between Python 2 and Python 3. There are currently two supported versions of Python: 2.7 (Python 2) and 3.6 (Python 3). Additionally versions 3.3 and 3.4 receive security updates in source format. Python 2.7 is backwards-compatible with most earlier versions of Python, and can run Python code from most 1.x and 2.x versions of Python unchanged. It is broadly available, with an extensive collection of packages. It is also considered deprecated by the CPython developers, and receives only security and bug-fix development. The CPython developers intend to abandon this version of the language in 2020. According to Python Enhancement Proposal 373 there are no planned future releases of Python 2 after 25 June 2016, but bug fixes and security updates will be supported until 2020. (It doesn't specify what exact date in 2020 will be the sunset date of Python 2.) Python 3 intentionally broke backwards-compatibility, to address concerns the language developers had with the core of the language. Python 3 receives new development and new features. It is the version of the language that the language developers intend to move forward with. Over the time between the initial release of Python 3.0 and the current version, some features of Python 3 were back-ported into Python 2.6, and other parts of Python 3 were extended to have syntax compatible with Python 2. Therefore it is possible to write Python that will work on both Python 2 and Python 3, by using future imports and special modules (like six)."
  },
  {
    "sub_topic_id": 962,
    "sub_topic": "Indentation",
    "title": "Remarks",
    "description": "Whitespace is handled by the lexical analyzer before being parsed. The lexical analyzer uses a stack to store indentation levels. At the beginning, the stack contains just the value 0, which is the leftmost position. Whenever a nested block begins, the new indentation level is pushed on the stack, and an 'INDENT' token is inserted into the token stream which is passed to the parser. There can never be more than one 'INDENT' token in a row (IndentationError). When a line is encountered with a smaller indentation level, values are popped from the stack until a value is on top which is equal to the new indentation level (if none is found, a syntax error occurs). For each value popped, a 'DEDENT' token is generated. Obviously, there can be multiple 'DEDENT' tokens in a row. The lexical analyzer skips empty lines (those containing only whitespace and possibly comments), and will never generate either 'INDENT' or 'DEDENT' tokens for them. At the end of the source code, 'DEDENT' tokens are generated for each indentation level left on the stack, until just the 0 is left."
  },
  {
    "sub_topic_id": 963,
    "sub_topic": "Indexing and Slicing",
    "title": "Remarks",
    "description": "You can unify the concept of slicing strings with that of slicing other sequences by viewing strings as an immutable collection of characters, with the caveat that a unicode character is represented by a string of length 1. In mathematical notation you can consider slicing to use a half-open interval of [start, end), that is to say that the start is included but the end is not. The half-open nature of the interval has the advantage that len(x[:n]) = n where len(x) > =n, while the interval being closed at the start has the advantage that x[n:n+1] = [x[n]] where x is a list with len(x) >= n, thus keeping consistency between indexing and slicing notation."
  },
  {
    "sub_topic_id": 964,
    "sub_topic": "Input, Subset and Output External Data Files using Pandas",
    "title": "Remarks",
    "description": "This section shows basic code for reading, sub-setting and writing external data files using pandas. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 965,
    "sub_topic": "Introduction to RabbitMQ using AMQPStorm",
    "title": "Remarks",
    "description": "The latest version of AMQPStorm is available at pypi or you can install it using pip pip install amqpstorm. When consuming messages, we first need to define a function to handle the incoming messages. This can be any callable function, and has to take a message object, or a message tuple (depending on the to_tuple parameter defined in start_consuming). Besides processing the data from the incoming message, we will also have to Acknowledge or Reject the message. This is important, as we need to let RabbitMQ know that we properly received and processed the message."
  },
  {
    "sub_topic_id": 966,
    "sub_topic": "IoT Programming with Python and Raspberry PI",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 967,
    "sub_topic": "Iterables and Iterators",
    "title": "Remarks",
    "description": "Start with iter() built-in to get iterator over iterable and use next() to get elements one by one until StopIteration is raised signifying the end. An iterable is an object that can return an iterator. Any object with state that has an __iter__ method and returns an iterator is an iterable. It may also be an object without state that implements a __getitem__ method. - The method can take indices (starting from zero) and raise an IndexError when the indices are no longer valid. Python's str class is an example of a __getitem__ iterable. An Iterator is an object that produces the next value in a sequence when you call next(*object*) on some object. Moreover, any object with a __next__ method is an iterator. An iterator raises StopIteration after exhausting the iterator and cannot be re-used at this point."
  },
  {
    "sub_topic_id": 968,
    "sub_topic": "Itertools Module",
    "title": "Remarks",
    "description": "Use itertools.chain to create a single generator which will yield the values from several generators in sequence. itertools.combinations will return a generator of the k-combination sequence of a list. In other words: It will return a generator of tuples of all the possible k-wise combinations of the input list. itertools.dropwhile enables you to take items from a sequence after a condition first becomes False. Note that, the first number that violates the predicate (i.e.: the function returning a Boolean value) is_even is, 13. All the elements before that, are discarded. Similar to the built-in function zip(), itertools.zip_longest will continue iterating beyond the end of the shorter of two iterables."
  },
  {
    "sub_topic_id": 969,
    "sub_topic": "JSON Module",
    "title": "Remarks",
    "description": "For full documentation including version-specific functionality, please check the official documentation. There are various hooks which allow you to handle data that needs to be represented differently. Use of functools.partial allows you to partially apply the relevant parameters to these functions for convenience. There are various hooks that are handled by the json functions, such as object_hook and parse_float. For an exhaustive list for your version of python. The json module also allows for extension/substitution of the json.JSONEncoder and json.JSONDecoder to handle miscellaneous types. The hooks documented above can be added as defaults by creating an equivalently named method. To use these simply pass the class as the cls parameter to the relevant function. Use of functools.partial allows you to partially apply the cls parameter to these functions for convenience. "
  },
  {
    "sub_topic_id": 970,
    "sub_topic": "kivy - Cross-platform Python Framework for NUI Development",
    "title": "Remarks",
    "description": "NUI : A natural user interface (NUI) is a system for human-computer interaction that the user operates through intuitive actions related to natural, everyday human behavior. Kivy is a Python library for development of multi-touch enabled media rich applications which can be installed on different devices. Multi-touch refers to the ability of a touch-sensing surface (usually a touch screen or a trackpad) to detect or sense input from two or more points of contact simultaneously."
  },
  {
    "sub_topic_id": 971,
    "sub_topic": "Linked List Node",
    "title": "Remarks",
    "description": "A linked list is either: the empty list, represented by None, or a node that contains a cargo object and a reference to a linked list. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 972,
    "sub_topic": "Linked lists",
    "title": "Remarks",
    "description": "A linked list is a collection of nodes, each made up of a reference and a value. Nodes are strung together into a sequence using their references. Linked lists can be used to implement more complex data structures like lists, stacks, queues, and associative arrays. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 973,
    "sub_topic": "List",
    "title": "Remarks",
    "description": "The Python List is a general data structure widely used in Python programs. They are found in other languages, often referred to as dynamic arrays. They are both mutable and a sequence data type that allows them to be indexed and sliced. The list can contain different types of objects, including other list objects. list is a particular type of iterable, but it is not the only one that exists in Python. Sometimes it will be better to use set, tuple, or dictionary list is the name given in Python to dynamic arrays (similar to vector<void*> from C++ or Java's ArrayList<Object>). It is not a linked-list. Accessing elements is done in constant time and is very fast. Appending elements to the end of the list is amortized constant time, but once in a while it might involve allocation and copying of the whole list."
  },
  {
    "sub_topic_id": 974,
    "sub_topic": "List comprehensions",
    "title": "Remarks",
    "description": "List comprehensions in Python are concise, syntactic constructs. They can be utilized to generate lists from other lists by applying functions to each element in the list. The following section explains and demonstrates the use of these expressions. Comprehensions are syntactical constructs which define data structures or expressions unique to a particular language. Proper use of comprehensions reinterpret these into easily-understood expressions. As expressions, they can be used: in the right hand side of assignments as arguments to function calls in the body of a lambda function as standalone statements. (For example: [print(x) for x in range(10)])"
  },
  {
    "sub_topic_id": 975,
    "sub_topic": "List Comprehensions",
    "title": "Remarks",
    "description": "A list comprehension is a syntactical tool for creating lists in a natural and concise way, as illustrated in the following code to make a list of squares of the numbers 1 to 10: [i ** 2 for i in range(1,11)] The dummy i from an existing list range is used to make a new element pattern. It is used where a for loop would be necessary in less expressive languages. List comprehensions were outlined in PEP 202 and introduced in Python 2.0."
  },
  {
    "sub_topic_id": 976,
    "sub_topic": "List destructuring (aka packing and unpacking)",
    "title": "Remarks",
    "description": "If you're only interested in a given value, you can use _ to indicate you aren’t interested. Note: this will still set _, just most people don’t use it as a variable. But you can also use the destructuring syntax to pack arguments up, so you can assign variables using a list or a dict. When you want to create a function that can accept any number of arguments, and not enforce the position or the name of the argument at 'compile' time, it's possible and here's how: def fun1(*args, **kwargs): print(args, kwargs)."
  },
  {
    "sub_topic_id": 977,
    "sub_topic": "List slicing (selecting parts of lists)",
    "title": "Remarks",
    "description": "lst[::-1] gives you a reversed copy of the list start or end may be a negative number, which means it counts from the end of the array instead of the beginning. So: a[-1]    # last item in the array a[-2:]   # last two items in the array a[:-2]   # everything except the last two items. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 978,
    "sub_topic": "Logging",
    "title": "Remarks",
    "description": "This module defines functions and classes which implement a flexible event logging system for applications and libraries. The key benefit of having the logging API provided by a standard library module is that all Python modules can participate in logging, so your application log can include your own messages integrated with messages from third-party modules. Trying to log an exception that contains unicode chars, this way will fail miserably. It will hide the stacktrace of the original exception by overriding it with a new one that is raised during formatting of your logging.exception(e) call. Obviously, in your own code, you might be aware of the encoding in exceptions. However, 3rd party libs might handle this in a different way."
  },
  {
    "sub_topic_id": 979,
    "sub_topic": "Loops",
    "title": "Remarks",
    "description": "As one of the most basic functions in programming, loops are an important piece to nearly every programming language. Loops enable developers to set certain portions of their code to repeat through a number of loops which are referred to as iterations. This topic covers using multiple types of loops and applications of loops in Python. The loop conditional will not be evaluated after the break statement is executed. Note that break statements are only allowed inside loops, syntactically. A break statement inside a function cannot be used to terminate loops that called that function. If a loop has an else clause, it does not execute when the loop is terminated through a break statement."
  },
  {
    "sub_topic_id": 980,
    "sub_topic": "Manipulating XML",
    "title": "Remarks",
    "description": "Not all elements of the XML input will end up as elements of the parsed tree. Currently, this module skips over any XML comments, processing instructions, and document type declarations in the input. Nevertheless, trees built using this module’s API rather than parsing from XML text can have comments and processing instructions in them; they will be included when generating XML output."
  },
  {
    "sub_topic_id": 981,
    "sub_topic": "Map Function",
    "title": "Remarks",
    "description": "Everything that can be done with map can also be done with comprehensions: list(map(abs, [-1,-2,-3]))    # [1, 2, 3] [abs(i) for i in [-1,-2,-3]]  # [1, 2, 3] Though you would need zip if you have multiple iterables: import operator alist = [1,2,3] list(map(operator.add, alist, alist))  # [2, 4, 6] [i + j for i, j in zip(alist, alist)]  # [2, 4, 6] List comprehensions are efficient and can be faster than map in many cases, so test the times of both approaches if speed is important for you."
  },
  {
    "sub_topic_id": 982,
    "sub_topic": "Math Module",
    "title": "Remarks",
    "description": "The cmath module is similar to the math module, but defines functions appropriately for the complex plane. First of all, complex numbers are a numeric type that is part of the Python language itself rather than being provided by a library class. Thus we don't need to import cmath for ordinary arithmetic expressions. The mathematical field of complex analysis is beyond the scope of this example, but many functions in the complex plane have a 'branch cut', usually along the real axis or the imaginary axis. Most modern platforms support 'signed zero' as specified in IEEE 754, which provides continuity of those functions on both sides of the branch cut."
  },
  {
    "sub_topic_id": 983,
    "sub_topic": "Metaclasses",
    "title": "Remarks",
    "description": "Metaclasses allow you to deeply modify the behaviour of Python classes (in terms of how they're defined, instantiated, accessed, and more) by replacing the type metaclass that new classes use by default. When designing your architecture, consider that many things which can be accomplished with metaclasses can also be accomplished using more simple semantics: Traditional inheritance is often more than enough. Class decorators can mix-in functionality into a classes on a ad-hoc approach. Python 3.6 introduces __init_subclass__() which allows a class to partake in the creation of its subclass."
  },
  {
    "sub_topic_id": 984,
    "sub_topic": "Method Overriding",
    "title": "Remarks",
    "description": "When the Child class is created, it inherits the methods of the Parent class. This means that any methods that the parent class has, the child class will also have. In the example, the introduce is defined for the Child class because it is defined for Parent, despite not being defined explicitly in the class definition of Child. In this example, the overriding occurs when Child defines its own print_name method. If this method was not declared, then c.print_name() would have printed 'Parent'. However, Child has overriden the Parent's definition of print_name, and so now upon calling c.print_name(), the word 'Child' is printed."
  },
  {
    "sub_topic_id": 985,
    "sub_topic": "Mixins",
    "title": "Remarks",
    "description": "Syntax: class ClassName(MainClass, Mixin1, Mixin2, ...): # Used to declare a class with the name ClassName, main (first) class MainClass, and mixins Mixin1, Mixin2, etc. class ClassName(Mixin1, MainClass, Mixin2, ...): # The 'main' class doesn't have to be the first class; there's really no difference between it and the mixin. Adding a mixin to a class looks a lot like adding a superclass, because it pretty much is just that. An object of a class with the mixin Foo will also be an instance of Foo, and isinstance(instance, Foo) will return true."
  },
  {
    "sub_topic_id": 986,
    "sub_topic": "Multidimensional arrays",
    "title": "Remarks",
    "description": "A good way to visualize a 2d array is as a list of lists. Something like this: lst=[[1,2,3],[4,5,6],[7,8,9]] here the outer list lst has three things in it. each of those things is another list: The first one is: [1,2,3], the second one is: [4,5,6] and the third one is: [7,8,9]. You can access these lists the same way you would access another other element of a list, like this: print (lst[0]) #output: [1, 2, 3] print (lst[1]) #output: [4, 5, 6] print (lst[2]) #output: [7, 8, 9] You can then access the different elements in each of those lists the same way: print (lst[0][0]) #output: 1  print (lst[0][1]) #output: 2  Here the first number inside the [] brackets means get the list in that position. In the above example we used the number 0 to mean get the list in the 0th position which is [1,2,3]. The second set of [] brackets means get the item in that position from the inner list. In this case we used both 0 and 1 the 0th position in the list we got is the number 1 and in the 1st position it is 2."
  },
  {
    "sub_topic_id": 987,
    "sub_topic": "Multiprocessing",
    "title": "Remarks",
    "description": "A simple example of using multiple processes would be two processes (workers) that are executed separately. In the following example, two processes are started: countUp() counts 1 up, every second. countDown() counts 1 down, every second. Pool is a class which manages multiple Workers (processes) behind the scenes and lets you, the programmer, use. Pool(5) creates a new Pool with 5 processes, and pool.map works just like map but it uses multiple processes (the amount defined when creating the pool). Similar results can be achieved using map_async, apply and apply_async which can be found in the documentation."
  },
  {
    "sub_topic_id": 988,
    "sub_topic": "Multithreading",
    "title": "Remarks",
    "description": "Threads allow Python programs to handle multiple functions at once as opposed to running a sequence of commands individually. This topic explains the principles behind threading and demonstrates its usage. A thread that prints everything is received and modifies the output according to the terminal width. The nice part is that also the 'already written' output is modified when the width of the terminal changes. In cases where you split up one big job into several small ones and want to run them concurrently, but need to wait for all of them to finish before continuing, Thread.join() is the method you're looking for."
  },
  {
    "sub_topic_id": 989,
    "sub_topic": "Mutable vs Immutable (and Hashable) in Python",
    "title": "Remarks",
    "description": "One of the major use case when a developer needs to take mutability into account is when passing arguments to a function. This is very important, because this will determine the ability for the function to modify objects that doesn't belong to its scope, or in other words if the function has side effects. This is also important to understand where the result of a function has to be made available. Here, the mistake is to think that lin, as a parameter to the function, can be modified locally. Instead, lin and a reference the same object. As this object is mutable, the modification is done in-place, which means that the object referenced by both lin and a is modified. lin doesn't really need to be returned, because we already have a reference to this object in the form of a. a and b end referencing the same object."
  },
  {
    "sub_topic_id": 990,
    "sub_topic": "Neo4j and Cypher using Py2Neo",
    "title": "Remarks",
    "description": "Adding nodes to the graph is pretty simple,graph.merge_one is important as it prevents duplicate items. (If you run the script twice, then the second time it would update the title and not create new nodes for the same articles) timestamp should be an integer and not a date string as neo4j doesnt really have a date datatype. This causes sorting issues when you store date as '05-06-1989' article.push() is an the call that actually commits the operation into neo4j. Dont forget this step. create_unique is important for avoiding duplicates. But otherwise its a pretty straightforward operation. The relationship name is also important as you would use it in advanced cases."
  },
  {
    "sub_topic_id": 991,
    "sub_topic": "Non-official Python implementations",
    "title": "Remarks",
    "description": "Open-source implementation for .NET and Mono written in C#, licensed under Apache License 2.0. It relies on DLR (Dynamic Language Runtime). It supports only version 2.7, version 3 is currently being developped. Differences with CPython: Tight integration with .NET Framework. Strings are Unicode by default. Does not support extensions for CPython written in C. Does not suffer from Global Interpreter Lock. Performance is usually lower, though it depends on tests. Open-source implementation for JVM written in Java, licensed under Python Software Foundation License. It supports only version 2.7, version 3 is currently being developped. Differences with CPython: Tight integration with JVM. Strings are Unicode. Does not support  xtensions for CPython written in C. Does not suffer from Global Interpreter Lock. Performance is usually lower, though it depends on tests."
  },
  {
    "sub_topic_id": 992,
    "sub_topic": "Operator module",
    "title": "Remarks",
    "description": "Grouping the key-value pairs of a dictionary by the value with itemgetter: from itertools import groupby from operator import itemgetter adict = {'a': 1, 'b': 5, 'c': 1} dict((i, dict(v)) for i, v in groupby(adict.items(), itemgetter(1))) # Output: {1: {'a': 1, 'c': 1}, 5: {'b': 5}} which is equivalent (but faster) to a lambda function like this: dict((i, dict(v)) for i, v in groupby(adict.items(), lambda x: x[1])) Or sorting a list of tuples by the second element first the first element as secondary: alist_of_tuples = [(5,2), (1,3), (2,2)] sorted(alist_of_tuples, key=itemgetter(1,0)) # Output: [(2, 2), (5, 2), (1, 3)]"
  },
  {
    "sub_topic_id": 993,
    "sub_topic": "Operator Precedence",
    "title": "Remarks",
    "description": "Python operators have a set order of precedence, which determines what operators are evaluated first in a potentially ambiguous expression. For instance, in the expression 3 * 2 + 7, first 3 is multiplied by 2, and then the result is added to 7, yielding 13. The expression is not evaluated the other way around, because * has a higher precedence than +. Below is a list of operators by precedence, and a brief description of what they (usually) do. The following table summarizes the operator precedences in Python, from lowest precedence (least binding) to highest precedence (most binding). Operators in the same box have the same precedence. Unless the syntax is explicitly given, operators are binary. Operators in the same box group left to right (except for comparisons, including tests, which all have the same precedence and chain from left to right and exponentiation, which groups from right to left)."
  },
  {
    "sub_topic_id": 994,
    "sub_topic": "Optical Character Recognition",
    "title": "Remarks",
    "description": "Optical Character Recognition is converting images of text into actual text. In these examples find ways of using OCR in python. Another module of some use is PyOCR, source code of which is here. Also simple to use and has more features than PyTesseract. To initialize: from PIL import Image import sys import pyocr import pyocr.builders tools = pyocr.get_available_tools() # The tools are returned in the recommended order of usage tool = tools[0] langs = tool.get_available_languages() lang = langs[0] # Note that languages are NOT sorted in any way. Please refer # to the system locale settings for the default language # to use."
  },
  {
    "sub_topic_id": 995,
    "sub_topic": "os.path",
    "title": "Remarks",
    "description": "This module implements some useful functions on pathnames. The path parameters can be passed as either strings, or bytes. Applications are encouraged to represent file names as (Unicode) character strings. Syntax: os.path.join(a, *p) os.path.basename(p) os.path.dirname(p) os.path.split(p) os.path.splitext(p). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 996,
    "sub_topic": "Overloading",
    "title": "Remarks",
    "description": "It is possible to emulate container types, which support accessing values by key or index. Consider this naive implementation of a sparse list, which stores only its non-zero elements to conserve memory. If your class doesn't implement a specific overloaded operator for the argument types provided, it should return NotImplemented (note that this is a special constant, not the same as NotImplementedError). This will allow Python to fall back to trying other methods to make the operation work: When NotImplemented is returned, the interpreter will then try the reflected operation on the other type, or some other fallback, depending on the operator. If all attempted operations return NotImplemented, the interpreter will raise an appropriate exception. For example, given x + y, if x.__add__(y) returns unimplemented, y.__radd__(x) is attempted instead."
  },
  {
    "sub_topic_id": 997,
    "sub_topic": "Pandas Transform: Preform operations on groups and concatenate the results",
    "title": "Remarks",
    "description": "In the previous example, we had one result per client. However, functions returning different values for the group can also be applied. We assume that a customer can have n orders, an order can have m items, and items can be ordered more multiple times. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 998,
    "sub_topic": "Parallel computation",
    "title": "Remarks",
    "description": "Due to the GIL (Global interpreter lock) only one instance of the python interpreter executes in a single process. So in general, using multi-threading only improves IO bound computations, not CPU-bound ones. The multiprocessing module is recommended if you wish to parallelise CPU-bound tasks. GIL applies to CPython, the most popular implementation of Python, as well as PyPy. Other implementations such as Jython and IronPython have no GIL."
  },
  {
    "sub_topic_id": 999,
    "sub_topic": "Parsing Command Line arguments",
    "title": "Remarks",
    "description": "Most command line tools rely on arguments passed to the program upon its execution. Instead of prompting for input, these programs expect data or specific flags (which become booleans) to be set. This allows both the user and other programs to run the Python file passing it data as it starts. This section explains and demonstrates the implementation and usage of command line arguments in Python."
  },
  {
    "sub_topic_id": 1000,
    "sub_topic": "Partial functions",
    "title": "Remarks",
    "description": "As you probably know if you came from OOP school, specializing an abstract class and use it is a practice you should keep in mind when writing your code.What if you could define an abstract function and specialize it in order to create different versions of it? Thinks it as a sort of function Inheritance where you bind specific params to make them reliable for a specific scenario. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1001,
    "sub_topic": "Performance optimization",
    "title": "Remarks",
    "description": "When attempting to improve the performance of a Python script, first and foremost you should be able to find the bottleneck of your script and note that no optimization can compensate for a poor choice in data structures or a flaw in your algorithm design. Identifying performance bottlenecks can be done by profiling your script. Secondly do not try to optimize too early in your coding process at the expense of readability/design/quality. Donald Knuth made the following statement on optimization: 'We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%.'"
  },
  {
    "sub_topic_id": 1002,
    "sub_topic": "Pickle data serialisation",
    "title": "Remarks",
    "description": "Pickleable types The following objects are picklable. None, True, and False numbers (of all types) strings (of all types) tuples, lists, sets, and dicts containing only picklable objects functions defined at the top level of a module built-in functions classes that are defined at the top level of a module instances of such classes whose __dict__ or the result of calling __getstate__() is picklable (see the official docs for details). Based on the official Python documentation. pickle and security The pickle module is not secure. It should not be used when receiving the serialized data from an untrusted party, such as over the Internet."
  },
  {
    "sub_topic_id": 1003,
    "sub_topic": "Pillow",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1004,
    "sub_topic": "pip: PyPI Package Manager",
    "title": "Remarks",
    "description": "pip is the most widely-used package manager for the Python Package Index, installed by default with recent versions of Python. Syntax: pip <command> [options] where <command> is one of: install Install packages uninstall Uninstall packages freeze Output installed packages in requirements format list List installed  ackages show Show information about installed packages search Search PyPI for packages wheel Build wheels from your requirements zip Zip  individual packages (deprecated) unzip Unzip individual packages (deprecated) bundle Create pybundles (deprecated) help Show help for commands"
  },
  {
    "sub_topic_id": 1005,
    "sub_topic": "Plotting with Matplotlib",
    "title": "Remarks",
    "description": "Matplotlib (https://matplotlib.org/) is a library for 2D plotting based on NumPy. Here are some basic examples. More examples can be found in the official documentation (https://matplotlib.org/2.0.2/gallery.html and https://matplotlib.org/2.0.2/examples/index.html) as well as in http://www.riptutorial.com/topic/881. Similar to the previous example, here, a sine and a cosine curve are plotted on the same figure using separate plot commands. This is more Pythonic and can be used to get separate handles for each plot."
  },
  {
    "sub_topic_id": 1006,
    "sub_topic": "Plugin and Extension Classes",
    "title": "Remarks",
    "description": "In Object oriented programming language, a mixin is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin's methods depends on the language. It provides a mechanism for multiple inheritance by allowing multiple classes to use the common functionality, but without the complex semantics of multiple inheritance. Mixins are useful when a programmer wants to share functionality between different classes. Instead of repeating the same code over and over again, the common functionality can simply be grouped into a mixin and then inherited into each class that requires it."
  },
  {
    "sub_topic_id": 1007,
    "sub_topic": "Polymorphism",
    "title": "Remarks",
    "description": "Polymorphism is the ability to perform an action on an object regardless of its type. This is generally implemented by creating a base class and having two or more subclasses that all implement methods with the same signature. Any other function or method that manipulates these objects can call the same methods regardless of which type of object it is operating on, without needing to do a type check first. In object-oriented terminology when class X extend class Y , then Y is called super class or base class and X is called subclass or derived class."
  },
  {
    "sub_topic_id": 1008,
    "sub_topic": "PostgreSQL",
    "title": "Remarks",
    "description": "PostgreSQL is an actively developed and mature open source database. Using the psycopg2 module, we can execute queries on the database. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1009,
    "sub_topic": "Processes and Threads",
    "title": "Remarks",
    "description": "Most programs are executed line by line, only running a single process at a time. Threads allow multiple processes to flow independent of each other. Threading with multiple processors permits programs to run multiple processes simultaneously. This topic documents the implementation and usage of threads in Python. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1010,
    "sub_topic": "Profiling",
    "title": "Remarks",
    "description": "Python includes a profiler called cProfile. This is generally preferred over using timeit. It breaks down your entire script and for each method in your script it tells you: ncalls: The number of times a method was called tottime: Total time spent in the given function (excluding time made in calls to sub-functions) percall: Time spent per call. Or the quotient of tottime divided by ncalls cumtime: The cumulative time spent in this and all subfunctions (from invocation till exit). This figure is accurate even for recursive functions. percall: is the quotient of cumtime divided by primitive calls filename:lineno(function): provides the respective data of each function"
  },
  {
    "sub_topic_id": 1011,
    "sub_topic": "Property Objects",
    "title": "Remarks",
    "description": "Note: In Python 2, make sure that your class inherits from object (making it a new-style class) in order for all features of properties to be available. When you inherit from a class with a property, you can provide a new implementation for one or more of the property getter, setter or deleter functions, by referencing the property object on the parent class. While using decorator syntax (with the @) is convenient, it also a bit concealing. You can use properties directly, without decorators. The @property decorator can be used to define methods in a class which act like attributes. One example where this can be useful is when exposing information which may require an initial (expensive) lookup and simple retrieval thereafter."
  },
  {
    "sub_topic_id": 1012,
    "sub_topic": "py.test",
    "title": "Remarks",
    "description": "py.test is one of several third party testing libraries that are available for Python. It can be installed using pip with pip install pytest. A failing test will provide helpful output as to what went wrong: # projectroot/tests/test_code.py from module import code def test_add__failing(): assert code.add(10, 11) == 33. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1013,
    "sub_topic": "pyaudio",
    "title": "Remarks",
    "description": "PyAudio provides Python bindings for PortAudio, the cross-platform audio I/O library. With PyAudio, you can easily use Python to play and record audio on a variety of platforms. PyAudio is inspired by: 1.pyPortAudio/fastaudio: Python bindings for PortAudio v18 API. 2.tkSnack: cross-platform sound toolkit for Tcl/Tk and Python. Note: stream_callback is called in a separate thread (from the main thread). Exceptions that occur in the stream_callback will: 1.print a traceback on standard error to aid debugging, 2.queue the exception to be thrown (at some point) in the main thread, and 3.return paAbort to PortAudio to stop the stream. Note: Do not call Stream.read() or Stream.write() if using non-blocking operation. See: PortAudio’s callback signature for additional details : http://portaudio.com/docs/v19-doxydocs/portaudio_8h.html#a8a60fb2a5ec9cbade3f54a9c978e2710"
  },
  {
    "sub_topic_id": 1014,
    "sub_topic": "pyautogui module",
    "title": "Remarks",
    "description": "pyautogui is a module used to control mouse and keyboard. This module is basically used to automate mouse click and keyboard press tasks. For the mouse, the coordinates of the screen (0,0) start from the top-left corner. If you are out of control, then quickly move the mouse cursor to top-left, it will take the control of mouse and keyboard from the Python and give it back to you."
  },
  {
    "sub_topic_id": 1015,
    "sub_topic": "pygame",
    "title": "Remarks",
    "description": "Pygame is the go-to library for making multimedia applications, especially games, in Python. The official website is http://www.pygame.org/. Syntax: pygame.mixer.init(frequency=22050,  ize=-16, channels=2, buffer=4096) pygame.mixer.pre_init(frequency, size, channels, buffer) pygame.mixer.quit() pygame.mixer.get_init() pygame.mixer.stop() pygame.mixer.pause() pygame.mixer.unpause() pygame.mixer.fadeout(time) pygame.mixer.set_num_channels(count) pygame.mixer.get_num_channels() pygame.mixer.set_reserved(count) pygame.mixer.find_channel(force) pygame.mixer.get_busy()"
  },
  {
    "sub_topic_id": 1016,
    "sub_topic": "Pyglet",
    "title": "Remarks",
    "description": "Pyglet is a Python module used for visuals and sound. It has no dependencies on other modules. See [pyglet.org][1] for the official information. [1]: http://pyglet.org. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1017,
    "sub_topic": "PyInstaller - Distributing Python Code",
    "title": "Remarks",
    "description": "PyInstaller is a module used to bundle python apps in a single package along with all the dependencies. The user can then run the package app without a python interpreter or any modules. It correctly bundles many major packages like numpy, Django, OpenCv and others. Some important points to remember: Pyinstaller supports Python 2.7 and Python 3.3+ Pyinstaller has been tested against Windows, Linux and Mac OS X. It is NOT cross compiler. (A Windows app cannot be packaged in Linux. You've to run PyInstaller in Windows to bundle an app for Windows)"
  },
  {
    "sub_topic_id": 1018,
    "sub_topic": "Python and Excel",
    "title": "Remarks",
    "description": "Manipulating and reading an existing workbook: import openpyxl as opx #To change an existing wookbook we located it by referencing its path workbook =  px.load_workbook(workbook_path) load_workbook() contains the parameter read_only, setting this to True will load the workbook as read_only, this is helpful when reading larger xlsx files: workbook = opx.load_workbook(workbook_path, read_only=True) Once you have loaded the workbook into memory, you can access the individual sheets using workbook.sheets first_sheet = workbook.worksheets[0] If you want to specify the name of an available sheets, you can use workbook.get_sheet_names(). sheet = workbook.get_sheet_by_name('Sheet Name') Finally, the rows of the sheet can be accessed using sheet.rows. To iterate over the rows in a sheet, use: for row in sheet.rows: print row[0].value Since each row in rows is a list of Cells, use Cell.value to get the contents of the Cell."
  },
  {
    "sub_topic_id": 1019,
    "sub_topic": "Python Anti-Patterns",
    "title": "Remarks",
    "description": "A program can easily waste time by calling a processor-intensive function multiple times. For example, take a function which looks like this: it returns an integer if the input value can produce one, else None: def intensive_f(value): # int -> Optional[int]    # complex, and time-consuming code    if  rocess_has_failed:        return None    return integer_output And it could be used in the following way:  x = 5 if intensive_f(x) is not one:     print(intensive_f(x) / 2) else:     print(x, 'could not be processed')  print(x) Whilst this will work, it has the problem of calling intensive_f, which doubles the length of time for the code to run. A better solution would be to get the return value of the function beforehand."
  },
  {
    "sub_topic_id": 1020,
    "sub_topic": "Python concurrency",
    "title": "Remarks",
    "description": "The Python developers made sure that the API between threading and multiprocessing is similar so that switching between the two variants is easier for programmers. Because data is sensitive when dealt with between two threads (think concurrent read and concurrent write can conflict with one another, causing race conditions), a set of unique objects were made in order to facilitate the passing of data back and forth between threads. Any truly atomic operation can be used between threads, but it is always safe to stick with Queue. Most people will suggest that when using queue, to always place the queue data in a try: except: block instead of using empty. However, for applications where it does not matter if you skip a scan cycle (data can be placed in the queue while it is flipping states from queue.Empty==True to queue.Empty==False) it is usually better to place read and write access in what I call an Iftry block, because an 'if' statement is technically more performant than catching the exception."
  },
  {
    "sub_topic_id": 1021,
    "sub_topic": "Python Data Types",
    "title": "Remarks",
    "description": "Data types are nothing but variable you used to reserve some space in memory. Python variables do not need an explicit declaration to reserve memory space. The declaration happens automatically when you assign a value to a variable. Dictionary consists of key-value pairs.It is enclosed by curly braces {} and values can be assigned and accessed using square brackets[]. A list contains items separated by commas and enclosed within square brackets [].lists are almost similar to arrays in C. One difference is that all the items belonging to a list can be of different data type. Numbers have four types in Python. Int, float, complex, and long."
  },
  {
    "sub_topic_id": 1022,
    "sub_topic": "Python HTTP Server",
    "title": "Remarks",
    "description": "What happens when we execute python -m SimpleHTTPServer 9000? To answer this question we should understand the construct of SimpleHTTPServer (https://hg.python.org/cpython/file/2.7/Lib/SimpleHTTPServer.py) and  BaseHTTPServer(https://hg.python.org/cpython/file/2.7/Lib/BaseHTTPServer.py). Firstly, Python invokes the SimpleHTTPServer module with 9000 as an argument. Now observing the SimpleHTTPServer code, def test(HandlerClass = SimpleHTTPRequestHandler, ServerClass =  aseHTTPServer.HTTPServer): BaseHTTPServer.test(HandlerClass, ServerClass) if __name__ == '__main__': test() The test function is invoked following request handlers and ServerClass. Now BaseHTTPServer.test is invoked"
  },
  {
    "sub_topic_id": 1023,
    "sub_topic": "Python Lex-Yacc",
    "title": "Remarks",
    "description": "PLY is a pure-Python implementation of the popular compiler construction tools lex and yacc. To install PLY on your machine for python2/3, follow the steps outlined below: Download the source code from here. Unzip the downloaded zip file Navigate into the unzipped ply-3.10 folder Run the following command in your terminal: python setup.py install If you completed all the above, you should now be able to use the PLY module. You can test it out by opening a python interpreter and typing import ply.lex. Note: Do not use pip to install PLY, it will install a broken distribution on your machine."
  },
  {
    "sub_topic_id": 1024,
    "sub_topic": "Python Networking",
    "title": "Remarks",
    "description": "To share files or to host simple websites(http and javascript) in your local network, you can use Python's builtin SimpleHTTPServer module. Python should be in your Path variable. Go to the folder where your files are and type: For python 2: $ python -m SimpleHTTPServer <portnumber> For python 3: $ python3 -m http.server <portnumber> If port number is not given 8000 is the default port. So the output will be: Serving HTTP on 0.0.0.0 port 8000 ... You can access to your files through any device connected to the local network by typing http://hostipaddress:8000/."
  },
  {
    "sub_topic_id": 1025,
    "sub_topic": "Python Persistence",
    "title": "Remarks",
    "description": "Objects like numbers, lists, dictionaries,nested structures and class instance objects live in your computer’s memory and are lost as soon as the script ends. pickle stores data persistently in separate file. pickled representation of an object is always a bytes object in all cases so one must open files in wb to store data and rb to load data from pickle. the data may may be off any kind , for example, data={'a':'some_value', 'b':[9,4,7],      'c':['some_str','another_str','spam','ham'],  'd':{'key':'nested_dictionary'},} "
  },
  {
    "sub_topic_id": 1026,
    "sub_topic": "Python Requests Post",
    "title": "Remarks",
    "description": "Documentation for the Python Requests module in the context of the HTTP POST method and its corresponding Requests function. With the Requests module,its is only necessary to provide a file handle as opposed to the contents retrieved with .read(). To pass form encoded data with the post operation, data must be structured as dictionary and supplied as the data parameter. If the data does not want to be form encoded, simply pass a string, or integer to the data parameter. The use of socks proxies requires 3rd party dependencies requests[socks], once installed socks proxies are used in a very similar way to HTTPBasicAuth."
  },
  {
    "sub_topic_id": 1027,
    "sub_topic": "Python Serial Communication (pyserial)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1028,
    "sub_topic": "Python Server Sent Events",
    "title": "Remarks",
    "description": "Server Sent Events (SSE) is a unidirectional connection between a server and a client (usually a web browser) that allows the server to 'push' information to the client. It is much like websockets and long polling. The main difference between SSE and websockets is that SSE is unidirectional, only the server can send info to the client, where as with websockets, both can send info to eachother. SSE is typically considered to be much simpler to use/implement than websockets."
  },
  {
    "sub_topic_id": 1029,
    "sub_topic": "Python speed of program",
    "title": "Remarks",
    "description": "There are certain principles that apply to optimization in any computer language, and Python is no exception. Don't optimize as you go: Write your program without regard to possible optimizations, concentrating instead on making sure that the code is clean, correct, and understandable. If it's too big or too slow when you've finished, then you can consider optimizing it. Remember the 80/20 rule: In many fields you can get 80% of the result with 20% of the effort (also called the 90/10 rule - it depends on who you talk to). Whenever you're about to optimize code, use profiling to find out where that 80% of execution time is going, so you know where to concentrate your effort. Always run 'before' and 'after' benchmarks: How else will you know that your optimizations actually made a difference? If your optimized code turns out to be only slightly faster or smaller than the original version, undo your changes and go back to the original, clear code. Use the right algorithms and data structures: Don't use an O(n2) bubble sort algorithm to sort a thousand elements when there's an O(n log n) quicksort available. Similarly, don't store a thousand items in an array that requires an O(n) search when you could use an O(log n) binary tree, or an O(1) Python hash table."
  },
  {
    "sub_topic_id": 1030,
    "sub_topic": "Python Virtual Environment - virtualenv",
    "title": "Remarks",
    "description": "A Virtual Environment ('virtualenv') is a tool to create isolated Python environments. It keeps the dependencies required by different projects in separate places, by creating virtual Python env for them. It solves the “project A depends on version 2.xxx but, project B needs 2.xxx” dilemma, and keeps your global site-packages directory clean and manageable. virtualenv' creates a folder which contains all the necessary libs and bins to use the packages that a Python project would need."
  },
  {
    "sub_topic_id": 1031,
    "sub_topic": "Queue Module",
    "title": "Remarks",
    "description": "The Queue module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. There are three types of queues provides by queue module,Which are as following : 1. Queue 2. LifoQueue 3. PriorityQueue Exception which could be come: 1. Full (queue overflow) 2. Empty (queue underflow)"
  },
  {
    "sub_topic_id": 1032,
    "sub_topic": "Raise Custom Errors / Exceptions",
    "title": "Remarks",
    "description": "Python has many built-in exceptions which force your program to output an error when something in it goes wrong. However, sometimes you may need to create custom exceptions that serve your purpose. In Python, users can define such exceptions by creating a new class. This exception class has to be derived, either directly or indirectly, from Exception class. Most of the built-in exceptions are also derived from this class."
  },
  {
    "sub_topic_id": 1033,
    "sub_topic": "Random module",
    "title": "Remarks",
    "description": "Syntax: random.seed(a=None, version=2) (version is only avaiable for python 3.x) random.getstate() random.setstate(state) random.randint(a, b) random.randrange(stop) random.randrange(start, stop, step=1) random.choice(seq) random.shuffle(x, random=random.random) random.sample(population, k). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1034,
    "sub_topic": "Reading and Writing CSV",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1035,
    "sub_topic": "Recursion",
    "title": "Remarks",
    "description": "Recursion needs a stop condition stopCondition in order to exit the recursion. The original variable must be passed on to the recursive function so it becomes stored. By default Python's recursion stack cannot exceed 1000 frames. This can be changed by setting the sys.setrecursionlimit(15000) which is faster however, this method consumes more memory. Instead, we can also solve the Tail Recursion problem using stack introspection. Recursion occurs when a function call causes that same function to be called again before the original function call terminates. For example, consider the well-known mathematical expression x! (i.e. the factorial operation). The factorial operation is defined for all nonnegative integers as follows: If the number is 0, then the answer is 1. Otherwise, the answer is that number times the factorial of one less than that number."
  },
  {
    "sub_topic_id": 1036,
    "sub_topic": "Reduce",
    "title": "Remarks",
    "description": "reduce might be not always the most efficient function. For some types there are equivalent functions or methods: sum() for the sum of a sequence containing addable elements (not strings): sum([1,2,3]) # = 6 str.join for the concatenation of strings: ''.join(['Hello', ',', ' World'])            # = 'Hello, World' next together with a generator could be a short-circuit variant compared to reduce: # First falsy item: next((i for i in [100, [], 20, 0] if not i)) # = []. reduce will not terminate the iteration before the iterable has been completly iterated over so it can be used to create a non short-circuit any() or all() function."
  },
  {
    "sub_topic_id": 1037,
    "sub_topic": "Regular Expressions (Regex)",
    "title": "Remarks",
    "description": "Python makes regular expressions available through the re module. Regular expressions are combinations of characters that are interpreted as rules for matching substrings. For instance, the expression 'amount\\D+\\d+' will match any string composed by the word amount plus an integral number, separated by one or more non-digits, such as:amount=100, amount is 3, amount is equal to: 33, etc. Syntax: Direct Regular Expressions re.match(pattern, string, flag=0) # Out: match pattern at the beginning of string or None re.search(pattern, string, flag=0) # Out: match pattern inside string or None re.findall(pattern, string, flag=0) # Out: list of all matches of pattern in string or [] re.finditer(pattern, string, flag=0) # Out: same as re.findall, but returns iterator object re.sub(pattern, replacement, string, flag=0) # Out: string with replacement (string or function) in place of pattern Precompiled Regular Expressions precompiled_pattern = re.compile(pattern, flag=0) precompiled_pattern.match(string) # Out: match at the beginning of string or None precompiled_pattern.search(string) # Out: match anywhere in string or None precompiled_pattern.findall(string) # Out: list of all matching substrings precompiled_pattern.sub(string/pattern/function, string) # Out: replaced string"
  },
  {
    "sub_topic_id": 1038,
    "sub_topic": "Searching",
    "title": "Remarks",
    "description": "All searching algorithms on iterables containing n elements have O(n) complexity. Only specialized algorithms like bisect.bisect_left() can be faster with O(log(n)) complexity. String also have an index method but also more advanced options and the additional str.find. For both of these there is a complementary reversed method. To allow the use of in for custom classes the class must either provide the magic method __contains__ or, failing that, an __iter__-method. dict have no builtin method for searching a value or key because dictionaries are unordered. "
  },
  {
    "sub_topic_id": 1039,
    "sub_topic": "Secure Shell Connection in Python",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1040,
    "sub_topic": "Security and Cryptography",
    "title": "Remarks",
    "description": "Python, being one of the most popular languages in computer and network security, has great potential in security and cryptography. This topic deals with the cryptographic features and implementations in Python from its uses in computer and network security to hashing and encryption/decryption algorithms. Many of the methods in hashlib will require you to pass values interpretable as buffers of bytes, rather than strings. This is the case for hashlib.new().update() as well as hashlib.pbkdf2_hmac. If you have a string, you can convert it to a byte buffer by prepending the character b to the start of the string: 'This is a string'  b'This is a buffer of bytes'."
  },
  {
    "sub_topic_id": 1041,
    "sub_topic": "Set",
    "title": "Remarks",
    "description": "Sets are unordered and have very fast lookup time (amortized O(1) if you want to get technical). It is great to use when you have a collection of things, the order doesn't matter, and you'll be looking up items by name a lot. If it makes more sense to look up items by an index number, consider using a list instead. If order matters, consider a list as well. Sets are mutable and thus cannot be hashed, so you cannot use them as dictionary keys or put them in other sets, or anywhere else that requires hashable types. In such cases, you can use an immutable frozenset. The elements of a set must be hashable. This means that they have a correct __hash__ method, that is consistent with __eq__. In general, mutable types such as list or set are not hashable and cannot be put in a set. If you encounter this problem, consider using dict and immutable keys."
  },
  {
    "sub_topic_id": 1042,
    "sub_topic": "setup.py",
    "title": "Remarks",
    "description": "If your package isn't only a library, but has a piece of code that can be used either as a showcase or a standalone application when your package is installed, put that piece of code into __main__.py file. Put the __main__.py in the package_name folder. This way you will be able to run it directly from console: python -m package_name If there's no __main__.py file available, the package won't run with this command and this error will be printed: python: No module named package_name.__main__; 'package_name' is a package and cannot be directly executed."
  },
  {
    "sub_topic_id": 1043,
    "sub_topic": "setup.py",
    "title": "Remarks",
    "description": "If your package isn't only a library, but has a piece of code that can be used either as a showcase or a standalone application when your package is installed, put that piece of code into __main__.py file. Put the __main__.py in the package_name folder. This way you will be able to run it directly from console: python -m package_name If there's no __main__.py file available, the package won't run with this command and this error will be printed: python: No module named package_name.__main__; 'package_name' is a package and cannot be directly executed."
  },
  {
    "sub_topic_id": 1044,
    "sub_topic": "shelve",
    "title": "Remarks",
    "description": "Shelve is a python module used to store objects in a file. The shelve module implements persistent storage for arbitrary Python objects which can be pickled, using a dictionary-like API. The shelve module can be used as a simple persistent storage option for Python objects when a relational database is overkill. The shelf is accessed by keys, just as with a dictionary. The values are pickled and written to a database created and managed by anydbm."
  },
  {
    "sub_topic_id": 1045,
    "sub_topic": "Similarities in syntax, Differences in meaning: Python vs. JavaScript",
    "title": "Remarks",
    "description": "It sometimes happens that two languages put different meanings on the same or similar syntax expression. When the both languages are of interest for a programmer, clarifying these bifurcation points helps to better understand the both languages in their basics and subtleties. In Python this evaluates to True, but in JavaScript to false. This is because in Python in checks if a value is contained in a list, so 2 is in [2, 3] as its first element. In JavaScript in is used with objects and checks if an object contains the property with the name expressed by the value."
  },
  {
    "sub_topic_id": 1046,
    "sub_topic": "Simple Mathematical Operators",
    "title": "Remarks",
    "description": "Python does common mathematical operators on its own, including integer and float division, multiplication, exponentiation, addition, and subtraction. The math module (included in all standard Python versions) offers expanded functionality like trigonometric functions, root operations, logarithms, and many more. By default, the math.log function calculates the logarithm of a number, base e. You can optionally specify a base as the second argument. Note that math.hypot(x, y) is also the length of the vector (or Euclidean distance) from the origin (0, 0) to the point (x, y). To convert from radians -> degrees and degrees -> radians respectively use math.degrees and math.radians."
  },
  {
    "sub_topic_id": 1047,
    "sub_topic": "Sockets",
    "title": "Remarks",
    "description": "Many programming languages use sockets to communicate across processes or between devices. This topic explains proper usage the the sockets module in Python to facilitate sending and receiving data over common networking protocols. When run with no arguments, this program starts a TCP socket server that listens for connections to 127.0.0.1 on port 5000. The server handles each connection in a separate thread. When run with the -c argument, this program connects to the server, reads the client list, and prints it out. The client list is transferred as a JSON string. The client name may be specified by passing the -n argument. By passing different names, the effect on the client list may be observed."
  },
  {
    "sub_topic_id": 1048,
    "sub_topic": "Sockets And Message Encryption/Decryption Between Client and Server",
    "title": "Remarks",
    "description": "Cryptography is used for security purposes. There are not so many examples of Encryption/Decryption in Python using IDEA encryption MODE CTR. Aim of this documentation :Extend and implement of the RSA Digital Signature scheme in station-to-station communication. Using Hashing for integrity of message, that is SHA-1. Produce simple Key Transport protocol. Encrypt Key with IDEA encryption. Mode of Block Cipher is Counter Mode. PyCrypto: Unzip the file. Go to the directory and open terminal for linux(alt+ctrl+t) and CMD(shift+right click+select command prompt open here) for windows. After that write python setup.py install (Make Sure Python Environment is set properly in Windows OS) PyCryptoPlus: Same as the last library."
  },
  {
    "sub_topic_id": 1049,
    "sub_topic": "Sorting, Minimum and Maximum",
    "title": "Remarks",
    "description": "To find some number (more than one) of largest or smallest values of an iterable, you can use the nlargest and nsmallest of the heapq module: import heapq # get 5 largest items from the range heapq.nlargest(5, range(10)) # Output: [9, 8, 7, 6, 5] heapq.nsmallest(5, range(10)) # Output: [0, 1, 2, 3, 4] This is much more efficient than sorting the whole iterable and then slicing from the end or beginning. Internally these functions use the binary heap priority queue data structure, which is very efficient for this use case."
  },
  {
    "sub_topic_id": 1050,
    "sub_topic": "Sqlite3 Module",
    "title": "Remarks",
    "description": "The sqlite3 module was written by Gerhard Häring. To use the module, you must first create a Connection object that represents the database. Here the data will be stored in the example.db file: import sqlite3 conn = sqlite3.connect('example.db') You can also supply the special name :memory: to create a database in RAM. Once you have a Connection, you can create a Cursor object and call its execute() method to perform SQL commands: c = conn.cursor() # Create table c.execute('''CREATE TABLE stocks (date text, trans text, symbol text, qty real, price real)''') # Insert a row of data c.execute('INSERT INTO stocks VALUES ('2006-01-05','BUY','RHAT',100,35.14)') # Save (commit) the changes conn.commit() # We can also close the connection if we are done with it. # Just be sure any changes have been committed or they will be lost. conn.close()"
  },
  {
    "sub_topic_id": 1051,
    "sub_topic": "Stack",
    "title": "Remarks",
    "description": "A stack is a container of objects that are inserted and removed according to the last-in first-out (LIFO) principle. In the pushdown stacks only two operations are allowed: push the item into the stack, and pop the item out of the stack. A stack is a limited access data structure - elements can be added and removed from the stack only at the top. Here is a structural definition of a Stack: a stack is either empty or it consists of a top and the rest which is a Stack."
  },
  {
    "sub_topic_id": 1052,
    "sub_topic": "String Formatting",
    "title": "Remarks",
    "description": "When storing and transforming data for humans to see, string formatting can become very important. Python offers a wide variety of string formatting methods which are outlined in this topic. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1053,
    "sub_topic": "String Methods",
    "title": "Remarks",
    "description": "String objects are immutable, meaning that they can't be modified in place the way a list can. Because of this, methods on the built-in type str always return a new str object, which contains the result of the method call. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1054,
    "sub_topic": "String representations of class instances: __str__ and __repr__ methods",
    "title": "Remarks",
    "description": "When both methods are implemented, it's somewhat common to have a __str__ method that returns a human-friendly representation (e.g. 'Ace of Spaces') and __repr__ return an eval-friendly representation. In fact, the Python docs for repr() note exactly this: For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to eval(), otherwise the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. What that means is that __str__ might be implemented to return something like 'Ace of Spaces' as shown previously, __repr__ might be implemented to instead return Card('Spades', 1) This string could be passed directly back into eval in somewhat of a 'round-trip':  object -> string -> object An example of an implementation of such a method might be: def __repr__(self):  return 'Card(%s, %d)' % (self.suit, self.pips)"
  },
  {
    "sub_topic_id": 1055,
    "sub_topic": "Subprocess Library",
    "title": "Remarks",
    "description": "subprocess.call(args, *, stdin=None, stdout=None, stderr=None, shell=False, timeout=None) subprocess.Popen(args, bufsize=-1, executable=None, stdin=None, stdout=None, stderr=None, preexec_fn=None, close_fds=True, shell=False, cwd=None, env=None, universal_newlines=False, startupinfo=None, creationflags=0, restore_signals=True, start_new_session=False, pass_fds=()) This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1056,
    "sub_topic": "sys",
    "title": "Remarks",
    "description": "The sys module provides access to functions and values concerning the program's runtime environment, such as the command line parameters in sys.argv or the function sys.exit() to end the current process from any point in the program flow. While cleanly separated into a module, it's actually built-in and as such will always be available under normal circumstances. For details on all sys module members, refer to the official documentation. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1057,
    "sub_topic": "tempfile NamedTemporaryFile",
    "title": "Remarks",
    "description": "You can create temporary files which has a visible name on the file system which can be accessed via the name property. The file can, on unix systems, be configured to delete on closure (set by delete param, default is True) or can be reopened later. The following will create and open a named temporary file and write 'Hello World!' to that file. The filepath of the temporary file can be accessed via name, in this example it is saved to the variable path and printed for the user. The file is then re-opened after closing the file and the contents of the tempfile are read and printed for the user."
  },
  {
    "sub_topic_id": 1058,
    "sub_topic": "Templates in python",
    "title": "Remarks",
    "description": "Templates support $-based substitutions instead of %-based substitution. Substitute (mapping, keywords) performs template substitution, returning a new string. Mapping is any dictionary-like object with keys that match with the template placeholders. In this example, price and qty are placeholders. Keyword arguments can also be used as placeholders. Placeholders from keywords take precedence if both are present."
  },
  {
    "sub_topic_id": 1059,
    "sub_topic": "The __name__ special variable",
    "title": "Remarks",
    "description": "The Python special variable __name__ is set to the name of the containing module. At the top level (such as in the interactive interpreter, or in the main file) it is set to '__main__'. This can be used to run a block of statements if a module is being run directly rather than being imported. The related special attribute obj.__name__ is found on classes, imported modules and functions (including methods), and gives the name of the object when defined. The __name__ special variable is used to check whether a file has been imported as a module or not, and to identify a function, class, module object by their __name__ attribute."
  },
  {
    "sub_topic_id": 1060,
    "sub_topic": "The base64 Module",
    "title": "Remarks",
    "description": "Base 64 encoding represents a common scheme for encoding binary into ASCII string format using radix 64. The base64 module is part of the standard library, which means it installs along with Python. Understanding of bytes and strings is critical to this topic and can be reviewed here. This topic explains how to use the various features and number bases of the base64 module."
  },
  {
    "sub_topic_id": 1061,
    "sub_topic": "The dis module",
    "title": "Remarks",
    "description": "Python is a hybrid interpreter. When running a program, it first assembles it into bytecode which can then be run in the Python interpreter (also called a Python virtual machine). The dis module in the standard library can be used to make the Python bytecode human-readable by disassembling classes, methods, functions, and code objects. Each operation code (opcode) in the Python assembly language (the bytecode) takes a fixed number of items from the stack and returns a fixed number of items to the stack. If there aren't enough items on the stack for an opcode, the Python interpreter will crash, possibly without an error message."
  },
  {
    "sub_topic_id": 1062,
    "sub_topic": "The Interpreter (Command Line Console)",
    "title": "Remarks",
    "description": "If the help function is called in the console without any arguments, Python presents an interactive help console, where you can find out about Python modules, symbols, keywords and more. The Python console adds a new function, help, which can be used to get information about a function or object. For a function, help prints its signature (arguments) and its docstring, if the function has one. For an object, help lists the object's docstring and the different member functions which the object has. The console for the primary version of Python can usually be opened by typing py into your windows console or python on other platforms."
  },
  {
    "sub_topic_id": 1063,
    "sub_topic": "The locale Module",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1064,
    "sub_topic": "The os Module",
    "title": "Remarks",
    "description": "The os module provides an interface to determine what type of operating system the code is currently running on. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1065,
    "sub_topic": "The pass statement",
    "title": "Remarks",
    "description": "Why would you ever want to tell the interpreter to explicitly do nothing? Python has the syntactical requirement that code blocks (after if, except, def, class etc.) cannot be empty. But sometimes an empty code block is useful in itself. An empty class block can definine a new, different class, such as exception that can be caught. An empty except block can be the simplest way to express “ask for forgiveness later” if there was nothing to ask for forgiveness for. If an iterator does all the heavy lifting, an empty for loop to just run the iterator can be useful. Therefore, if nothing is supposed to happen in a code block, a pass is needed for such a block to not produce an IndentationError. Alternatively, any statement (including just a term to be evaluated, like the Ellipsis literal ... or a string, most often a docstring) can be used, but the pass makes clear that indeed nothing is supposed to happen, and does not need to be actually evaluated and (at least temporarily) stored in memory. Here is a small annotated collection of the most frequent uses of pass that crossed my way – together with some comments on good and bad pratice."
  },
  {
    "sub_topic_id": 1066,
    "sub_topic": "The Print Function",
    "title": "Remarks",
    "description": "You can do more than just print text. print also has several parameters to help you. Argument sep: place a string between arguments. Do you need to print a list of words separated by a comma or some other string? >>> print('apples','bannas', 'cherries', sep=', ') apple, bannas, cherries >>> print('apple','banna',  cherries', sep=', ') apple, banna, cherries >>> Argument end: use something other than a newline at the end Without the end argument, all print() functions write a line and then go to the beginning of the next line. You can change it to do nothing (use an empty string of ''), or double spacing between paragraphs by using two newlines."
  },
  {
    "sub_topic_id": 1067,
    "sub_topic": "tkinter",
    "title": "Remarks",
    "description": "Released in Tkinter is Python's most popular GUI (Graphical User Interface) library. This topic explains proper usage of this library and its features. The capitalization of the tkinter module is different between Python 2 and 3. For Python 2 use the following: from Tkinter import *  # Capitalized For Python 3 use the following: from tkinter import *  # Lowercase For code that works with both Python 2 and 3, you can either do try: from Tkinter import * except ImportError: from tkinter import * or from sys import version_info if version_info.major == 2: from Tkinter import * elif  ersion_info.major == 3: from tkinter import * ."
  },
  {
    "sub_topic_id": 1068,
    "sub_topic": "Tuple",
    "title": "Remarks",
    "description": "A tuple is a immutable list of values. Tuples are one of Python's simplest and most common collection types, and can be created with the comma operator (value = 1, 2, 3). Parentheses are only needed for empty tuples or when used in a function call. A tuple is a sequence of values. The values can be any type, and they are indexed by integers, so in that respect tuples are a lot like lists. The important difference is that tuples are immutable and are hashable, so they can be used in sets and maps Related Examples"
  },
  {
    "sub_topic_id": 1069,
    "sub_topic": "Turtle Graphics",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1070,
    "sub_topic": "Type Hints",
    "title": "Remarks",
    "description": "Type Hinting, as specified in PEP 484, is a formalized solution to statically indicate the type of a value for Python Code. By appearing alongside the typing module, type-hints offer Python users the capability to annotate their code thereby assisting type checkers while, indirectly, documenting their code with more information. Due to this dynamic nature of python types, where many are applicable for a given operation, any type checker would not be able to reasonably assert whether a call for this function should be allowed or not. To assist our type checker we can now provide type hints for it in the Function definition indicating the type that we allow."
  },
  {
    "sub_topic_id": 1071,
    "sub_topic": "Unicode",
    "title": "Remarks",
    "description": "Always encode from unicode to bytes. In this  direction, you get to choose the encoding. >>> u'🐍'.encode('utf-8') '\\xf0\\x9f\\x90\\x8d' The other way is to decode from bytes to unicode. In this direction, you have to know what the encoding is. >>> b'\\xf0\\x9f\\x90\\x8d'.decode('utf-8') u'\\U0001f40d' This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1072,
    "sub_topic": "Unicode and bytes",
    "title": "Remarks",
    "description": "Unicode strings can be converted to bytes with .encode(encoding). Python 3 >>> '£13.55'.encode('utf8') b'\\xc2\\xa313.55' >>> '£13.55'.encode('utf16') '\\xff\\xfe\\xa3\\x001\\x003\\x00.\\x005\\x005\\x00' Python 2 in py2 the default console encoding is sys.getdefaultencoding() == 'ascii' and not utf-8 as in py3, therefore printing it as in the previous example is not directly possible. >>> print type(u'£13.55'.encode('utf8')) <type 'str'> >>> print u'£13.55'.encode('utf8') SyntaxError: Non-ASCII character '\\xc2' in... # with encoding set inside a file # -*- coding: utf-8 -*- >>> print u''£13.55''.encode('utf8') ┬ú13.55 If the encoding can't handle the string, a `UnicodeEncodeError` is raised: >>>  £13.55.encode('ascii') Traceback (most recent call last):   File '<stdin>', line 1, in <module> UnicodeEncodeError: 'ascii' codec can't encode character '\\xa3' in position 0: ordinal not i"
  },
  {
    "sub_topic_id": 1073,
    "sub_topic": "Unit Testing",
    "title": "Remarks",
    "description": "There are several unit testing tools for Python. This documentation topic describes the basic unittest module. Other testing tools include py.test and nosetests. This python documentation about testing compares several of these tools without going into depth. While Python has an assert statement, the Python unit testing framework has better assertions specialized for tests: they are more informative on failures, and do not depend on the execution's debug mode. One way to mock a function is to use the create_autospec function, which will mock out an object according to its specs. With functions, we can use this to ensure that they are called appropriately."
  },
  {
    "sub_topic_id": 1074,
    "sub_topic": "Unzipping Files",
    "title": "Remarks",
    "description": "To extract or uncompress a tarball, ZIP, or gzip file, Python's tarfile, zipfile, and gzip modules are provided respectively. Python's tarfile module provides the TarFile.extractall(path=\".\", members=None) function for extracting from a tarball file. Python's zipfile module provides the ZipFile.extractall([path[, members[, pwd]]]) function for extracting or unzipping ZIP compressed files. Finally, Python's gzip module provides the GzipFile class for decompressing."
  },
  {
    "sub_topic_id": 1075,
    "sub_topic": "urllib",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1076,
    "sub_topic": "Usage of 'pip' module: PyPI Package Manager",
    "title": "Remarks",
    "description": "Sometimes you may need to use pip package manager inside python eg. when some imports may raise ImportError and you want to handle the exception. If you unpack on Windows Python_root/Scripts/pip.exeinside is stored __main__.py file, where main class from pip package is imported. This means pip package is used whenever you use pip executable. For usage of pip as executable see: pip: PyPI Package Manager. Many packages for example on version 3.4 would run on 3.6 just fine, but if there are no distributions for specific platform, they can't be installed, but there is workaround. In .whl files (known as wheels) naming convention decide whether you can install package on specified platform. Eg. scikit_learn‑0.18.1‑cp36‑cp36m‑win_amd64.whl[package_name]-[version]-[python interpreter]-[python-interpreter]-[Operating System].whl. If name of wheel file is changed, so platform does match, pip tries to install package even if platform or python version does not match. Removing platform or interpreter from name will rise an error in newest versoin of pip module kjhfkjdf.whl is not a valid wheel filename.."
  },
  {
    "sub_topic_id": 1077,
    "sub_topic": "User-Defined Methods",
    "title": "Remarks",
    "description": "User-defined method objects may be created when getting an attribute of a class (perhaps via an instance of that class), if that attribute is a user-defined function object, an unbound user-defined method object, or a class method object. When the attribute is a user-defined method object, a new method object is only created if the class from which it is being retrieved is the same as, or a derived class of, the class stored in the original method object; otherwise, the original method object is used as it is."
  },
  {
    "sub_topic_id": 1078,
    "sub_topic": "Using loops within functions",
    "title": "Remarks",
    "description": "In Python function will be returned as soon as execution hits 'return' statement. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1079,
    "sub_topic": "Variable Scope and Binding",
    "title": "Remarks",
    "description": "In Python, variables inside functions are considered local if and only if they appear in the left side of an assignment statement, or some other binding occurrence; otherwise such a binding is looked up in enclosing functions, up to the global scope. This is true even if the assignment statement is never executed. Each statements is a binding occurrence - x become bound to the object denoted by 5. If this statement appears inside a function, then x will be function-local by default. See the 'Syntax' section for a list of binding statements. Classes have a local scope during definition, but functions inside the class do not use that scope when looking up names. Because lambdas are functions, and comprehensions are implemented using function scope, this can lead to some surprising behavior."
  },
  {
    "sub_topic_id": 1080,
    "sub_topic": "virtual environment with virtualenvwrapper",
    "title": "Remarks",
    "description": "Suppose you need to work on three different projects project A, project B and project C. project A and project B need python 3 and some required libraries. But for project C you need python 2.7 and dependent libraries. So best practice for this is to separate those project environments. To create virtual environment you can use below technique: Virtualenv, Virtualenvwrapper and Conda Although we hav several options for virtual environment but virtualenvwrapper is most recommended."
  },
  {
    "sub_topic_id": 1081,
    "sub_topic": "Virtual environments",
    "title": "Remarks",
    "description": "A Virtual Environment is a tool to keep the dependencies required by different projects in separate places, by creating virtual Python environments for them. It solves the “Project X depends on version 1.x but, Project Y needs 4.x” dilemma, and keeps your global site-packages directory clean and manageable. This helps isolate your environments for different projects from each other and from your system libraries. Virtual environments are sufficiently useful that they probably should be used for every project. In particular, virtual environments allow you to: Manage dependencies without requiring root access Install different versions of the same dependency, for instance when working on different projects with varying requirements Work with different python versions"
  },
  {
    "sub_topic_id": 1082,
    "sub_topic": "Web scraping with Python",
    "title": "Remarks",
    "description": "Web scraping is an automated, programmatic process through which data can be constantly 'scraped' off webpages. Also known as screen scraping or web harvesting, web scraping can provide instant data from any publicly accessible webpage. On some websites, web scraping may be illegal. Caching for requests; caching data is very useful. In development, it means you can avoid hitting a site unnecessarily. While running a real collection, it means that if your scraper crashes for some reason (maybe you didn't handle some unusual content on the site...? maybe the site went down...?) you can repeat the collection very quickly from where you left off."
  },
  {
    "sub_topic_id": 1083,
    "sub_topic": "Web Server Gateway Interface (WSGI)",
    "title": "Remarks",
    "description": "Our server object is given an 'application' parameter which can be any callable application object (see other examples). It writes first the headers, then the body of data returned by our application to the system standard output. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1084,
    "sub_topic": "Webbrowser Module",
    "title": "Remarks",
    "description": "According to Python's standard documentation, the webbrowser module provides a high-level interface to allow displaying Web-based documents to users. This topic explains and demonstrates proper usage of the webbrowser module. Syntax: webbrowser.open(url, new=0, autoraise=False) webbrowser.open_new(url) webbrowser.open_new_tab(url) webbrowser.get(usage=None) webbrowser.register(name, constructor, instance=None)"
  },
  {
    "sub_topic_id": 1085,
    "sub_topic": "Websockets",
    "title": "Remarks",
    "description": "The Autobahn package can be used for Python web socket server factories. Python Autobahn package documentation To install, typically one would simply use the terminal command (For Linux): sudo pip install autobahn (For Windows): python -m pip install autobahn. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1086,
    "sub_topic": "Working around the Global Interpreter Lock (GIL)",
    "title": "Remarks",
    "description": "The GIL has been around in CPython since the inception of Python threads, in 1992. It's designed to ensure thread safety of running python code. Python interpreters written with a GIL prevent multiple native threads from executing Python bytecodes at once. This makes it easy for plugins to ensure that their code is thread-safe: simply lock the GIL, and only your active thread is able to run, so your code is automatically thread-safe.Short version: the GIL ensures that no matter how many processors and threads you have, only one thread of a python interpreter will run at one time. This has a lot of ease-of-use benefits, but also has a lot of negative benefits as well. Note that a GIL is not a requirment of the Python language. Consequently, you can't access the GIL directly from standard python code. Not al implementations of Python use a GIL. Interpreters that have a GIL: CPython, PyPy, Cython (but you can disable the GIL with nogil) Interpreters that do not have a GIL: Jython, IronPython. import zipfile class zipfile.ZipFile(file, mode='r', compression=ZIP_STORED, allowZip64=True)"
  },
  {
    "sub_topic_id": 1087,
    "sub_topic": "Working with ZIP archives",
    "title": "Remarks",
    "description": "If you try to open a file that is not a ZIP file, the exception zipfile.BadZipFile is raised. In Python 2.7, this was spelled zipfile.BadZipfile, and this old name is retained alongside the new one in Python 3.2+. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Python (PDF) Language (PDF): https://riptutorial.com/ebook/python."
  },
  {
    "sub_topic_id": 1088,
    "sub_topic": "Writing extensions",
    "title": "Remarks",
    "description": "The following C source file (which we will call hello.c for demonstration purposes) produces an extension module named hello that contains a single function greet(). Pass an open file object from Python to C extension code. You can convert the file to an integer file descriptor using PyObject_AsFileDescriptor function: PyObject *fobj; int fd = PyObject_AsFileDescriptor(fobj); if (fd < 0){ return NULL; } To convert an integer file descriptor back into a python object, use PyFile_FromFd. int fd; /* Existing file descriptor */ PyObject *fobj = PyFile_FromFd(fd, 'filename','r',-1,NULL,NULL,NULL,1);"
  },
  {
    "sub_topic_id": 1089,
    "sub_topic": "Writing to CSV from String or List",
    "title": "Remarks",
    "description": "Writing to a .csv file is not unlike writing to a regular file in most regards, and is fairly straightforward. I will, to the best of my ability, cover the easiest, and most efficient approach to the problem. open( path, 'wb') 'wb' - Write mode. The b parameter in 'wb' we have used, is necessary only if you want to open it in binary mode, which is needed only in some operating systems like Windows. csv.writer ( csv_file, delimiter=',' ) Here the delimiter we have used, is ,, because we want each cell of data in a row, to contain the first name, last name, and age respectively. Since our list is split along the , too, it proves rather convenient for us."
  },
  {
    "sub_topic_id": 1090,
    "sub_topic": "Getting started with R Language",
    "title": "Remarks",
    "description": "Unlike other languages variables in R need not require type declaration. The same variable can be assigned different data types at different instances of time, if required. Indexing of atomic vectors and lists starts from 1, not 0. R arrays (and the special case of matrices) have a dim attribute that sets them apart from R's 'atomic vectors' which have no attributes. A list in R allows you to gather a variety of objects under one name (that is, the name of the list) in an ordered way. These objects can be matrices, vectors, data frames, even other lists, etc. It is not even required that these objects are related to each other in any way."
  },
  {
    "sub_topic_id": 1091,
    "sub_topic": "*apply family of functions (functionals)",
    "title": "Remarks",
    "description": "A function in the *apply family is an abstraction of a for loop. Compared with the for loops *apply functions have the following advantages: Require less code to write. Doesn't have an iteration counter. Doesn't use temporary variables to store intermediate results. However for loops are more general and can give us more control allowing to achieve complex computations that are not always trivial to do using *apply functions. The relationship between for loops and *apply functions is explained in the documentation for for loops."
  },
  {
    "sub_topic_id": 1092,
    "sub_topic": ".Rprofile",
    "title": "Remarks",
    "description": ".Rprofile is a file containing R code that is executed when you launch R from the directory containing the .Rprofile file. The similarly named Rprofile.site, located in R's home directory, is executed by default every time you load R from any directory. Rprofile.site and to a greater extend .Rprofile can be used to initialize an R session with personal preferences and various utility functions that you have defined. Important note: if you use RStudio, you can have a separate .Rprofile in every RStudio project directory."
  },
  {
    "sub_topic_id": 1093,
    "sub_topic": "Aggregating data frames",
    "title": "Remarks",
    "description": "Aggregation is one of the most common uses for R. There are several ways to do so in R, which we will illustrate here. Grouping with the data.table package is done using the syntax dt[i, j, by] Which can be read out loud as: 'Take dt, subset rows using i, then calculate j, grouped by by.' Within the dt statement, multiple calculations or groups should be put in a list. Since an alias for list() is .(), both can be used interchangeably. In the examples below we use .(). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1094,
    "sub_topic": "Analyze tweets with R",
    "title": "Remarks",
    "description": "(Optional) Every topic has a focus. Tell the readers what they will find here and let future contributors know what belongs. The first think you need to do is to download tweets. You need to Setup your tweeter account. Much Information can be found in Internet on how to do it. The following two links were useful for my Setup (last checked in May 2017). Now we need to access the text of the tweets. So we do it in this way (we also need to clean up the tweets from special characters that for now we don't need, like emoticons with the sapply function.)"
  },
  {
    "sub_topic_id": 1095,
    "sub_topic": "ANOVA",
    "title": "Remarks",
    "description": "When dealing with an unbalanced design and/or non-orthogonal contrasts, Type II or Type III Sum of Squares are necessary. The Anova() function from the car package implements these. Type II Sum of Squares assumes no interaction between main effects. If interactions are assumed, Type III Sum of Squares is appropriate. The Anova() function wraps around the lm() function. Using the mtcars data sets as an example, demonstrating the difference between Type II and Type III when an interaction is tested."
  },
  {
    "sub_topic_id": 1096,
    "sub_topic": "Arima Models",
    "title": "Remarks",
    "description": "The Arima function in the forecast package is more explicit in how it deals with constants, which may make it easier for some users relative to the arima function in base R. ARIMA is a general framework for modeling and making predictions from time series data using (primarily) the series itself. The purpose of the framework is to differentiate short- and long-term dynamics in a series to improve the accuracy and certainty of forecasts. More poetically, ARIMA models provide a method for describing how shocks to a system transmit through time. From an econometric perspective, ARIMA elements are necessary to correct serial correlation and ensure stationarity."
  },
  {
    "sub_topic_id": 1097,
    "sub_topic": "Arithmetic Operators",
    "title": "Remarks",
    "description": "Nearly all operators in R are really functions. For example, + is a function defined as function (e1, e2) .Primitive(\"+\") where e1 is the left-hand side of the operator and e2 is the right-hand side of the operator. This means it is possible to accomplish rather counterintuitive effects by masking the + in base with a user defined function. For example: `+` <- function(e1, e2) {e1-e2} > 3+10 [1] -7. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1098,
    "sub_topic": "Bar Chart",
    "title": "Remarks",
    "description": "The purpose of the bar plot is to display the frequencies (or proportions) of levels of a factor variable. For example, a bar plot is used to pictorially display the frequencies (or proportions) of individuals in various socio-economic (factor) groups(levels-high, middle, low). Such a plot will help to provide a visual comparison among the various factor levels. In barplot, factor-levels are placed on the x-axis and frequencies (or proportions) of various factor-levels are considered on the y-axis. For each factor-level one bar of uniform width with heights being proportional to factor level frequency (or proportion) is constructed. The barplot() function is in the graphics package of the R's System Library. The barplot() function must be supplied at least one argument. The R help calls this as heights, which must be either vector or a matrix. If it is vector, its members are the various factor-levels."
  },
  {
    "sub_topic_id": 1099,
    "sub_topic": "Base Plotting",
    "title": "Remarks",
    "description": "The items listed in the \"Parameters\" section is a small fraction of hte possible parameters that can be modified or set by the par function. See par for a more complete list. In addition all the graphics devices, including the system specific interactive graphics devices will have a set of parameters that can customize the output. A basic plot is created by calling plot(). Here we use the built-in cars data frame that contains the speed of cars and the distances taken to stop in the 1920s. (To find out more about the dataset, use help(cars))."
  },
  {
    "sub_topic_id": 1100,
    "sub_topic": "Bibliography in RMD",
    "title": "Remarks",
    "description": "The purpose of this documentation is integrating an academic bibliography in a RMD file. To use the documentation given above, you have to install rmarkdown in R via install.packages('rmarkdown'). Sometimes Rmarkdown removes the hyperlinks of the citations. The solution for this is adding the following code to your YAML header: link-citations: true. The most important part of your RMD file is the YAML header. For writing an academic paper, I suggest to use PDF output, numbered sections and a table of content (toc). By default, pandoc will use a Chicago author-date format for citations and references. To use another style, you will need to specify a CSL 1.0 style file in the csl metadata field. In the following a often used citation style, the elsevier style, is presented (download at https://github.com/citation-style-language/styles ). The style-file has to be stored in the same directory as the RMD file OR the absolute path to the file has to be submitted."
  },
  {
    "sub_topic_id": 1101,
    "sub_topic": "boxplot",
    "title": "Remarks",
    "description": "boxplot(x, ...) # generic function boxplot(formula, data = NULL, ..., subset, na.action = NULL) ## S3 method for class 'formula' boxplot(x, ..., range = 1.5, width = NULL, varwidth = FALSE, notch = FALSE, outline = TRUE, names, plot = TRUE, border = par('fg'), col = NULL, log = \"\", pars = list(boxwex = 0.8, staplewex = 0.5, outwex = 0.5), horizontal = FALSE, add = FALSE, at = NULL) ## Default S3 method. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1102,
    "sub_topic": "caret",
    "title": "Remarks",
    "description": "caret is an R package that aids in data processing needed for machine learning problems. It stands for classification and regression training. When building models for a real dataset, there are some tasks other than the actual learning algorithm that need to be performed, such as cleaning the data, dealing with incomplete observations, validating our model on a test set, and compare different models. caret helps in these scenarios, independent of the actual learning algorithms used."
  },
  {
    "sub_topic_id": 1103,
    "sub_topic": "Classes",
    "title": "Remarks",
    "description": "The class of a data-object determines which functions will process its contents. The class-attribute is a character vector, and objects can have zero, one or more classes. If there is no class-attribute, there will still be an implicit class determined by an object's mode. The class can be inspected with the function class and it can be set or modified by the class<- function. The S3 class system was established early in S's history. The more complex S4 class system was established later. There are several functions for inspecting the 'type' of an object. The most useful such function is class, although sometimes it is necessary to examine the mode of an object. Since we are discussing 'types', one might think that typeof would be useful, but generally the result from mode will be more useful, because objects with no explicit 'class'-attribute will have function dispatch determined by the 'implicit class' determined by their mode."
  },
  {
    "sub_topic_id": 1104,
    "sub_topic": "Cleaning data",
    "title": "Remarks",
    "description": "Cleaning data in R is paramount to make any analysis. whatever data you have, be it from measurements taken in the field or scraped from the web it is most probable that you will have to reshape it, transform it or filter it to make it suitable for your analysis. In this documentation, we will cover the following topics: - Removing observations with missing data - Factorizing data - Removing incomplete Rows"
  },
  {
    "sub_topic_id": 1105,
    "sub_topic": "Code profiling",
    "title": "Remarks",
    "description": "You can use the microbenchmark package to conduct 'sub-millisecond accurate timing of expression evaluation'. In this example we are comparing the speeds of six equivalent data.table expressions for updating elements in a group, based on a certain condition. More specifically: A data.table with 3 columns: id, time and status. For each id, I want to find the record with the maximum time - then if for that record if the status is true, I want to set it to false if the time is > 7. One package for line profiling is lineprof which is written and maintained by Hadley Wickham. Here is a quick demonstration of how it works with auto.arima in the forecast package."
  },
  {
    "sub_topic_id": 1106,
    "sub_topic": "Coercion",
    "title": "Remarks",
    "description": "Coercion happens in R when the type of objects are changed during computation either implicitly or by using functions for explicit coercion (such as as.numeric, as.data.frame, etc.). Coercion happens with data types in R, often implicitly, so that the data can accommodate all the values. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1107,
    "sub_topic": "Color schemes for graphics",
    "title": "Remarks",
    "description": "Viridis (named after the chromis viridis fish) is a recently developed color scheme for the Python library matplotlib (the video presentation by the link explains how the color scheme was developed and what are its main advantages). It is seamlessly ported to R. There are 4 variants of color schemes: magma, plasma, inferno, and viridis (default). They are chosen with the option parameter and are coded as A, B, C, and D, correspondingly. To have an impression of the 4 color schemes."
  },
  {
    "sub_topic_id": 1108,
    "sub_topic": "Column wise operation",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1109,
    "sub_topic": "Combinatorics",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1110,
    "sub_topic": "Control flow structures",
    "title": "Remarks",
    "description": "For loops are a flow control method for repeating a task or set of tasks over a domain. The core structure of a for loop is for ( [index] in [domain]){ [body] } Where [index] is a name takes exactly one value of [domain] over each iteration of the loop. [domain] is a vector of values over which to iterate. [body] is the set of instructions to apply on each iteration. As a trivial example, consider the use of a for loop to obtain the cumulative sum of a vector of values."
  },
  {
    "sub_topic_id": 1111,
    "sub_topic": "Creating packages with devtools",
    "title": "Remarks",
    "description": "This topic will cover the creation of R packages from scratch with the devtools package. This is a compact guide about how to quickly create an R package from your code. Exhaustive documentations will be linked when available and should be read if you want a deeper knowledge of the situation. See Remarks for more resources. The directory where your code stands will be refered as ./, and all the commands are meant to be executed from a R prompt in this folder. Assuming that your code is written for instance in files ./script1.R and ./script2.R, launch the following command in order to create the file tree of your package: package.skeleton(name=MyPackage, code_files=c(script1.,script2.R)) Then delete all the files in ./MyPackage/man/. You have now to compile the documentation: roxygenize('MyPackage')"
  },
  {
    "sub_topic_id": 1112,
    "sub_topic": "Creating reports with RMarkdown",
    "title": "Remarks",
    "description": "A bibtex catalogue cna easily be included with the YAML option bibliography:. A certain style for the bibliography can be added with biblio-style:. The references are added at the end of the document. There are two possible ways of including LaTeX preamble commands (e.g. \\usepackage) in a RMarkdown document. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1113,
    "sub_topic": "Creating vectors",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1114,
    "sub_topic": "Data acquisition",
    "title": "Remarks",
    "description": "Get data directly into an R session. One of the nice features of R is the ease of data acquisition. There are several ways data dissemination using R packages. Rhas a vast collection of built-in datasets. Usually, they are used for teaching purposes to create quick and easily reproducible examples. There is a nice web-page listing the built-in datasets: https://vincentarelbundock.github.io/Rdatasets/datasets.html. There are packages that include data or are created specifically to disseminate datasets. When such a package is loaded (library(pkg)), the attached datasets become available either as R objects; or they need to be called with the data() function."
  },
  {
    "sub_topic_id": 1115,
    "sub_topic": "Data frames",
    "title": "Remarks",
    "description": "Syntax: data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE, stringsAsFactors = default.stringsAsFactors()) as.data.frame(x, row.names = NULL, optional = FALSE, ...) # generic function as.data.frame(x, ..., stringsAsFactors = default.stringsAsFactors()) # S3 method for class 'character' as.data.frame(x, row.names = NULL, optional = FALSE, ..., stringsAsFactors = default.stringsAsFactors()) # S3 method for class 'matrix' is.data.frame(x)"
  },
  {
    "sub_topic_id": 1116,
    "sub_topic": "data.table",
    "title": "Remarks",
    "description": "Data.table is a package that extends the functionality of data frames from base R, particularly improving on their performance and syntax. See the package's Docs area at Getting started with data.table for details. DT[where, select|update|do, by] syntax is used to work with columns of a data.table. The 'where' part is the i argument The 'select|update|do' part is the j argument These two arguments are usually passed by position instead of by name. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1117,
    "sub_topic": "Date and Time",
    "title": "Remarks",
    "description": "R comes with classes for dates, date-times and time differences; see ?Dates, ?DateTimeClasses, ?difftime and follow the \"See Also\" section of those docs for further documentation. Related Docs: Dates and Date-Time Classes. A date-time class, POSIXct stores time as seconds since UNIX epoch on 1970-01-01 00:00:00 UTC. It is the format returned when pulling the current time with Sys.Time(). POSIXlt A date-time class, stores a list of day, month, year, hour, minute, second, and so on. This is the format returned by strptime. Date The only date class, stores the date as a floating-point number."
  },
  {
    "sub_topic_id": 1118,
    "sub_topic": "Date-time classes (POSIXct and POSIXlt)",
    "title": "Remarks",
    "description": "R includes two date-time classes -- POSIXct and POSIXlt -- see ?DateTimeClasses. With POSIXct, midnight will display only the date and time zone, though the full time is still stored. The functions for parsing a string into POSIXct and POSIXlt take similar parameters and return a similar-looking result, but there are differences in how that date-time is stored; see 'Remarks.' This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1119,
    "sub_topic": "Debugging",
    "title": "Remarks",
    "description": "The browser function can be used like a breakpoint: code execution will pause at the point it is called. Then user can then inspect variable values, execute arbitrary R code and step through the code line by line. Once browser() is hit in the code the interactive interpreter will start. Any R code can be run as normal, and in addition the following commands are present. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1120,
    "sub_topic": "Distribution Functions",
    "title": "Remarks",
    "description": "R has many built-in functions to work with probability distributions, with official docs starting at ?Distributions. There are generally four prefixes: d-The density function for the given distribution p-The cumulative distribution function q-Get the quantile associated with the given probability r-Get a random sample For the distributions built into R's base installation, see ?Distributions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1121,
    "sub_topic": "dplyr",
    "title": "Remarks",
    "description": "dplyr is an iteration of plyr that provides a flexible \"verb\" based functions to manipulate data in R. The latest version of dplyr can be downloaded from CRAN using install.package('dplyr') The key object in dplyr is a tbl, a representation of a tabular data structure. Currently dplyr (version 0.5.0) supports: data frames data tables SQLite PostgreSQL/Redshift MySQL/MariaDB Bigquery MonetDB data cubes with arrays (partial implementation). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1122,
    "sub_topic": "Expression: parse + eval",
    "title": "Remarks",
    "description": "The function parse convert text and files into expressions. The function eval evaluate expressions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1123,
    "sub_topic": "Extracting and Listing Files in Compressed Archives",
    "title": "Remarks",
    "description": "With a simple for loop, all zip archives in a directory can be extracted. for (i in dir(pattern='.zip$')) unzip(i) The dir function produces a character vector of the names of the files in a directory matching the regex pattern specified by pattern. This vector is looped through with index i, using the unzip function to extract each zip archive. Extracting files from a tar archive is done with untar function from the utils package (which is included in base R). untar(tarfile = 'bar.tar', exdir = './foo') This will extract all files in 'bar.tar' to the 'foo' directory, which will be created if necessary. Tilde expansion is done automatically from your working directory. Alternatively, you can pass the whole path name to the tarfile."
  },
  {
    "sub_topic_id": 1124,
    "sub_topic": "Factors",
    "title": "Remarks",
    "description": "An object with class factor is a vector with a particular set of characteristics. It is stored internally as an integer vector. It maintains a levels attribute the shows the character representation of the values. Its class is stored as factor To illustrate, let us generate a vector of 1,000 observations from a set of colors. set.seed(1) Color <- sample(x = c('Red', 'Blue', 'Green', 'Yellow'),  size = 1000,  replace = TRUE) Color <- factor(Color) We can observe each of the characteristics of Color listed above: #* 1. It is stored internally as an `integer` vector typeof(Color) [1] 'integer' #* 2. It maintains a `levels` attribute the shows the character representation of the values. #* 3. Its class is stored as `factor` attributes(Color)"
  },
  {
    "sub_topic_id": 1125,
    "sub_topic": "Fault-tolerant/resilient code",
    "title": "Remarks",
    "description": "tryCatch returns the value associated to executing expr unless there's a condition: a warning or an error. If that's the case, specific return values (e.g. return(NA) above) can be specified by supplying a handler function for the respective conditions (see arguments warning and error in ?tryCatch). These can be functions that already exist, but you can also define them within tryCatch (as we did above). As we've specified that NA should be returned in case of an error in the 'try part', the third element in y is NA. If we'd have chosen NULL to be the return value, the length of y would just have been 2 instead of 3 as lapply will simply 'ignore/drop' return values that are NULL. Also note that if you don't specify an explicit return value via return, the handler functions will return NULL (i.e. in case of an error or a warning condition)."
  },
  {
    "sub_topic_id": 1126,
    "sub_topic": "Feature Selection in R -- Removing Extraneous Features",
    "title": "Remarks",
    "description": "DESC"
  },
  {
    "sub_topic_id": 1127,
    "sub_topic": "Formula",
    "title": "Remarks",
    "description": "Closely correlated features may add variance to your model, and removing one of a correlated pair might help reduce that. I'll want to look at what MPG is correlated to so strongly, and decide what to keep and what to toss. Same for cyl and disp. Alternatively, I might need to combine some strongly correlated features. nearZeroVar diagnoses predictors that have one unique value (i.e. are zero variance predictors) or predictors that are have both of the following characteristics: they have very few unique values relative to the number of samples and the ratio of the frequency of the most common value to the frequency of the second most common value is large.."
  },
  {
    "sub_topic_id": 1128,
    "sub_topic": "Fourier Series and Transformations",
    "title": "Remarks",
    "description": "The Fourier transform decomposes a function of time (a signal) into the frequencies that make it up, similarly to how a musical chord can be expressed as the amplitude (or loudness) of its constituent notes. The Fourier transform of a function of time itself is a complex-valued function of frequency, whose absolute value represents the amount of that frequency present in the original function, and whose complex argument is the phase offset of the basic sinusoid in that frequency. The Fourier transform is called the frequency domain representation of the original signal. The term Fourier transform refers to both the frequency domain representation and the mathematical operation that associates the frequency domain representation to a function of time. The Fourier transform is not limited to functions of time, but in order to have a unified language, the domain of the original function is commonly referred to as the time domain. For many functions of practical interest one can define an operation that reverses this: the inverse Fourier transformation, also called Fourier synthesis, of a frequency domain representation combines the contributions of all the different frequencies to recover the original function of time."
  },
  {
    "sub_topic_id": 1129,
    "sub_topic": "Functional programming",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1130,
    "sub_topic": "Generalized linear models",
    "title": "Remarks",
    "description": "Logistic regression is a particular case of the generalized linear model, used to model dichotomous outcomes (probit and complementary log-log models are closely related). The name comes from the link function used, the logit or log-odds function. The inverse function of the logit is called the logistic function and is given by: \\sigma(t)=\frac{e^t}{e^t+1} = \frac{1}{1+e^{-t}} This function takes a value between ]-Inf;+Inf[ and returns a value between 0 and 1; i.e the logistic function takes a linear predictor and returns a probability. Logistic regression can be performed using the glm function with the option family = binomial (shortcut for family = binomial(link='logit'); the logit being the default link function for the binomial family)."
  },
  {
    "sub_topic_id": 1131,
    "sub_topic": "Get user input",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1132,
    "sub_topic": "ggplot2",
    "title": "Remarks",
    "description": "ggplot2 has its own perfect reference website http://ggplot2.tidyverse.org/. Most of the time, it is more convenient to adapt the structure or content of the plotted data (e.g. a data.frame) than adjusting things within the plot afterwards. RStudio publishes a very helpful 'Data Visualization with ggplot2' cheatsheet that can be found here."
  },
  {
    "sub_topic_id": 1133,
    "sub_topic": "GPU-accelerated computing",
    "title": "Remarks",
    "description": "GPU computing requires a 'platform' which can connect to and utilize the hardware. The two primary low-level languages that accomplish this are CUDA and OpenCL. The former requires installation of the proprietary NVIDIA CUDA Toolkit and is only applicable on NVIDIA GPUs. The latter is both company (e.g. NVIDIA, AMD, Intel) and hardware independent (CPU or GPU) but requires the installation of an SDK (software development kit). In order to use a GPU via R you will need to install one of these pieces of software first."
  },
  {
    "sub_topic_id": 1134,
    "sub_topic": "Hashmaps",
    "title": "Remarks",
    "description": "Although R does not provide a native hash table structure, similar functionality can be achieved by leveraging the fact that the environment object returned from new.env (by default) provides hashed key lookups. The following two statements are equivalent, as the hash parameter defaults to TRUE: H <- new.env(hash = TRUE) H <- new.env()  Additionally, one may specify that the internal hash table is pre-allocated with a particular size via the size parameter, which has a default value of 29. Like all other R objects, environments manage their own memory and will grow in capacity as needed, so while it is not necessary to request a non-default value for size, there may be a slight performance advantage in doing so if the object will (eventually) contain a very large number of elements. "
  },
  {
    "sub_topic_id": 1135,
    "sub_topic": "heatmap and heatmap.2",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1136,
    "sub_topic": "Hierarchical clustering with hclust",
    "title": "Remarks",
    "description": "The stats package provides the hclust function to perform hierarchical clustering. Besides hclust, other methods are available, see the CRAN Package View on Clustering. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1137,
    "sub_topic": "Hierarchical Linear Modeling",
    "title": "Remarks",
    "description": "@DataTx states that this is 'completely unclear, incomplete, or has severe formatting problems'. Since I don't see any big formatting problems (:-) ), a little bit more guidance about what's expected here for improving clarity or completeness, and why what's here is unsalvageable, would be useful. The primary packages for fitting hierarchical (alternatively 'mixed' or 'multilevel') linear models in R are nlme (older) and lme4 (newer). These packages differ in many minor ways but should generally result in very similar fitted models."
  },
  {
    "sub_topic_id": 1138,
    "sub_topic": "I/O for database tables",
    "title": "Remarks",
    "description": "Using the package RMySQL we can easily query MySQL as well as MariaDB databases and store the result in an R dataframe: library(RMySQL) mydb <- dbConnect(MySQL(), user='user', password='password', dbname='dbname',host='127.0.0.1') queryString <- 'SELECT * FROM table1 t1 JOIN table2 t2 on t1.id=t2.id' query <- dbSendQuery(mydb, queryString) data <- fetch(query, n=-1) # n=-1 to return all results. It is also possible to define a limit, e.g. getting only the first 100,000 rows. In order to do so, just change the SQL query regarding the desired limit. The mentioned package will consider these options. Example: queryString <- 'SELECT * FROM table1 limit 100000'."
  },
  {
    "sub_topic_id": 1139,
    "sub_topic": "I/O for foreign tables (Excel, SAS, SPSS, Stata)",
    "title": "Remarks",
    "description": "Feather is an implementation of Apache Arrow designed to store data frames in a language agnostic manner while maintaining metadata (e.g. date classes), increasing interoperability between Python and R. Reading a feather file will produce a tibble, not a standard data.frame. The current documentation contains this warning: Note to users: Feather should be treated as alpha software. In particular, the file format is likely to evolve over the coming year. Do not use Feather for long-term data storage."
  },
  {
    "sub_topic_id": 1140,
    "sub_topic": "I/O for geographic data (shapefiles, etc.)",
    "title": "Remarks",
    "description": "With the rgdal package it is possible to import and export shapfiles with R. The function readOGR can be used to imports shapfiles. If you want to import a file from e.g. ArcGIS the first argument dsn is the path to the folder which contains the shapefile. layer is the name of the shapefile without the file ending (just map and not map.shp). library(rgdal) readOGR(dsn = 'path\\to\\the\\folder\\containing\\the\\shapefile', layer = 'map') To export a shapefile use thewriteOGR function. The first argument is the spatial object produced in R. dsn and layer are the same as above. The obligatory 4. argument is the driver used to generate the shapefile. The function ogrDrivers() lists all available drivers. If you want to export a shapfile to ArcGis or QGis you could use driver = 'ESRI Shapefile'."
  },
  {
    "sub_topic_id": 1141,
    "sub_topic": "I/O for raster images",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1142,
    "sub_topic": "I/O for R's binary format",
    "title": "Remarks",
    "description": ".rds and .Rdata (also known as .rda) files can be used to store R objects in a format native to R. There are multiple advantages of saving this way when contrasted with non-native storage approaches, e.g. write.table: It is faster to restore the data to R It keeps R specific information encoded in the data (e.g., attributes, variable types, etc). saveRDS/readRDS only handle a single R object. However, they are more flexible than the multi-object storage approach in that the object name of the restored object need not be the same as the object name when the object was stored."
  },
  {
    "sub_topic_id": 1143,
    "sub_topic": "Implement State Machine Pattern using S4 Class",
    "title": "Remarks",
    "description": "Finite States Machine concepts are usually implemented under Object Oriented Programming (OOP) languages, for example using Java language, based on the State pattern defined in GOF (refers to the book: 'Design Patterns'). R provides several mechanisms to simulate the OO paradigm, let's apply S4 Object System for implementing this pattern."
  },
  {
    "sub_topic_id": 1144,
    "sub_topic": "Input and output",
    "title": "Remarks",
    "description": "To construct file paths, for reading or writing, use file.path. Use dir to see what files are in a directory. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1145,
    "sub_topic": "Inspecting packages",
    "title": "Remarks",
    "description": "Packages build on base R. This document explains how to inspect installed packages and their functionality. Related Docs: Installing packages. The Comprehensive R Archive Network (CRAN) is the primary package repository. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1146,
    "sub_topic": "Installing packages",
    "title": "Remarks",
    "description": "install.packages(pkgs, lib, repos, method, destdir, dependencies, ...). Packages are collections of R functions, data, and compiled code in a well-defined format. Public (and private) repositories are used to host collections of R packages. The largest collection of R packages is available from CRAN. A package can be installed from CRAN using following code: install.packages('dplyr') Where 'dplyr' is referred to as a character vector. More than one packages can be installed in one go by using the combine function c() and passing a series of character vector of package names: install.packages(c('dply', 'tidyr', 'ggplot2')) In some cases, install.packages may prompt for a CRAN mirror or fail, depending on the value of getOption('repos'). To prevent this, specify a CRAN mirror as repos argument: install.packages('dplyr', repos = 'https://cloud.r-project.org/') Using the repos argument it is also possible to install from other repositories. For complete information about all the available options, run ?install.packages."
  },
  {
    "sub_topic_id": 1147,
    "sub_topic": "Introduction to Geographical Maps",
    "title": "Remarks",
    "description": "A common question is how to juxtapose (combine) physically separate geographical regions on the same map, such as in the case of a choropleth describing all 50 American states (The mainland with Alaska and Hawaii juxtaposed). Creating an attractive 50 state map is simple when leveraging Google Maps. Interfaces to Google's API include the packages googleVis, ggmap, and RgoogleMaps. The function map() from the package maps provides a simple starting point for creating maps with R."
  },
  {
    "sub_topic_id": 1148,
    "sub_topic": "Introspection",
    "title": "Remarks",
    "description": "Often in R you'll want to know things about an object or variable you're working with. This can be useful when reading someone else's code or even your own, especially when using packages that are new to you. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1149,
    "sub_topic": "JSON",
    "title": "Remarks",
    "description": "The jsonlite package is a fast JSON parser and generator optimized for statistical data and the web. The two main functions used to read and write JSON are fromJSON() and toJSON() respecitively, and are designed to work with vectors, matrices and data.frames, and streams of JSON from the web. Create a JSON array from a vector, and vice versa. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1150,
    "sub_topic": "Linear Models (Regression)",
    "title": "Remarks",
    "description": "Sometimes when working with linear regression we need to check for non-linearity in the data. One way to do this is to fit a polynomial model and check whether it fits the data better than a linear model. There are other reasons, such as theoretical, that indicate to fit a quadratic or higher order model because it is believed that the variables relationship is inherently polynomial in nature. Let's fit a quadratic model for the mtcars dataset. For a linear model see Linear regression on the mtcars dataset. First we make a scatter plot of the variables mpg (Miles/gallon), disp (Displacement (cu.in.)), and wt (Weight (1000 lbs)). The relationship among mpg and disp appears non-linear."
  },
  {
    "sub_topic_id": 1151,
    "sub_topic": "Lists",
    "title": "Remarks",
    "description": "Lists allow users to store multiple elements (like vectors and matrices) under a single object. You can use the list function to create a list: l1 <- list(c(1, 2, 3), c('a', 'b', 'c')) l1 ## [[1]] ## [1] 1 2 3 ##  ## [[2]] ## [1] 'a' 'b' 'c' Notice the vectors that make up the above list are different classes. Lists allow users to group elements of different classes. Each element in a list can also have a name. List names are accessed by the names function, and are assigned in the same manner row and column names are assigned in a matrix."
  },
  {
    "sub_topic_id": 1152,
    "sub_topic": "lubridate",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1153,
    "sub_topic": "Machine learning",
    "title": "Remarks",
    "description": "One example of machine learning algorithms is the Random Forest alogrithm (Breiman, L. (2001). Random Forests. Machine Learning 45(5), p. 5-32). This algorithm is implemented in R according to Breiman's original Fortran implementation in the randomForest package. Random Forest classifier objects can be created in R by preparing the class variable as factor, which is already apparent in the iris data set. "
  },
  {
    "sub_topic_id": 1154,
    "sub_topic": "Matrices",
    "title": "Remarks",
    "description": "Under the hood, a matrix is a special kind of vector with two dimensions. Like a vector, a matrix can only have one data class. You can create matrices using the matrix function as shown below. matrix(data = 1:6, nrow = 2, ncol = 3) ##      [,1] [,2] [,3] ## [1,]    1    3    5 ## [2,]    2    4    6 As you can see this gives us a matrix of all numbers from 1 to 6 with two rows and three columns. The data parameter takes a vector of values, nrow specifies the number of rows in the matrix, and ncol specifies the number of columns. By convention the matrix is filled by column. The default behavior can be changed with the byrow parameter"
  },
  {
    "sub_topic_id": 1155,
    "sub_topic": "Meta: Documentation Guidelines",
    "title": "Remarks",
    "description": "Most of the guidance for creating good examples for Q&A carries over into the documentation. Make it minimal and get to the point. Complications and digressions are counterproductive. Include both working code and prose explaining it. Neither one is sufficient on its own. Don't rely on external sources for data. Generate data or use the datasets library if possible: library(help = 'datasets') There are some additional considerations in the context of Docs: Refer to built-in docs like ?data.frame whenever relevant. The SO Docs are not an attempt to replace the built-in docs. It is important to make sure new R users know that the built-in docs exist as well as how to find them."
  },
  {
    "sub_topic_id": 1156,
    "sub_topic": "Missing values",
    "title": "Remarks",
    "description": "DWhen we don't know the value a variable takes, we say its value is missing, indicated by NA.ESC. Missing values are represented by the symbol NA (not available). Impossible values (e.g., as a result of sqrt(-1)) are represented by the symbol NaN (not a number). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1157,
    "sub_topic": "Modifying strings by substitution",
    "title": "Remarks",
    "description": "sub and gsub are used to edit strings using patterns. See Pattern Matching and Replacement for more on related functions and Regular Expressions for how to build a pattern. If you want to change the order of a character strings you can use parentheses in the pattern to group parts of the string together. These groups can in the replacement argument be addresed using consecutive numbers. The following example shows how you can reorder a vector of names of the form 'surname, forename' into a vector of the form 'forename surname'."
  },
  {
    "sub_topic_id": 1158,
    "sub_topic": "Natural language processing",
    "title": "Remarks",
    "description": "Natural language processing (NLP) is the field of computer sciences focused on retrieving information from textual input generated by human beings. The simplest approach to the problem (and the most commonly used so far) is to split sentences into tokens. Simplifying, words have abstract and subjective meanings to the people using and receiving them, tokens have an objective interpretation: an ordered sequence of characters (or bytes). Once sentences are split, the order of the token is disregarded. This approach to the problem in known as bag of words model. A term frequency is a dictionary, in which to each token is assigned a weight. In the first example, we construct a term frequency matrix from a corpus corpus (a collection of documents) with the R package tm."
  },
  {
    "sub_topic_id": 1159,
    "sub_topic": "Network analysis with the igraph package",
    "title": "Remarks",
    "description": "The igraph package for R is a wonderful tool that can be used to model networks, both real and virtual, with simplicity. This example is meant to demonstrate how to create two simple network graphs using the igraph package within R v.3.2.3. Non-Directed Network The network is created with this piece of code: g<-graph.formula(Node1-Node2, Node1-Node3, Node4-Node1) plot(g)"
  },
  {
    "sub_topic_id": 1160,
    "sub_topic": "Non-standard evaluation and standard evaluation",
    "title": "Remarks",
    "description": "Dplyr and many modern libraries in R use non-standard evaluation (NSE) for interactive programming and standard evaluation (SE) for programming1. For instance, the summarise() function use non-standard evaluation but relies on the summarise_() which uses standard evaluation. The lazyeval library makes it easy to turn standard evaluation function into NSE functions."
  },
  {
    "sub_topic_id": 1161,
    "sub_topic": "Numeric classes and storage modes",
    "title": "Remarks",
    "description": "Numeric represents integers and doubles and is the default mode assigned to vectors of numbers. The function is.numeric() will evaluate whether a vector is numeric. It is important to note that although integers and doubles will pass is.numeric(), the function as.numeric() will always attempt to convert to type double. Doubles are R's default numeric value. They are double precision vectors, meaning that they take up 8 bytes of memory for each value in the vector. R has no single precision data type and so all real numbers are stored in the double precision format. Integers are whole numbers that can be written without a fractional component. Integers are represented by a number with an L after it. Any number without an L after it will be considered a double."
  },
  {
    "sub_topic_id": 1162,
    "sub_topic": "Object-Oriented Programming in R",
    "title": "Remarks",
    "description": "This documentation page describes the four object systems in R and their high-level similarities and differences. Greater detail on each individual system can be found on its own topic page. The four systems are: S3, S4, Reference Classes, and S6. The S3 object system is a very simple OO system in R. Every object has an S3 class. It can be get (got?) with the function class. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1163,
    "sub_topic": "Parallel processing",
    "title": "Remarks",
    "description": "Parallelization on remote machines require libraries to be downloaded on each machine. Prefer package::function() calls. Several packages have parallelization natively built-in, including caret, pls and plyr. Microsoft R Open (Revolution R) also uses multi-threaded BLAS/LAPACK libraries which intrinsically parallelizes many common functions."
  },
  {
    "sub_topic_id": 1164,
    "sub_topic": "Pattern Matching and Replacement",
    "title": "Remarks",
    "description": "This topic covers matching string patterns, as well as extracting or replacing them. For details on defining complicated patterns see Regular Expressions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1165,
    "sub_topic": "Performing a Permutation Test",
    "title": "Remarks",
    "description": "We will use the built in tooth growth dataset. We are interested in whether there is a statistically significant difference in tooth growth when the guinea pigs are given vitamin C vs orange juice. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1166,
    "sub_topic": "Pipe operators (%>% and others)",
    "title": "Remarks",
    "description": "Pipe operators, available in magrittr, dplyr, and other R packages, process a data-object using a sequence of operations by passing the result of one step as input for the next step using infix-operators rather than the more typical R method of nested function calls. Note that the intended aim of pipe operators is to increase human readability of written code. See Remarks section for performance considerations."
  },
  {
    "sub_topic_id": 1167,
    "sub_topic": "Pivot and unpivot with data.table",
    "title": "Remarks",
    "description": "Much of what goes into conditioning data to build models or visualizations can be accomplished with data.table. As compare to other options, data.table offers advantages of speed and flexibility. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1168,
    "sub_topic": "Probability Distributions with R",
    "title": "Remarks",
    "description": "PMF FOR THE BINOMIAL DISTRIBUTION Suppose that a fair die is rolled 10 times. What is the probability of throwing exactly two sixes? You can answer the question using the dbinom function: > dbinom(2, 10, 1/6) [1] 0.29071 PMF FOR THE POISSON DISTRIBUTION The number of sandwhich ordered in a restaurant on a given day is known to follow a Poisson distribution with a mean of 20. What is the proba bility that exactly eighteen sandwhich will be ordered tomorrow?  You can answer the question with the dpois function: > dpois(18, 20) [1] 0.08439355 PDF FOR THE NORMAL DISTRIBUTION To find the value of the pdf at x=2.5 for a normal distribution with a mean of 5 and a standard deviation of 2, use the command: > dnorm(2.5, mean=5, sd=2) [1] 0.09132454"
  },
  {
    "sub_topic_id": 1169,
    "sub_topic": "Publishing",
    "title": "Remarks",
    "description": "There are many ways of formatting R code, tables and graphs for publishing. R users often want to publish analysis and results in a reproducible way. See Reproducible R for details. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1170,
    "sub_topic": "R code vectorization best practices",
    "title": "Remarks",
    "description": "The key in vectorizing R code, is to reduce or eliminate 'by row operations' or method dispatching of R functions. That means that when approaching a problem that at first glance requires 'by row operations', such as calculating the means of each row, one needs to ask themselves: What are the classes of the data sets I'm dealing with? Is there an existing compiled code that can achieve this without the need of repetitive evaluation of R functions? If not, can I do these operation by columns instead by row? Finally, is it worth spending a lot of time on developing complicated vectorized code instead of just running a simple apply loop? In other words, is the data big/sophisticated enough that R can't handle it efficiently using a simple loop? Putting aside the memory pre-allocation issue and growing object in loops, we will focus in this example on how to possibly avoid apply loops, method dispatching or re-evaluating R functions within loops."
  },
  {
    "sub_topic_id": 1171,
    "sub_topic": "R in LaTeX with knitr",
    "title": "Remarks",
    "description": "Knitr is a tool that allows us to interweave natural language (in the form of LaTeX) and source code (in the form of R). In general, the concept of interspersing natural language and source code is called literate programming. Since knitr files contain a mixture of LaTeX (traditionally housed in .tex files) and R (traditionally housed in .R files) a new file extension called R noweb (.Rnw) is required. .Rnw files contain a mixture of LaTeX and R code. Knitr allows for the generation of statistical reports in PDF format and is a key tool for achieving reproducable research. Compiling .Rnw files to a PDF is a two step process. First, we need to know how to execute the R code and capture the output in a format that a LaTeX compiler can understand (a process called 'kniting'). We do this using the knitr package."
  },
  {
    "sub_topic_id": 1172,
    "sub_topic": "R Markdown Notebooks (from RStudio)",
    "title": "Remarks",
    "description": "An R Notebook is an R Markdown document with chunks that can be executed independently and interactively, with output visible immediately beneath the input. They are similar to R Markdown documents with the exception of results being displayed in the R Notebook creation/edit mode rather than in the rendered output. Note: R Notebooks are new feature of RStudio and are only available in version 1.0 or higher of RStudio."
  },
  {
    "sub_topic_id": 1173,
    "sub_topic": "R memento by examples",
    "title": "Remarks",
    "description": "This topic is meant to be a memento about the R language without any text, with self-explanatory examples. Each example is meant to be as succint as possible. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1174,
    "sub_topic": "Random Forest Algorithm",
    "title": "Remarks",
    "description": "RandomForest is an ensemble method for classification or regression that reduces the chance of overfitting the data. Details of the method can be found in the Wikipedia article on Random Forests. The main implementation for R is in the randomForest package, but there are other implementations. See the CRAN view on Machine Learning. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1175,
    "sub_topic": "Random Numbers Generator",
    "title": "Remarks",
    "description": "When expecting someone to reproduce an R code that has random elements in it, the set.seed() function becomes very handy. For example, these two lines will always produce different output (because that is the whole point of random number generators): > sample(1:10,5) [1]  6  9  2  7 10 > sample(1:10,5) [1]  7  6  1  2 10 These two will also produce different outputs: > rnorm(5) [1]  0.4874291  0.7383247  0.5757814 -0.3053884  1.5117812 > rnorm(5) [1]  0.38984324 -0.62124058 -2.21469989  1.12493092 -0.04493361 However, if we set the seed to something identical in both cases (most people use 1 for simplicity), we get two identical samples: > set.seed(1) > sample(letters,2) [1] 'g' 'j' > set.seed(1) > sample(letters,2) [1] 'g' 'j' and same with, say, rexp() draws: > set.seed(1) > rexp(5) [1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686 > set.seed(1) > rexp(5) [1] 0.7551818 1.1816428 0.1457067 0.1397953 0.4360686"
  },
  {
    "sub_topic_id": 1176,
    "sub_topic": "Randomization",
    "title": "Remarks",
    "description": "The R language is commonly used for statistical analysis. As such, it contains a robust set of options for randomization. For specific information on sampling from probability distributions, see the documentation for distribution functions. Users who are coming from other programming languages may be confused by the lack of a rand function equivalent to what they may have experienced before. Basic random number generation is done using the r* family of functions for each distribution (see the link above). Random numbers drawn uniformly from a range can be generated using runif, for \"random uniform\". Since this also looks suspiciously like \"run if\", it is often hard to figure out for new R users."
  },
  {
    "sub_topic_id": 1177,
    "sub_topic": "Raster and Image Analysis",
    "title": "Remarks",
    "description": "Gray Level Co-Occurrence Matrix (Haralick et al. 1973) texture is a powerful image feature for image analysis. The glcm package provides a easy-to-use function to calculate such texutral features for RasterLayer objects in R. The package mmand provides functions for the calculation of Mathematical Morphologies for n-dimensional arrays. With a little workaround, these can also be calculated for raster images. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1178,
    "sub_topic": "Rcpp",
    "title": "Remarks",
    "description": "Rcpp features two functions that enable code compilation inline and exportation directly into R: cppFunction() and evalCpp(). A third function called sourceCpp() exists to read in C++ code in a separate file though can be used akin to cppFunction(). Below is an example of compiling a C++ function within R. Note the use of \"\" to surround the source. To use additional packages within the Rcpp ecosystem, the correct header file may not be Rcpp.h but Rcpp<PACKAGE>.h (as e.g. for RcppArmadillo). It typically needs to be imported and then the dependency is stated within // [[Rcpp::depends(Rcpp<PACKAGE>)]]"
  },
  {
    "sub_topic_id": 1179,
    "sub_topic": "Reading and writing strings",
    "title": "Remarks",
    "description": "Base R has two functions for invoking a system command. Both require an additional parameter to capture the output of the system command. For illustration, the UNIX command top -a -b -n 1 is used. This is OS specific and may need to be amended to run the examples on your computer. Package devtools has a function to run a system command and capture the output without an additional parameter. The prompt for the next command appears immediately after the output. (Some consoles such as RStudio's may automatically append a newline to strings that do not end with a newline.) print is an example of a 'generic' function, which means the class of the first argument passed is detected and a class-specific method is used to output. For a character vector like 'Hello World', the result is similar to the output of cat. However, the character string is quoted and a number [1] is output to indicate the first element of a character vector (In this case, the first and only element)"
  },
  {
    "sub_topic_id": 1180,
    "sub_topic": "Reading and writing tabular data in plain-text files (CSV, TSV, etc.)",
    "title": "Remarks",
    "description": "Note that exporting to a plain text format sacrifices much of the information encoded in the data like variable classes for the sake of wide portability. For cases that do not require such portability, a format like .RData or Feather may be more useful. Input/output for other types of files is covered in several other topics, all linked from Input and output. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1181,
    "sub_topic": "Recycling",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1182,
    "sub_topic": "Regular Expression Syntax in R",
    "title": "Remarks",
    "description": "This document introduces the basics of regular expressions as used in R. For more information about R's regular expression syntax, see ?regex. For a comprehensive list of regular expression operators, see this ICU guide on regular expressions. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1183,
    "sub_topic": "Regular Expressions (regex)",
    "title": "Remarks",
    "description": "Regular expressions (also called \"regex\" or \"regexp\") define patterns that can be matched against a string. Type ?regex for the official R documentation and see the Regex Docs for more details. The most important 'gotcha' that will not be learned in the SO regex/topics is that most R-regex functions need the use of paired backslashes to escape in a pattern parameter. Please note that regular expressions in R often look ever-so-slightly different from regular expressions used in other languages. R requires double-backslash escapes (because \"\\\" already implies escaping in general in R strings), so, for example, to capture whitespace in most regular expression engines, one simply needs to type \\s, vs. \\s in R. UTF-8 characters in R should be escaped with a capital U, e.g. [\\U{1F600}] and [\\U1F600] match 😀, whereas in, e.g., Ruby, this would be matched with a lower-case u."
  },
  {
    "sub_topic_id": 1184,
    "sub_topic": "Reproducible R",
    "title": "Remarks",
    "description": "With 'Reproducibility' we mean that someone else (perhaps you in the future) can repeat the steps you performed and get the same result. See the Reproducible Research Task View. To create reproducible results, all sources of variation need to be fixed. For instance, if a (pseudo)random number generator is used, the seed needs to be fixed if you want to recreate the same results. Another way to reduce variation is to combine text and computation in the same document."
  },
  {
    "sub_topic_id": 1185,
    "sub_topic": "Reshape using tidyr",
    "title": "Remarks",
    "description": "tidyr has two tools for reshaping data: gather (wide to long) and spread (long to wide). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1186,
    "sub_topic": "Reshaping data between long and wide forms",
    "title": "Remarks",
    "description": "In R, tabular data is stored in data frames. This topic covers the various ways of transforming a single table. The official website contain good exemple of apps: https://www.opencpu.org/apps.html The following code is used to serve a R session: library(opencpu) opencpu$start(port = 5936) After this code is executed, you can use URLs to access the functions of the R session. The result could be XML, html, JSON or some other defined formats. For exemple, the previous R session can be accessed by a cURL call: #curl uses http post method for -X POST or -d 'arg=value' curl http://localhost:5936/ocpu/library/MASS/scripts/ch01.R -X POST curl http://localhost:5936/ocpu/library/stats/R/rnorm -d 'n=10&mean=5' The call is asynchronous, meaning that the R session is not blocked while waiting for the call to finish (contrary to shiny)."
  },
  {
    "sub_topic_id": 1187,
    "sub_topic": "RESTful R Services",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1188,
    "sub_topic": "RMarkdown and knitr presentation",
    "title": "Remarks",
    "description": "Adding a footer is not natively possible. Luckily, we can make use of jQuery and CSS to add a footer to the slides of an ioslides presentation rendered with knitr. First of all we have to include the jQuery plugin. This is done by the line <script  rc='https://ajax.googleapis.com/ajax/libs/jquery/1.12.2/jquery.min.js'></script> Now we can use jQuery to alter the DOM (document object model) of our presentation. In other words: we alter the HTML structure of the document. As soon as the presentation is loaded ($(document).ready(function() { ... })), we select all slides, that do not have the class attributes .title-slide, .backdrop, or .segue and add the tag <footer></footer> right before each slide is 'closed' (so before </slide>). The attribute label carries the content that will be displayed later on."
  },
  {
    "sub_topic_id": 1189,
    "sub_topic": "RODBC",
    "title": "Remarks",
    "description": "While RODBC is restricted to Windows computers with compatible architecture between R and any target RDMS, one of its key flexibilities is to work with Excel files as if they were SQL databases. This will connect to a SQL Server instance. For more information on what your connection string should look like, visit connectionstrings.com Also, since there's no database specified, you should make sure you fully qualify the object you're wanting to query like this databasename.schema.objectname"
  },
  {
    "sub_topic_id": 1190,
    "sub_topic": "roxygen2",
    "title": "Remarks",
    "description": "roxygen2 is a package created by Hadley Wickham to facilitate documentation. It allows to include the documentation inside the R script, in lines starting by #'. The different parameters passed to the documentation start with an @, for example the creator of a package will by written as follow: #' @author The Author For example, if we wanted to document the following function: mean<-function(x) sum(x)/length(x) We will want to write a small description to this function, and explain the parameters with the following (each line will be explained and detailed after)"
  },
  {
    "sub_topic_id": 1191,
    "sub_topic": "Run-length encoding",
    "title": "Remarks",
    "description": "A run is a consecutive sequence of repeated values or observations. For repeated values, R's 'run-length encoding' concisely describes a vector in terms of its runs. Consider: dat <- c(1, 2, 2, 2, 3, 1, 4, 4, 1, 1) We have a length-one run of 1s; then a length-three run of 2s; then a length-one run of 3s; and so on. R's run-length encoding captures all the lengths and values of a vector's runs. A run can also refer to consecutive observations in a tabular data. While R doesn't have a natural way of encoding these, they can be handled with rleid from the data.table package (currently a dead-end link)."
  },
  {
    "sub_topic_id": 1192,
    "sub_topic": "Scope of variables",
    "title": "Remarks",
    "description": "The most common pitfall with scope arises in parallelization. All variables and functions must be passed into a new environment that is run on each thread. Environments in R can be explicitly call and named. Variables can be explicitly assigned and call to or from those environments. A commonly created environment is one which encloses package:base or a subenvironment within package:base. The on.exit() function is handy for variable clean up if global variables must be assigned.Some parameters, especially those for graphics, can only be set globally. This small function is common when creating more specialized plots."
  },
  {
    "sub_topic_id": 1193,
    "sub_topic": "Set operations",
    "title": "Remarks",
    "description": "A set contains only one copy of each distinct element. Unlike some other programming languages, base R does not have a dedicated data type for sets. Instead, R treats a vector like a set by taking only its distinct elements. This applies to the set operators, setdiff, intersect, union, setequal and %in%. For v %in% S, only S is treated as a set, however, not the vector v. For a true set data type in R, the Rcpp package provides some options."
  },
  {
    "sub_topic_id": 1194,
    "sub_topic": "Shiny",
    "title": "Remarks",
    "description": "Create a group of checkboxes that can be used to toggle multiple choices independently. The server will receive the input as a character vector of the selected values. Shiny is an R package developed by RStudio that allows the creation of web pages to interactively display the results of an analysis in R. There are two simple ways to create a Shiny app: in one .R file, or in two files: ui.R and server.R. A Shiny app is divided into two parts: ui: A user interface script, controlling the layout and appearance of the application. server: A server script which contains code to allow the application to react."
  },
  {
    "sub_topic_id": 1195,
    "sub_topic": "Solving ODEs in R",
    "title": "Remarks",
    "description": "Note that it is necessary to return the rate of change in the same ordering as the specification of the state variables. In example 'The Lorenz model' this means, that in the function 'Lorenz' command return(list(c(dX, dY, dZ))) has the same order as the definition of the state variables yini <- c(X = 1, Y = 1, Z = 1).This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1196,
    "sub_topic": "Spark API (SparkR)",
    "title": "Remarks",
    "description": "The SparkR package let's you work with distributed data frames on top of a Spark cluster. These allow you to do operations like selection, filtering, aggregation on very large datasets. SparkR overview SparkR package documentation. Caching can optimize computation in Spark. Caching stores data in memory and is a special case of persistence. Here is explained what happens when you cache an RDD in Spark. Why: Basically, caching saves an interim partial result - usually after transformations - of your original data. So, when you use the cached RDD, the already transformed data from memory is accessed without recomputing the earlier transformations."
  },
  {
    "sub_topic_id": 1197,
    "sub_topic": "spatial analysis",
    "title": "Remarks",
    "description": "When it comes to geographic data, R shows to be a powerful tool for data handling, analysis and visualisation. Often, spatial data is avaliable as an XY coordinate data set in tabular form. This example will show how to create a spatial data set from an XY data set. The packages rgdal and sp provide powerful functions. Spatial data in R can be stored as Spatial*DataFrame (where * can be Points, Lines or Polygons). This example uses data which can be downloaded at OpenGeocode. At first, the working directory has to be set to the folder of the downloaded CSV data set. Furthermore, the package rgdal has to be loaded."
  },
  {
    "sub_topic_id": 1198,
    "sub_topic": "Speeding up tough-to-vectorize code",
    "title": "Remarks",
    "description": "Consider the following tough-to-vectorize for loop, which creates a vector of length len where the first element is specified (first) and each element x_i is equal to cos(x_{i-1} + 1): repeatedCosPlusOne <- function(first, len) { x <- numeric(len)  x[1] <- first  for (i in 2:len) { x[i] <- cos(x[i-1] + 1)  } return(x)} This code involves a for loop with a fast operation (cos(x[i-1]+1)), which often benefit from vectorization. However, it is not trivial to vectorize this operation with base R, since R does not have a 'cumulative cosine of x+1' function."
  },
  {
    "sub_topic_id": 1199,
    "sub_topic": "Split function",
    "title": "Remarks",
    "description": "split allows to divide a vector or a data.frame into buckets with regards to a factor/group variables. This ventilation into buckets takes the form of a list, that can then be used to apply group-wise computation (for loops or lapply/sapply). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1200,
    "sub_topic": "sqldf",
    "title": "Remarks",
    "description": "sqldf() from the package sqldf allows the use of SQLite queries to select and manipulate data in R. SQL queries are entered as character strings. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1201,
    "sub_topic": "Standardize analyses by writing standalone R scripts",
    "title": "Remarks",
    "description": "If you want to routinely apply an R analysis to a lot of separate data files, or provide a repeatable analysis method to other people, an executable R script is a user-friendly way to do so. Instead of you or your user having to call R and execute your script inside R via source(.) or a function call, your user may simply call the script itself as if it was a program. To represent the standard input-/output channels, use the functions file('stdin') (input from terminal or other program via pipe), stdout() (standard output) and stderr() (standard error). Note that while there is the function stdin(), it can not be used when supplying a ready-made script to R, because it will read the next lines of that script instead of user input."
  },
  {
    "sub_topic_id": 1202,
    "sub_topic": "String manipulation with stringi package",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1203,
    "sub_topic": "strsplit function",
    "title": "Remarks",
    "description": "strsplit is a useful function for breaking up a vector into an list on some character pattern. With typical R tools, the whole list can be reincorporated to a data.frame or part of the list might be used in a graphing exercise. Here is a common usage of strsplit: break a character vector along a comma separator: temp <-  ('this,that,other', 'hat,scarf,food', 'woman,man,child') # get a list split by commas myList <- strsplit(temp, split=',') # print myList As hinted above, the split argument is not limited to characters, but may follow a pattern dictated by a regular expression. For example, temp2 is identical to temp above except that the separators have been altered for each item. We can take advantage of the fact that the split argument accepts regular expressions to alleviate the irregularity in the vector."
  },
  {
    "sub_topic_id": 1204,
    "sub_topic": "Subsetting",
    "title": "Remarks",
    "description": "iven an R object, we may require separate analysis for one or more parts of the data contained in it. The process of obtaining these parts of the data from a given object is called subsetting. Missing values (NAs) used in subsetting with [ return NA since a NA index picks an unknown element and so returns NA in the corresponding element.. The 'default' type of NA is 'logical' (typeof(NA)) which means that, as any 'logical' vector used in subsetting, will be recycled to match the length of the subsetted object. So x[NA] is equivalent to x[as.logical(NA)] which is equivalent to x[rep_len(as.logical(NA), length(x))] and, consequently, it returns a missing value (NA) for each element of x."
  },
  {
    "sub_topic_id": 1205,
    "sub_topic": "Survival analysis",
    "title": "Remarks",
    "description": "survival is the most commonly used package for survival analysis in R. Using the built-in lung dataset we can get started with Survival Analysis by fitting a regression model with the survreg() function, creating a curve with survfit(), and plotting predicted survival curves by calling the predict method for this package with new data. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1206,
    "sub_topic": "Text mining",
    "title": "Remarks",
    "description": "The following example utilizes the tm text mining package to scrape and mine text data from the web to build word clouds with symbolic shading and ordering. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1207,
    "sub_topic": "The character class",
    "title": "Remarks",
    "description": "Characters are what other languages call 'string vectors.' To check whether a value is a character use the is.character() function. To coerce a variable to a character use the as.character() function. Note that numerics can be coerced to characters, but attempting to coerce a character to numeric may result in NA. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1208,
    "sub_topic": "The Date class",
    "title": "Remarks",
    "description": "Date: Stores time as number of days since UNIX epoch on 1970-01-01. with negative values for earlier dates. It is represented as an integer (however, it is not enforced in the internal representation) They are always printed following the rules of the current Gregorian calendar, even though the calendar was not in use a long time ago. It doesn't keep track of timezones, so it should not be used to truncate the time out of POSIXct or POSIXlt objects. sys.Date() returns an object of class Date"
  },
  {
    "sub_topic_id": 1209,
    "sub_topic": "The logical class",
    "title": "Remarks",
    "description": "Logical is a mode (and an implicit class) for vectors. TRUE, FALSE and NA are the only values for logical vectors; and all three are reserved words. T and F can be shorthand for TRUE and FALSE in a clean R session, but neither T nor F are reserved, so assignment of non-default values to those names can set users up for difficulties. Related Examples. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1210,
    "sub_topic": "tidyverse",
    "title": "Remarks",
    "description": "tidyverse is the fast and elegant way to turn basic R into an enhanced tool, redesigned by Hadley/Rstudio. The development of all packages included in tidyverse follow the principle rules of The tidy tools manifesto. But first, let the authors describe their masterpiece: The tidyverse is a set of packages that work in harmony because they share common data representations and API design. The tidyverse package is designed to make it easy to install and load core packages from the tidyverse in a single command. The best place to learn about all the packages in the tidyverse and how they fit together is R for Data Science. Expect to hear more about the tidyverse in the coming months as I work on improved package websites, making citation easier, and providing a common home for discussions about data analysis with the tidyverse."
  },
  {
    "sub_topic_id": 1211,
    "sub_topic": "Time Series and Forecasting",
    "title": "Remarks",
    "description": "Forecasting and time-series analysis may be handled with commonplace functions from the stats package, such as glm() or a large number of specialized packages. The CRAN Task View for time-series analysis provides a detailed listing of key packages by topic with short descriptions. Time series data can be stored as a ts object. ts objects contain information about seasonal frequency that is used by ARIMA functions. It also allows for calling of elements in the series by date using the window command."
  },
  {
    "sub_topic_id": 1212,
    "sub_topic": "Updating R and the package library",
    "title": "Remarks",
    "description": "Default installation of R on Windows stored files (and thus library) on a dedicated folder per R version on program files. That means that by default, you would work with several versions of R in parallel and thus separate libraries. If this not what you want and you prefer to always work with a single R instance you wan't to gradually update, it is recommended to modify the R installation folder. In wizard, just specify this folder (I personally use c:\\stats\\R). Then, for any upgrade, one possibility is to overwrite this R. Whether you also want to upgrade (all) packages is a delicate choice as it may break some of your code (this appeared for me with the tmpackage). You may: First make a copy of all your library before upgrading packages Maintain your own source packages repository, for instance using package miniCRAN"
  },
  {
    "sub_topic_id": 1213,
    "sub_topic": "Updating R version",
    "title": "Remarks",
    "description": "Installing or Updating your Software will give access to new features and bug fixes. Updating your R installation can be done in a couple of ways. One Simple way is go to R website and download the latest version for your system. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1214,
    "sub_topic": "Using pipe assignment in your own package %<>%: How to ?",
    "title": "Remarks",
    "description": "In order to use the pipe in a user-created package, it must be listed in the NAMESPACE like any other function you choose to import. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1215,
    "sub_topic": "Using texreg to export models in a paper-ready way",
    "title": "Remarks",
    "description": "DESC"
  },
  {
    "sub_topic_id": 1216,
    "sub_topic": "Variables",
    "title": "Remarks",
    "description": "The texreg package helps to export a model (or several models) in a neat paper-ready way. The result may be exported as HTML or .doc (MS Office Word). This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1217,
    "sub_topic": "Web Crawling in R",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download R (PDF) Language (PDF): https://riptutorial.com/ebook/r."
  },
  {
    "sub_topic_id": 1218,
    "sub_topic": "Web scraping and parsing",
    "title": "Remarks",
    "description": "Scraping refers to using a computer to retrieve the code of a webpage. Once the code is obtained, it must be parsed into a useful form for further use in R. Base R does not have many of the tools required for these processes, so scraping and parsing are typically done with packages. Some packages are most useful for scraping (RSelenium, httr, curl, RCurl), some for parsing (XML, xml2), and some for both (rvest). A related process is scraping a web API, which unlike a webpage returns data intended to be machine-readable. Many of the same packages are used for both."
  },
  {
    "sub_topic_id": 1219,
    "sub_topic": "Writing functions in R",
    "title": "Remarks",
    "description": "An anonymous function is, as the name implies, not assigned a name. This can be useful when the function is a part of a larger operation, but in itself does not take much place. One frequent use-case for anonymous functions is within the *apply family of Base functions. Calculate the root mean square for each column in a data.frame: df <- data.frame(first=5:9, second=(0:4)^2, third=-1:3) apply(df, 2, function(x) { sqrt(sum(x^2)) }) first    second     third  15.968719 18.814888  3.872983  Create a sequence of step-length one from the smallest to the largest value for each row in a matrix. x <- sample(1:6, 12, replace=TRUE) mat <- matrix(x, nrow=3) apply(mat, 1, function(x) { seq(min(x), max(x)) })"
  },
  {
    "sub_topic_id": 1220,
    "sub_topic": "Getting started with Microsoft SQL Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1221,
    "sub_topic": "Advanced options",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1222,
    "sub_topic": "Aggregate Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1223,
    "sub_topic": "Alias Names in Sql Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow. Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1224,
    "sub_topic": "Analyzing a Query",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1225,
    "sub_topic": "Backup and Restore Database",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1226,
    "sub_topic": "Basic DDL Operations in MS SQL Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1227,
    "sub_topic": "bcp (bulk copy program) Utility",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1228,
    "sub_topic": "BULK Import",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1229,
    "sub_topic": "CASE Statement",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1230,
    "sub_topic": "CLUSTERED COLUMNSTORE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1231,
    "sub_topic": "COALESCE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1232,
    "sub_topic": "Common Language Runtime Integration",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1233,
    "sub_topic": "Common Table Expressions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1234,
    "sub_topic": "Computed Columns",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1235,
    "sub_topic": "Converting data types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1236,
    "sub_topic": "CREATE VIEW",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1237,
    "sub_topic": "cross apply",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1238,
    "sub_topic": "Cursors",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1239,
    "sub_topic": "Data Types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1240,
    "sub_topic": "Database permissions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1241,
    "sub_topic": "Database Snapshots",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1242,
    "sub_topic": "Dates",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1243,
    "sub_topic": "DBCC",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1244,
    "sub_topic": "DBMAIL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1245,
    "sub_topic": "Delimiting special characters and reserved words",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1246,
    "sub_topic": "Drop Keyword",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1247,
    "sub_topic": "Dynamic data masking",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1248,
    "sub_topic": "Dynamic SQL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1249,
    "sub_topic": "Dynamic SQL Pivot",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1250,
    "sub_topic": "Encryption",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1251,
    "sub_topic": "Export data in txt file by using SQLCMD",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1252,
    "sub_topic": "File Group",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1253,
    "sub_topic": "Filestream",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1254,
    "sub_topic": "FOR JSON",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1255,
    "sub_topic": "FOR XML PATH",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1256,
    "sub_topic": "Foreign Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1257,
    "sub_topic": "Full-Text Indexing",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1258,
    "sub_topic": "Generating a range of dates",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1259,
    "sub_topic": "GROUP BY",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1260,
    "sub_topic": "IF...ELSE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1261,
    "sub_topic": "Index",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1262,
    "sub_topic": "In-Memory OLTP (Hekaton)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1263,
    "sub_topic": "Insert",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1264,
    "sub_topic": "INSERT INTO",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1265,
    "sub_topic": "Installing SQL Server on Windows",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1266,
    "sub_topic": "Isolation levels and locking",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1267,
    "sub_topic": "Join",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1268,
    "sub_topic": "JSON in Sql Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1269,
    "sub_topic": "Last Inserted Identity",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1270,
    "sub_topic": "Limit Result Set",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1271,
    "sub_topic": "Logical Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1272,
    "sub_topic": "Managing Azure SQL Database",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1273,
    "sub_topic": "MERGE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1274,
    "sub_topic": "Microsoft SQL Server Management Studio Shortcut Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1275,
    "sub_topic": "Migration",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1276,
    "sub_topic": "Modify JSON text",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1277,
    "sub_topic": "Move and copy data around tables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1278,
    "sub_topic": "Natively compiled modules (Hekaton)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1279,
    "sub_topic": "NULLs",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1280,
    "sub_topic": "OPENJSON",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1281,
    "sub_topic": "ORDER BY",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1282,
    "sub_topic": "OVER Clause",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1283,
    "sub_topic": "Pagination",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1284,
    "sub_topic": "Parsename",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1285,
    "sub_topic": "Partitioning",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1286,
    "sub_topic": "Permissions and Security",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1287,
    "sub_topic": "PHANTOM read",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1288,
    "sub_topic": "PIVOT / UNPIVOT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1289,
    "sub_topic": "Primary Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1290,
    "sub_topic": "Privileges or Permissions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1291,
    "sub_topic": "Queries with JSON data",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1292,
    "sub_topic": "Query Hints",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1293,
    "sub_topic": "Query Store",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1294,
    "sub_topic": "Querying results by page",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1295,
    "sub_topic": "Ranking Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1296,
    "sub_topic": "Resource Governor",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1297,
    "sub_topic": "Retrieve information about the database",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1298,
    "sub_topic": "Retrieve Information about your Instance",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1299,
    "sub_topic": "Row-level security",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1300,
    "sub_topic": "Scheduled Task or Job",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1301,
    "sub_topic": "Schemas",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1302,
    "sub_topic": "SCOPE_IDENTITY()",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1303,
    "sub_topic": "SELECT statement",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1304,
    "sub_topic": "Sequences",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1305,
    "sub_topic": "Service broker",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1306,
    "sub_topic": "Sorting/ordering rows",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1307,
    "sub_topic": "Spatial Data",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1308,
    "sub_topic": "Split String function in Sql Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1309,
    "sub_topic": "SQL Server Evolution through different versions (2000 - 2016)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1310,
    "sub_topic": "SQL Server Management Studio (SSMS)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1311,
    "sub_topic": "SQLCMD",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1312,
    "sub_topic": "Stored Procedures",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1313,
    "sub_topic": "Storing JSON in SQL tables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1314,
    "sub_topic": "String Aggregate functions in SQL Server",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1315,
    "sub_topic": "String Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1316,
    "sub_topic": "Subqueries",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1317,
    "sub_topic": "System database - TempDb",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1318,
    "sub_topic": "Table Valued Parameters",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1319,
    "sub_topic": "Temporal Tables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1320,
    "sub_topic": "The STUFF Function",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1321,
    "sub_topic": "Transaction handling",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1322,
    "sub_topic": "Transaction isolation levels",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1323,
    "sub_topic": "Trigger",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1324,
    "sub_topic": "TRY/CATCH",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1325,
    "sub_topic": "UNION",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1326,
    "sub_topic": "Use of TEMP Table",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1327,
    "sub_topic": "User Defined Table Types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1328,
    "sub_topic": "Variables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1329,
    "sub_topic": "Views",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1330,
    "sub_topic": "WHILE loop",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1331,
    "sub_topic": "Window functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1332,
    "sub_topic": "With Ties Option ",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download Microsoft SQL Server (PDF)): https://riptutorial.com/ebook/sql-server."
  },
  {
    "sub_topic_id": 1333,
    "sub_topic": "Getting started with MySQL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1334,
    "sub_topic": "ALTER TABLE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1335,
    "sub_topic": "Arithmetic",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1336,
    "sub_topic": "Backticks",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1337,
    "sub_topic": "Backup using mysqldump",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1338,
    "sub_topic": "Change Password",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1339,
    "sub_topic": "Character Sets and Collations",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1340,
    "sub_topic": "Clustering",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1341,
    "sub_topic": "Comment Mysql",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1342,
    "sub_topic": "Configuration and tuning",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1343,
    "sub_topic": "Connecting with UTF-8 Using Various Programming language.",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1344,
    "sub_topic": "Converting from MyISAM to InnoDB",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1345,
    "sub_topic": "Create New User",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1346,
    "sub_topic": "Creating databases",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1347,
    "sub_topic": "Customize PS1",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1348,
    "sub_topic": "Data Types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1349,
    "sub_topic": "Date and Time Operations",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1350,
    "sub_topic": "Dealing with sparse or missing data",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1351,
    "sub_topic": "DELETE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1352,
    "sub_topic": "Drop Table",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1353,
    "sub_topic": "Dynamic Un-Pivot Table using Prepared Statement",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1354,
    "sub_topic": "ENUM",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1355,
    "sub_topic": "Error 1055: ONLY_FULL_GROUP_BY: something is not in GROUP BY clause ...",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1356,
    "sub_topic": "Error codes",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1357,
    "sub_topic": "Events",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1358,
    "sub_topic": "Extract values from JSON type",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1359,
    "sub_topic": "Full-Text search",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1360,
    "sub_topic": "Group By",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1361,
    "sub_topic": "Handling Time Zones",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1362,
    "sub_topic": "Indexes and Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1363,
    "sub_topic": "INSERT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1364,
    "sub_topic": "Install Mysql container with Docker-Compose",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1365,
    "sub_topic": "Joins",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1366,
    "sub_topic": "JOINS: Join 3 table with the same name of id.",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1367,
    "sub_topic": "JSON",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1368,
    "sub_topic": "Limit and Offset",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1369,
    "sub_topic": "LOAD DATA INFILE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1370,
    "sub_topic": "Log files",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1371,
    "sub_topic": "Many-to-many Mapping table",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1372,
    "sub_topic": "MyISAM Engine",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1373,
    "sub_topic": "MySQL Admin",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1374,
    "sub_topic": "MySQL client",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1375,
    "sub_topic": "MySQL LOCK TABLE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1376,
    "sub_topic": "Mysql Performance Tips",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1377,
    "sub_topic": "MySQL Unions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1378,
    "sub_topic": "mysqlimport",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1379,
    "sub_topic": "NULL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1380,
    "sub_topic": "One to Many",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1381,
    "sub_topic": "ORDER BY",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1382,
    "sub_topic": "Partitioning",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1383,
    "sub_topic": "Performance Tuning",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1384,
    "sub_topic": "Pivot queries",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1385,
    "sub_topic": "PREPARE Statements",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1386,
    "sub_topic": "Recover and reset the default root password for MySQL 5.7+",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1387,
    "sub_topic": "Recover from lost root password",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1388,
    "sub_topic": "Regular Expressions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1389,
    "sub_topic": "Replication",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1390,
    "sub_topic": "Reserved Words",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1391,
    "sub_topic": "Security via GRANTs",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1392,
    "sub_topic": "SELECT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1393,
    "sub_topic": "Server Information",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1394,
    "sub_topic": "SSL Connection Setup",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1395,
    "sub_topic": "Stored routines (procedures and functions)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1396,
    "sub_topic": "String operations",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1397,
    "sub_topic": "Table Creation",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1398,
    "sub_topic": "Temporary Tables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1399,
    "sub_topic": "Time with subsecond precision",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1400,
    "sub_topic": "Transaction",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1401,
    "sub_topic": "TRIGGERS",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1402,
    "sub_topic": "UNION",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1403,
    "sub_topic": "UPDATE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1404,
    "sub_topic": "Using Variables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1405,
    "sub_topic": "VIEW",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download MySQL (PDF): https://riptutorial.com/ebook/mysql."
  },
  {
    "sub_topic_id": 1406,
    "sub_topic": "Getting started with postgresql",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1407,
    "sub_topic": "Accessing Data Programmatically",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1408,
    "sub_topic": "Aggregate Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1409,
    "sub_topic": "Backup and Restore",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1410,
    "sub_topic": "Backup script for a production DB",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1411,
    "sub_topic": "COALESCE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1412,
    "sub_topic": "Comments in postgresql",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1413,
    "sub_topic": "Common Table Expressions (WITH)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1414,
    "sub_topic": "Connect to PostgreSQL from Java",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1415,
    "sub_topic": "Data Types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1416,
    "sub_topic": "Dates, Timestamps, and Intervals",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1417,
    "sub_topic": "Event Triggers",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1418,
    "sub_topic": "Export PostgreSQL database table header and data to CSV file",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1419,
    "sub_topic": "EXTENSION dblink and postgres_fdw",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1420,
    "sub_topic": "Find String Length / Character Length",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1421,
    "sub_topic": "Inheritance",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1422,
    "sub_topic": "INSERT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1423,
    "sub_topic": "JSON Support",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1424,
    "sub_topic": "Postgres cryptographic functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1425,
    "sub_topic": "Postgres Tip and Tricks",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1426,
    "sub_topic": "PostgreSQL High Availability",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1427,
    "sub_topic": "Programming with PL/pgSQL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1428,
    "sub_topic": "Recursive queries",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1429,
    "sub_topic": "Role Management",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1430,
    "sub_topic": "SELECT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1431,
    "sub_topic": "Table Creation",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1432,
    "sub_topic": "Triggers and Trigger Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1433,
    "sub_topic": "UPDATE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1434,
    "sub_topic": "Window Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download postgresql (PDF): https://riptutorial.com/ebook/postgresql."
  },
  {
    "sub_topic_id": 1435,
    "sub_topic": "Getting started with SQL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1436,
    "sub_topic": "ALTER TABLE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1437,
    "sub_topic": "AND & OR Operators",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1438,
    "sub_topic": "Cascading Delete",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1439,
    "sub_topic": "CASE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1440,
    "sub_topic": "Clean Code in SQL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1441,
    "sub_topic": "Comments",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1442,
    "sub_topic": "Common Table Expressions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1443,
    "sub_topic": "CREATE Database",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1444,
    "sub_topic": "CREATE FUNCTION",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1445,
    "sub_topic": "CREATE TABLE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1446,
    "sub_topic": "cross apply, outer apply",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1447,
    "sub_topic": "Data Types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1448,
    "sub_topic": "DELETE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1449,
    "sub_topic": "DROP or DELETE Database",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1450,
    "sub_topic": "DROP Table",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1451,
    "sub_topic": "Example Databases and Tables",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1452,
    "sub_topic": "EXCEPT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1453,
    "sub_topic": "Execution blocks",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1454,
    "sub_topic": "EXISTS CLAUSE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1455,
    "sub_topic": "EXPLAIN and DESCRIBE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1456,
    "sub_topic": "Filter results using WHERE and HAVING",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1457,
    "sub_topic": "Finding Duplicates on a Column Subset with Detail",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1458,
    "sub_topic": "Foreign Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1459,
    "sub_topic": "Functions (Aggregate)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1460,
    "sub_topic": "Functions (Analytic)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1461,
    "sub_topic": "Functions (Scalar/Single Row)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1462,
    "sub_topic": "GRANT and REVOKE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1463,
    "sub_topic": "GROUP BY",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1464,
    "sub_topic": "Identifier",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1465,
    "sub_topic": "IN clause",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1466,
    "sub_topic": "Indexes",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1467,
    "sub_topic": "Information Schema",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1468,
    "sub_topic": "INSERT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1469,
    "sub_topic": "JOIN",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1470,
    "sub_topic": "LIKE operator",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1471,
    "sub_topic": "Materialized Views",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1472,
    "sub_topic": "MERGE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1473,
    "sub_topic": "NULL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1474,
    "sub_topic": "ORDER BY",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1475,
    "sub_topic": "Order of Execution",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1476,
    "sub_topic": "Primary Keys",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1477,
    "sub_topic": "Relational Algebra",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1478,
    "sub_topic": "Row number",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1479,
    "sub_topic": "SELECT",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1480,
    "sub_topic": "Sequence",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1481,
    "sub_topic": "SKIP TAKE (Pagination)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1482,
    "sub_topic": "SQL CURSOR",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1483,
    "sub_topic": "SQL Group By vs Distinct",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1484,
    "sub_topic": "SQL Injection",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1485,
    "sub_topic": "Stored Procedures",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1486,
    "sub_topic": "String Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1487,
    "sub_topic": "Subqueries",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1488,
    "sub_topic": "Synonyms",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1489,
    "sub_topic": "Table Design",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1490,
    "sub_topic": "Transactions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1491,
    "sub_topic": "Triggers",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1492,
    "sub_topic": "TRUNCATE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1493,
    "sub_topic": "TRY/CATCH",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1494,
    "sub_topic": "UNION / UNION ALL",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1495,
    "sub_topic": "UPDATE",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1496,
    "sub_topic": "Views",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1497,
    "sub_topic": "Window Functions",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1498,
    "sub_topic": "XML",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download SQL (PDF): https://riptutorial.com/ebook/sql."
  },
  {
    "sub_topic_id": 1499,
    "sub_topic": "Getting started with sqlite",
    "title": "Remarks",
    "description": "SQLite is a C library that is typically compiled directly into the application by downloading the source code of the latest version, and adding the sqlite3.c file to the project.Many script languages (e.g., Perl, Python, Ruby, etc.) and frameworks (e.g., Android) have support for SQLite; this is done with a built-in  copy of the SQLite library, which does not need to be installed separately.For testing SQL, it might be useful to use the command-line shell (sqlite3 or sqlite3.exe ). It is already shipped with most Linux distributions; on Windows, download the precompiled binaries in the sqlite-tools package, and extract them somewhere."
  },
  {
    "sub_topic_id": 1500,
    "sub_topic": "Command line dot-commands",
    "title": "Remarks",
    "description": "The sqlite3 command-line shell implements an additional set of commands (which are not available in programs that use the SQLite library). Official documentation: Special commands to sqlite3. This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download sqlite (PDF): https://riptutorial.com/ebook/sqlite."
  },
  {
    "sub_topic_id": 1501,
    "sub_topic": "Data types",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download sqlite (PDF): https://riptutorial.com/ebook/sqlite."
  },
  {
    "sub_topic_id": 1502,
    "sub_topic": "PRAGMA Statements",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download sqlite (PDF): https://riptutorial.com/ebook/sqlite."
  },
  {
    "sub_topic_id": 1503,
    "sub_topic": "sqlite3_stmt: Prepared Statement (C API)",
    "title": "Remarks",
    "description": "This modified text is an extract of the original Stack Overflow Documentation created by following contributors and released under CC BY-SA 3.0 This website is not affiliated with Stack Overflow.  Download sqlite (PDF): https://riptutorial.com/ebook/sqlite."
  }
]